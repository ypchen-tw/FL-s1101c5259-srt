1
00:00:04,640 --> 00:00:08,800
okay so let's continue to discuss

2
00:00:06,799 --> 00:00:11,040
what kind of languages do

3
00:00:08,800 --> 00:00:12,480
non-deterministic finite automata

4
00:00:11,040 --> 00:00:15,920
recognize

5
00:00:12,480 --> 00:00:17,279
okay i guess many of you have already

6
00:00:15,920 --> 00:00:19,439
guessed that

7
00:00:17,279 --> 00:00:20,640
non-dimitri final automata also

8
00:00:19,439 --> 00:00:24,000
recognize

9
00:00:20,640 --> 00:00:27,680
regular languages right you are correct

10
00:00:24,000 --> 00:00:31,119
so we want to prove that nfa

11
00:00:27,680 --> 00:00:35,040
and dfas are equivalent

12
00:00:31,119 --> 00:00:38,320
and let me remind you that whenever

13
00:00:35,040 --> 00:00:41,760
you see the word equivalence or

14
00:00:38,320 --> 00:00:45,280
equivalent you must ask

15
00:00:41,760 --> 00:00:48,960
what kind of criteria what criteria

16
00:00:45,280 --> 00:00:51,680
we use to do the judgment okay

17
00:00:48,960 --> 00:00:54,239
because if you use different criteria

18
00:00:51,680 --> 00:00:58,000
you will get different results

19
00:00:54,239 --> 00:01:01,920
and for this course most of the time

20
00:00:58,000 --> 00:01:05,760
we use languages as the judging criteria

21
00:01:01,920 --> 00:01:08,400
for equivalence for example

22
00:01:05,760 --> 00:01:08,400
when we say

23
00:01:09,920 --> 00:01:18,799
a machine a is equivalent

24
00:01:13,920 --> 00:01:22,720
to machine b actually we are saying that

25
00:01:18,799 --> 00:01:25,920
the language recognized

26
00:01:22,720 --> 00:01:26,960
by this machine is the language

27
00:01:25,920 --> 00:01:30,479
recognized

28
00:01:26,960 --> 00:01:35,119
by that machine okay

29
00:01:30,479 --> 00:01:38,479
so if machine

30
00:01:35,119 --> 00:01:39,520
recognizing the same language we say

31
00:01:38,479 --> 00:01:42,880
that

32
00:01:39,520 --> 00:01:43,520
they are equivalent that's usually with

33
00:01:42,880 --> 00:01:46,720
same

34
00:01:43,520 --> 00:01:49,280
equivalence of one machine

35
00:01:46,720 --> 00:01:49,280
but now

36
00:01:49,920 --> 00:01:57,360
we say equivalence of

37
00:01:54,240 --> 00:02:01,439
the set of a net phase

38
00:01:57,360 --> 00:02:04,240
and the set of dfas

39
00:02:01,439 --> 00:02:05,680
we are not talking about a single

40
00:02:04,240 --> 00:02:09,520
machine we are talking about

41
00:02:05,680 --> 00:02:12,800
a set so

42
00:02:09,520 --> 00:02:12,800
what do we mean by

43
00:02:13,120 --> 00:02:22,560
nfaas and the dfas are equivalent

44
00:02:17,760 --> 00:02:25,200
actually we want to prove that

45
00:02:22,560 --> 00:02:25,200
nfa

46
00:02:27,360 --> 00:02:35,599
has an equivalent dfa

47
00:02:31,840 --> 00:02:39,040
and also every dfa

48
00:02:35,599 --> 00:02:40,480
has an equivalent nfa we actually need

49
00:02:39,040 --> 00:02:43,680
to do

50
00:02:40,480 --> 00:02:46,000
both direction why because we want to

51
00:02:43,680 --> 00:02:50,400
prove that

52
00:02:46,000 --> 00:02:53,599
the language can be recognized

53
00:02:50,400 --> 00:02:57,760
by nfa or nfas

54
00:02:53,599 --> 00:03:02,840
collectively is the language

55
00:02:57,760 --> 00:03:06,080
can be recognized by all the dnase

56
00:03:02,840 --> 00:03:08,560
collectively then we want to prove

57
00:03:06,080 --> 00:03:09,599
in order to prove this we want we need

58
00:03:08,560 --> 00:03:13,680
to say that

59
00:03:09,599 --> 00:03:16,840
okay when you get one dfa

60
00:03:13,680 --> 00:03:21,280
you can you can find an

61
00:03:16,840 --> 00:03:22,480
nfa recognizing the same language as the

62
00:03:21,280 --> 00:03:27,120
dfa

63
00:03:22,480 --> 00:03:30,239
and vice versa but you see

64
00:03:27,120 --> 00:03:33,760
why do we have only

65
00:03:30,239 --> 00:03:38,640
every nfa has an equivalent equivalent

66
00:03:33,760 --> 00:03:41,920
dfa to prove because

67
00:03:38,640 --> 00:03:44,959
every dfa has an equivalent

68
00:03:41,920 --> 00:03:48,000
anaphase is trivial

69
00:03:44,959 --> 00:03:51,200
why because you can easily know that

70
00:03:48,000 --> 00:03:56,640
dfa is a special case

71
00:03:51,200 --> 00:03:56,640
of nfa if you don't

72
00:03:56,879 --> 00:04:04,879
believe it you can go back

73
00:04:00,080 --> 00:04:10,159
to the dfa session

74
00:04:04,879 --> 00:04:13,200
and you see we just need to rewrite

75
00:04:10,159 --> 00:04:16,799
we just need to rewrite

76
00:04:13,200 --> 00:04:19,840
uh the definition of m1

77
00:04:16,799 --> 00:04:23,520
so q is q1q2q3

78
00:04:19,840 --> 00:04:24,479
sigma is one and zero and the q1 is the

79
00:04:23,520 --> 00:04:28,240
star state

80
00:04:24,479 --> 00:04:32,160
f is q2 right then we change

81
00:04:28,240 --> 00:04:35,840
the transition function we add

82
00:04:32,160 --> 00:04:38,960
epsilon column here and goes to

83
00:04:35,840 --> 00:04:42,160
empty set

84
00:04:38,960 --> 00:04:47,120
then we change the

85
00:04:42,160 --> 00:04:47,120
current entry to be

86
00:04:47,280 --> 00:04:49,520
set

87
00:04:52,720 --> 00:05:01,039
and of course this nfl doesn't have

88
00:04:56,479 --> 00:05:04,240
epsilon arrows epsilon transitions right

89
00:05:01,039 --> 00:05:07,759
and every step it has only

90
00:05:04,240 --> 00:05:12,080
one destination one path

91
00:05:07,759 --> 00:05:16,880
but by definition it is still an nfa

92
00:05:12,080 --> 00:05:20,320
so you can see that every dfa

93
00:05:16,880 --> 00:05:23,440
can be transformed

94
00:05:20,320 --> 00:05:26,479
to a to an nfa

95
00:05:23,440 --> 00:05:31,199
and it is obvious that they

96
00:05:26,479 --> 00:05:31,199
recognize exactly the same language

97
00:05:31,680 --> 00:05:38,639
because nfa can go multiple

98
00:05:34,800 --> 00:05:41,759
paths if you let nfl to go

99
00:05:38,639 --> 00:05:44,960
exactly one path and there and

100
00:05:41,759 --> 00:05:48,720
no absolute transitions then

101
00:05:44,960 --> 00:05:52,479
that's df nfa behave

102
00:05:48,720 --> 00:05:55,840
exactly like a dfa so dfa

103
00:05:52,479 --> 00:05:59,680
is actually a special case of nfa

104
00:05:55,840 --> 00:06:02,560
so there's uh there's no point to prove

105
00:05:59,680 --> 00:06:03,280
that direction but you must know that

106
00:06:02,560 --> 00:06:06,639
that the

107
00:06:03,280 --> 00:06:09,759
direction also need to be true

108
00:06:06,639 --> 00:06:14,639
to establish the equivalence of

109
00:06:09,759 --> 00:06:18,840
nfa and dfas then if you have no problem

110
00:06:14,639 --> 00:06:22,000
we have theorem

111
00:06:18,840 --> 00:06:26,240
1.39 to prove

112
00:06:22,000 --> 00:06:30,080
okay so how do we prove that

113
00:06:26,240 --> 00:06:34,240
the proof idea is actually very similar

114
00:06:30,080 --> 00:06:38,000
to the closure property

115
00:06:34,240 --> 00:06:41,600
of the union operations on the class of

116
00:06:38,000 --> 00:06:45,520
regular languages we want to

117
00:06:41,600 --> 00:06:49,840
trace we want to trace

118
00:06:45,520 --> 00:06:49,840
the operation of an effect

119
00:06:50,240 --> 00:06:54,639
let's go back to

120
00:06:56,720 --> 00:07:05,120
the union what did we what did we do

121
00:07:01,680 --> 00:07:09,520
we say that okay you have two

122
00:07:05,120 --> 00:07:09,520
dfa and

123
00:07:10,479 --> 00:07:14,880
when process the same string you have

124
00:07:13,039 --> 00:07:19,759
computational path like this

125
00:07:14,880 --> 00:07:22,800
right then we construct a new dfa

126
00:07:19,759 --> 00:07:26,240
the state

127
00:07:22,800 --> 00:07:29,599
of this new dfa traces

128
00:07:26,240 --> 00:07:34,240
the two states so it's

129
00:07:29,599 --> 00:07:34,240
like this way

130
00:07:35,039 --> 00:07:37,759
like this way

131
00:07:39,680 --> 00:07:48,479
and any states here is like

132
00:07:43,599 --> 00:07:52,000
this one so that's the idea

133
00:07:48,479 --> 00:07:59,199
and look at how

134
00:07:52,000 --> 00:08:04,319
nfa process

135
00:07:59,199 --> 00:08:04,319
if we can do something like this

136
00:08:04,560 --> 00:08:12,879
this this

137
00:08:08,639 --> 00:08:17,039
this and this

138
00:08:12,879 --> 00:08:21,280
this and this then

139
00:08:17,039 --> 00:08:25,599
the machine will behave exactly

140
00:08:21,280 --> 00:08:29,199
like a dfa right

141
00:08:25,599 --> 00:08:32,240
and you might say uh well but

142
00:08:29,199 --> 00:08:35,120
for two machine it it can

143
00:08:32,240 --> 00:08:36,240
easily be seen that you have only the

144
00:08:35,120 --> 00:08:39,360
combination

145
00:08:36,240 --> 00:08:42,800
of their states right but

146
00:08:39,360 --> 00:08:44,480
now is it possible to contain all the

147
00:08:42,800 --> 00:08:48,320
possibility

148
00:08:44,480 --> 00:08:51,519
actually it is why because

149
00:08:48,320 --> 00:08:54,880
we don't care about multiple paths

150
00:08:51,519 --> 00:08:58,000
to accept the string right as long as

151
00:08:54,880 --> 00:09:01,680
one path accept a string

152
00:08:58,000 --> 00:09:05,040
then the whole machine accept the string

153
00:09:01,680 --> 00:09:08,160
in this case you can see that

154
00:09:05,040 --> 00:09:12,000
we don't need duplicate

155
00:09:08,160 --> 00:09:12,000
states for example

156
00:09:13,839 --> 00:09:18,560
when it comes to this part

157
00:09:19,519 --> 00:09:26,880
we only need to leave one

158
00:09:22,800 --> 00:09:26,880
path because

159
00:09:28,240 --> 00:09:35,519
start from q4 reading the same symbol

160
00:09:32,480 --> 00:09:38,240
they will go to the same places

161
00:09:35,519 --> 00:09:38,800
so we don't need multiple copies we only

162
00:09:38,240 --> 00:09:42,640
need

163
00:09:38,800 --> 00:09:45,839
one for each time step

164
00:09:42,640 --> 00:09:51,839
so in this case all possibility

165
00:09:45,839 --> 00:09:51,839
within any step

166
00:09:52,640 --> 00:10:00,560
is the power set

167
00:09:56,240 --> 00:10:00,560
of the state right

168
00:10:00,640 --> 00:10:10,000
and it it it can easily be seen that

169
00:10:05,519 --> 00:10:10,000
for every state for every state

170
00:10:10,800 --> 00:10:15,200
you either have a process you either

171
00:10:13,440 --> 00:10:19,519
have process on the state

172
00:10:15,200 --> 00:10:22,880
or not so for this example

173
00:10:19,519 --> 00:10:26,000
every time every every

174
00:10:22,880 --> 00:10:29,519
time step you have so many

175
00:10:26,000 --> 00:10:32,959
possibilities which is power of

176
00:10:29,519 --> 00:10:37,120
the states so

177
00:10:32,959 --> 00:10:40,560
we can use the same idea to prove

178
00:10:37,120 --> 00:10:43,600
the union the closure property of the

179
00:10:40,560 --> 00:10:43,600
union operation

180
00:10:45,279 --> 00:10:53,120
and construct an equivalent dfa for nfa

181
00:10:49,760 --> 00:10:53,120
so how do we construct that

182
00:10:53,279 --> 00:11:01,120
so given an nfa

183
00:10:57,680 --> 00:11:04,560
this one is given we want to

184
00:11:01,120 --> 00:11:04,560
construct a dfa

185
00:11:05,120 --> 00:11:09,200
and the 5 tuple is q prime sigma delta

186
00:11:08,720 --> 00:11:12,959
prime

187
00:11:09,200 --> 00:11:16,000
q 1 q 0 and f prime

188
00:11:12,959 --> 00:11:18,640
and in this case the sigma is exactly

189
00:11:16,000 --> 00:11:20,480
the same so we don't need to

190
00:11:18,640 --> 00:11:24,160
discuss it right because we want to

191
00:11:20,480 --> 00:11:27,760
construct an equivalent dfa

192
00:11:24,160 --> 00:11:29,839
so what should be that what should be

193
00:11:27,760 --> 00:11:29,839
the

194
00:11:30,240 --> 00:11:33,120
state of the

195
00:11:33,360 --> 00:11:40,160
dfa apparently

196
00:11:36,800 --> 00:11:42,240
we can directly use power set like we

197
00:11:40,160 --> 00:11:46,720
use cartesian products for the

198
00:11:42,240 --> 00:11:48,480
previous case we can use power set

199
00:11:46,720 --> 00:11:50,079
and when we use power set we can

200
00:11:48,480 --> 00:11:54,240
directly use the

201
00:11:50,079 --> 00:11:57,920
powers the members of the power set

202
00:11:54,240 --> 00:12:01,040
as the label of that state

203
00:11:57,920 --> 00:12:01,440
when you see the example we will we will

204
00:12:01,040 --> 00:12:03,120
give

205
00:12:01,440 --> 00:12:04,480
you will understand what i'm talking

206
00:12:03,120 --> 00:12:09,600
about

207
00:12:04,480 --> 00:12:13,680
so we use power set firstly we have

208
00:12:09,600 --> 00:12:16,959
two children cardinality

209
00:12:13,680 --> 00:12:19,920
of q states and then

210
00:12:16,959 --> 00:12:19,920
we can use

211
00:12:20,399 --> 00:12:24,160
the subset directly as the label of the

212
00:12:23,200 --> 00:12:29,200
set to

213
00:12:24,160 --> 00:12:33,519
represent what state the original nfa

214
00:12:29,200 --> 00:12:38,480
has process on okay

215
00:12:33,519 --> 00:12:42,720
so in this case in this case

216
00:12:38,480 --> 00:12:46,000
what is the star state of our nfa

217
00:12:42,720 --> 00:12:48,959
sorry dfa that would be

218
00:12:46,000 --> 00:12:48,959
this state

219
00:12:49,360 --> 00:12:54,480
it's kind of tricky that don't consider

220
00:12:58,079 --> 00:13:07,839
it as a set

221
00:13:02,399 --> 00:13:07,839
you should consider it's a label

222
00:13:09,519 --> 00:13:16,800
attached to some state

223
00:13:12,639 --> 00:13:20,240
and we use the label to indicate

224
00:13:16,800 --> 00:13:23,279
to specify that set

225
00:13:20,240 --> 00:13:23,279
sorry that state

226
00:13:23,680 --> 00:13:30,959
okay here we say that the star states q

227
00:13:27,680 --> 00:13:34,079
0 prime is this one

228
00:13:30,959 --> 00:13:37,120
this thing but

229
00:13:34,079 --> 00:13:40,959
that that is not a set

230
00:13:37,120 --> 00:13:44,160
that is a state only the name the label

231
00:13:40,959 --> 00:13:49,040
of the state okay

232
00:13:44,160 --> 00:13:52,160
and what is the accept states

233
00:13:49,040 --> 00:13:55,519
of our dfa

234
00:13:52,160 --> 00:13:58,959
since every state

235
00:13:55,519 --> 00:14:02,160
of the dfa is

236
00:13:58,959 --> 00:14:08,240
or not is represents

237
00:14:02,160 --> 00:14:11,279
a set of the states of the original nfa

238
00:14:08,240 --> 00:14:14,720
as long as it contains an

239
00:14:11,279 --> 00:14:18,480
accept state of the original nfa

240
00:14:14,720 --> 00:14:22,560
we consider that state

241
00:14:18,480 --> 00:14:24,880
our accept state

242
00:14:22,560 --> 00:14:24,880
okay

243
00:14:28,839 --> 00:14:31,839
then

244
00:14:32,880 --> 00:14:37,040
what is the transition function

245
00:14:37,760 --> 00:14:41,040
so right uh writing a transition

246
00:14:40,160 --> 00:14:44,240
function is

247
00:14:41,040 --> 00:14:49,760
exactly like what we did

248
00:14:44,240 --> 00:14:49,760
for proving the closure property

249
00:14:50,399 --> 00:14:58,399
of the union operations on the class of

250
00:14:53,839 --> 00:15:02,240
regular languages that

251
00:14:58,399 --> 00:15:02,240
our transition function

252
00:15:02,639 --> 00:15:09,920
when the dfa on this state

253
00:15:05,839 --> 00:15:09,920
and sees this symbol

254
00:15:10,079 --> 00:15:17,839
and don't forget that this

255
00:15:13,279 --> 00:15:21,920
state actually represents

256
00:15:17,839 --> 00:15:26,000
a set of the original states of the

257
00:15:21,920 --> 00:15:29,279
original nfa

258
00:15:26,000 --> 00:15:33,519
example if the original nfa

259
00:15:29,279 --> 00:15:37,040
has states q1

260
00:15:33,519 --> 00:15:40,560
q2 q3

261
00:15:37,040 --> 00:15:44,800
to q something qn and

262
00:15:40,560 --> 00:15:48,399
one of our one

263
00:15:44,800 --> 00:15:51,680
states of our dfa states may be

264
00:15:48,399 --> 00:15:54,959
like q two and q

265
00:15:51,680 --> 00:16:00,320
three right it is a set

266
00:15:54,959 --> 00:16:03,920
but it is a state of dfa

267
00:16:00,320 --> 00:16:08,079
so delta this state sees

268
00:16:03,920 --> 00:16:11,199
this symbol is what

269
00:16:08,079 --> 00:16:14,480
you just need to look up

270
00:16:11,199 --> 00:16:19,440
the original delta

271
00:16:14,480 --> 00:16:22,560
q2 and give the same symbol

272
00:16:19,440 --> 00:16:27,199
it will return some set

273
00:16:22,560 --> 00:16:27,199
of states right and the union

274
00:16:27,360 --> 00:16:34,839
q3 the same symbol

275
00:16:30,800 --> 00:16:37,759
if you have one more here then

276
00:16:34,839 --> 00:16:40,880
union the original transition function

277
00:16:37,759 --> 00:16:44,079
q4 this symbol that's why

278
00:16:40,880 --> 00:16:47,519
we write transition entry

279
00:16:44,079 --> 00:16:50,720
this way for every

280
00:16:47,519 --> 00:16:54,880
original every state of

281
00:16:50,720 --> 00:16:54,880
the original nfa within

282
00:16:55,199 --> 00:17:02,399
the state of our dfa which is

283
00:16:58,240 --> 00:17:06,079
which is a set of the nfs states

284
00:17:02,399 --> 00:17:07,360
we look up the original interface

285
00:17:06,079 --> 00:17:12,720
transition function

286
00:17:07,360 --> 00:17:16,160
with the state and the same symbol here

287
00:17:12,720 --> 00:17:19,280
and it will be some

288
00:17:16,160 --> 00:17:20,880
set of the original and every state then

289
00:17:19,280 --> 00:17:24,079
we union

290
00:17:20,880 --> 00:17:27,600
lay o

291
00:17:24,079 --> 00:17:30,240
after we do the union it will

292
00:17:27,600 --> 00:17:30,240
become

293
00:17:30,640 --> 00:17:37,840
a set of the original nf states right

294
00:17:34,480 --> 00:17:41,360
then it is exactly one

295
00:17:37,840 --> 00:17:43,679
of the dfa

296
00:17:41,360 --> 00:17:43,679
state

297
00:17:45,120 --> 00:17:48,960
so that's the construction of the

298
00:17:47,600 --> 00:17:52,640
equivalent dfa

299
00:17:48,960 --> 00:17:57,679
from a given enlightened

300
00:17:52,640 --> 00:18:01,360
but here we haven't considered epster

301
00:17:57,679 --> 00:18:02,080
because when you when nfa sees epsilon

302
00:18:01,360 --> 00:18:05,360
it can go

303
00:18:02,080 --> 00:18:05,360
to the

304
00:18:07,200 --> 00:18:13,600
specified states right

305
00:18:10,240 --> 00:18:17,600
so we just need to

306
00:18:13,600 --> 00:18:22,960
introduce a notation regarding

307
00:18:17,600 --> 00:18:29,840
epsilon we call it epsilon closure

308
00:18:22,960 --> 00:18:33,039
so epsilon closure means

309
00:18:29,840 --> 00:18:37,520
start from the states within

310
00:18:33,039 --> 00:18:42,160
a dfa state by traveling along

311
00:18:37,520 --> 00:18:46,400
zero or more epsilon arrows

312
00:18:42,160 --> 00:18:51,039
so let's

313
00:18:46,400 --> 00:18:55,280
see the example here see

314
00:18:51,039 --> 00:18:58,720
so for empty set

315
00:18:55,280 --> 00:19:01,760
the absence closure of empty set

316
00:18:58,720 --> 00:19:05,440
is empty set right

317
00:19:01,760 --> 00:19:09,440
for the sets containing only q1

318
00:19:05,440 --> 00:19:12,720
the epsilon closure of this set

319
00:19:09,440 --> 00:19:15,760
is what is still q1

320
00:19:12,720 --> 00:19:19,200
right because traveling zero

321
00:19:15,760 --> 00:19:23,679
epsilon arrows

322
00:19:19,200 --> 00:19:27,600
then for q2

323
00:19:23,679 --> 00:19:30,720
the epsilon closure will be first

324
00:19:27,600 --> 00:19:33,919
q2 itself then

325
00:19:30,720 --> 00:19:36,559
traveling from q2 to q3 so that will be

326
00:19:33,919 --> 00:19:36,559
q3

327
00:19:36,880 --> 00:19:43,360
okay so for q3

328
00:19:40,160 --> 00:19:45,760
it's it is q3

329
00:19:43,360 --> 00:19:45,760
because

330
00:19:46,720 --> 00:19:56,160
can go no more places and for q4 is q4

331
00:19:52,960 --> 00:20:01,840
then interesting part is goes on

332
00:19:56,160 --> 00:20:06,030
q1 q2 for the set of q1

333
00:20:01,840 --> 00:20:07,440
q2 the epsilon closure of q1 q2 will be

334
00:20:06,030 --> 00:20:10,559
[Music]

335
00:20:07,440 --> 00:20:15,520
q1 itself q2 itself

336
00:20:10,559 --> 00:20:15,520
union with q1

337
00:20:16,000 --> 00:20:23,360
goes to any state no q2

338
00:20:19,440 --> 00:20:27,360
can traveling by one epsilon closure

339
00:20:23,360 --> 00:20:27,360
ah sorry epsilon arrow to q3

340
00:20:28,000 --> 00:20:32,559
right so this one will be

341
00:20:33,039 --> 00:20:40,720
this union with this

342
00:20:37,280 --> 00:20:44,559
so the same thing goes to q2 q3

343
00:20:40,720 --> 00:20:44,559
will become q2 q3

344
00:20:44,799 --> 00:20:53,600
and q2 q4 will be q2 q3 q4

345
00:20:49,919 --> 00:20:57,200
and q3 q4 will be q3 q4

346
00:20:53,600 --> 00:21:00,640
and goes on so by doing that

347
00:20:57,200 --> 00:21:05,039
epsilon closure we just need to

348
00:21:00,640 --> 00:21:05,039
change the transition function

349
00:21:05,360 --> 00:21:08,000
to add

350
00:21:09,039 --> 00:21:11,919
this part

351
00:21:12,559 --> 00:21:21,039
and to change this part augmented

352
00:21:17,280 --> 00:21:24,960
with epsom closure

353
00:21:21,039 --> 00:21:28,480
and also change the star state

354
00:21:24,960 --> 00:21:31,600
by absent closure

355
00:21:28,480 --> 00:21:34,799
of the star state

356
00:21:31,600 --> 00:21:37,600
okay because it might have

357
00:21:34,799 --> 00:21:38,799
because an nfa might have something like

358
00:21:37,600 --> 00:21:42,159
you start from

359
00:21:38,799 --> 00:21:45,039
these states but there is

360
00:21:42,159 --> 00:21:46,000
absolute epsilon epsilon arrow to

361
00:21:45,039 --> 00:21:49,840
another state

362
00:21:46,000 --> 00:21:54,720
so effectively start from this state

363
00:21:49,840 --> 00:21:57,760
and folk twice one is the original state

364
00:21:54,720 --> 00:21:59,360
and the other is the state from the

365
00:21:57,760 --> 00:22:02,720
epsom closure

366
00:21:59,360 --> 00:22:06,400
and it's like goes this way epson

367
00:22:02,720 --> 00:22:11,200
so start from two separate states

368
00:22:06,400 --> 00:22:14,720
in the beginning so we need to have

369
00:22:11,200 --> 00:22:19,200
here and here then we can

370
00:22:14,720 --> 00:22:22,880
construct the equivalent dfa

371
00:22:19,200 --> 00:22:26,080
okay so uh firstly let's

372
00:22:22,880 --> 00:22:29,360
see an example okay so

373
00:22:26,080 --> 00:22:33,280
let's say we

374
00:22:29,360 --> 00:22:37,440
have a nfa here

375
00:22:33,280 --> 00:22:41,280
so the states q is

376
00:22:37,440 --> 00:22:44,400
one two three right

377
00:22:41,280 --> 00:22:45,600
remember that one here two here three

378
00:22:44,400 --> 00:22:48,720
here

379
00:22:45,600 --> 00:22:52,880
are not integers they are just

380
00:22:48,720 --> 00:22:56,080
you know symbols or label of states okay

381
00:22:52,880 --> 00:22:57,770
so do the power set

382
00:22:56,080 --> 00:22:59,760
of q that will be

383
00:22:57,770 --> 00:23:02,960
[Music]

384
00:22:59,760 --> 00:23:07,039
these eight subsets

385
00:23:02,960 --> 00:23:11,679
all possible subset right

386
00:23:07,039 --> 00:23:11,679
okay so then we can uh

387
00:23:13,360 --> 00:23:17,840
draw the whole thing here

388
00:23:18,320 --> 00:23:25,360
so first firstly we draw

389
00:23:22,640 --> 00:23:25,360
empty set

390
00:23:27,520 --> 00:23:32,480
one two three

391
00:23:30,760 --> 00:23:36,080
[Music]

392
00:23:32,480 --> 00:23:40,559
one two one three

393
00:23:36,080 --> 00:23:40,559
two three one two three

394
00:23:40,640 --> 00:23:42,960
okay

395
00:23:45,039 --> 00:23:47,279
then

396
00:23:48,320 --> 00:23:55,679
we construct the oh sorry

397
00:23:52,159 --> 00:23:58,880
then we select the not select sorry

398
00:23:55,679 --> 00:23:58,880
we uh

399
00:23:59,279 --> 00:24:05,760
define the star state

400
00:24:02,480 --> 00:24:09,760
the star stage should be this one

401
00:24:05,760 --> 00:24:13,919
but actually should be epsilon closure

402
00:24:09,760 --> 00:24:17,039
of one

403
00:24:13,919 --> 00:24:20,240
right and you can see that

404
00:24:17,039 --> 00:24:23,120
epsilon closure would be

405
00:24:20,240 --> 00:24:24,240
one itself and the traveling by epsilon

406
00:24:23,120 --> 00:24:27,360
variable that would be

407
00:24:24,240 --> 00:24:29,760
three so

408
00:24:27,360 --> 00:24:30,799
that's why the star states of this

409
00:24:29,760 --> 00:24:33,840
machine

410
00:24:30,799 --> 00:24:33,840
is this one

411
00:24:34,400 --> 00:24:42,159
then we start to

412
00:24:37,760 --> 00:24:47,120
do the transition function

413
00:24:42,159 --> 00:24:49,039
so start from empty set

414
00:24:47,120 --> 00:24:51,200
i shouldn't call it empty set but start

415
00:24:49,039 --> 00:24:54,320
from this state okay

416
00:24:51,200 --> 00:24:57,360
so we know that it goes

417
00:24:54,320 --> 00:25:01,520
to nowhere so either a or b

418
00:24:57,360 --> 00:25:04,880
goes to nowhere so like this

419
00:25:01,520 --> 00:25:08,000
then for one

420
00:25:04,880 --> 00:25:12,320
we look up where

421
00:25:08,000 --> 00:25:12,320
if you are on one

422
00:25:13,440 --> 00:25:20,320
and sees a there is no

423
00:25:17,120 --> 00:25:23,520
outs there is no out arc for a

424
00:25:20,320 --> 00:25:26,080
right so that would be go out

425
00:25:23,520 --> 00:25:27,360
that will make the transition goes to

426
00:25:26,080 --> 00:25:30,880
empty set

427
00:25:27,360 --> 00:25:34,880
so that's this one and the b

428
00:25:30,880 --> 00:25:38,559
only uh goes two and we need to see

429
00:25:34,880 --> 00:25:42,640
epsilon of two something like this

430
00:25:38,559 --> 00:25:47,440
that will be still two so it goes to

431
00:25:42,640 --> 00:25:47,440
2 okay so 6a and 6b

432
00:25:53,039 --> 00:26:00,240
then let's considered two

433
00:25:56,799 --> 00:26:03,600
okay so

434
00:26:00,240 --> 00:26:04,080
when the original nfa is on two and the

435
00:26:03,600 --> 00:26:08,840
c is

436
00:26:04,080 --> 00:26:12,799
a that will be two and three

437
00:26:08,840 --> 00:26:17,279
so two and three

438
00:26:12,799 --> 00:26:22,400
and we do epsilon still two and three

439
00:26:17,279 --> 00:26:25,679
so two and three here

440
00:26:22,400 --> 00:26:28,880
then b that'll be three

441
00:26:25,679 --> 00:26:33,200
and epsilon closure still

442
00:26:28,880 --> 00:26:39,840
three so b three

443
00:26:33,200 --> 00:26:39,840
okay then

444
00:26:42,159 --> 00:26:49,919
three here okay

445
00:26:46,000 --> 00:26:53,360
so when you are when the original nfa

446
00:26:49,919 --> 00:26:54,480
is on three and this is a it will be

447
00:26:53,360 --> 00:26:57,520
gold

448
00:26:54,480 --> 00:27:01,360
b1 but don't forget that

449
00:26:57,520 --> 00:27:06,320
epsilon closure of one is one three

450
00:27:01,360 --> 00:27:09,600
so a goes to one three

451
00:27:06,320 --> 00:27:13,120
and b that will be empty so

452
00:27:09,600 --> 00:27:16,880
empty okay so

453
00:27:13,120 --> 00:27:16,880
we have one two three

454
00:27:18,840 --> 00:27:25,279
finished then let's say

455
00:27:21,840 --> 00:27:28,399
one two one two we see

456
00:27:25,279 --> 00:27:31,760
a one c's a

457
00:27:28,399 --> 00:27:35,760
and a two c say and do union then

458
00:27:31,760 --> 00:27:39,360
epsilon closure okay so once this a go

459
00:27:35,760 --> 00:27:43,039
empty two c's a go two three

460
00:27:39,360 --> 00:27:45,600
so m t two three epsilon closure

461
00:27:43,039 --> 00:27:45,600
two three

462
00:27:46,159 --> 00:27:53,919
and the b 1 6 b

463
00:27:49,679 --> 00:27:56,960
goes to 2 6 b goes 3

464
00:27:53,919 --> 00:28:00,480
still 2 3 but you know different

465
00:27:56,960 --> 00:28:03,600
uh path so still

466
00:28:00,480 --> 00:28:06,799
2 3. then

467
00:28:03,600 --> 00:28:06,799
we see one three

468
00:28:11,840 --> 00:28:20,000
one sees a

469
00:28:16,480 --> 00:28:23,279
empty three six a

470
00:28:20,000 --> 00:28:26,559
one three so empty union with one

471
00:28:23,279 --> 00:28:30,320
three and the two epsilon closure

472
00:28:26,559 --> 00:28:33,600
still one three right

473
00:28:30,320 --> 00:28:35,410
then b once this b goes to

474
00:28:33,600 --> 00:28:36,799
two and three

475
00:28:35,410 --> 00:28:40,159
[Music]

476
00:28:36,799 --> 00:28:42,880
c b goes to empty set so two

477
00:28:40,159 --> 00:28:45,840
and uh empty set and the absolute

478
00:28:42,880 --> 00:28:45,840
closure

479
00:28:56,840 --> 00:28:59,840
sorry

480
00:29:01,840 --> 00:29:08,799
once this b goes to two

481
00:29:05,279 --> 00:29:12,399
three c b goes to zero uh not zero

482
00:29:08,799 --> 00:29:15,520
empty set so empty state union with two

483
00:29:12,399 --> 00:29:18,640
and two epsilon culture is still two so

484
00:29:15,520 --> 00:29:27,600
b one three

485
00:29:18,640 --> 00:29:31,679
six b goes to two okay then

486
00:29:27,600 --> 00:29:35,279
two three so two

487
00:29:31,679 --> 00:29:38,559
six a goes to two three

488
00:29:35,279 --> 00:29:41,679
three six a goes to one three

489
00:29:38,559 --> 00:29:44,159
so two three union with one three and

490
00:29:41,679 --> 00:29:45,840
consider epsilon closure that would be

491
00:29:44,159 --> 00:29:49,120
actually one two three

492
00:29:45,840 --> 00:29:52,480
so two three six a

493
00:29:49,120 --> 00:29:56,720
goes to one two three and two

494
00:29:52,480 --> 00:29:59,919
three c 6 b 2 6 b

495
00:29:56,720 --> 00:30:03,279
3 3 6 b

496
00:29:59,919 --> 00:30:06,159
empty so 3 empty

497
00:30:03,279 --> 00:30:06,159
epsom closure

498
00:30:06,880 --> 00:30:14,799
3. okay then

499
00:30:10,159 --> 00:30:14,799
finally we have one two three

500
00:30:15,600 --> 00:30:17,760
so

501
00:30:18,799 --> 00:30:26,880
one this a actually we can

502
00:30:23,520 --> 00:30:31,520
do that like one two

503
00:30:26,880 --> 00:30:31,520
and two three right

504
00:30:34,480 --> 00:30:41,840
one two 6 8 go to 2 3

505
00:30:38,080 --> 00:30:42,559
2 3 6 8 go to 1 2 3. so that would be 1

506
00:30:41,840 --> 00:30:46,799
2 3.

507
00:30:42,559 --> 00:30:50,559
so 1 2 3 cc goes back to itself

508
00:30:46,799 --> 00:30:53,840
and 1 2 6 b go to 2 3

509
00:30:50,559 --> 00:30:56,640
2 3 6 b goes to 3 3

510
00:30:53,840 --> 00:30:57,760
and the 2 3 doing union and epsilon

511
00:30:56,640 --> 00:31:01,200
closure

512
00:30:57,760 --> 00:31:05,760
that will be 2 3 so this b

513
00:31:01,200 --> 00:31:10,159
goes to 2 3.

514
00:31:05,760 --> 00:31:14,559
okay so

515
00:31:10,159 --> 00:31:18,799
we now processed the whole thing here

516
00:31:14,559 --> 00:31:21,519
so you can construct these

517
00:31:18,799 --> 00:31:21,519
dfa

518
00:31:23,120 --> 00:31:27,039
given an fa here

519
00:31:30,840 --> 00:31:35,120
okay

520
00:31:32,080 --> 00:31:38,640
for this dfa we can easily see that

521
00:31:35,120 --> 00:31:42,480
this one is the start state so

522
00:31:38,640 --> 00:31:45,840
it is not possible

523
00:31:42,480 --> 00:31:48,080
to goes to this state so it's useless

524
00:31:45,840 --> 00:31:51,120
and also this state

525
00:31:48,080 --> 00:31:54,159
so the two states are useless

526
00:31:51,120 --> 00:32:00,399
so it can be written

527
00:31:54,159 --> 00:32:02,919
as a sixth state dfa and

528
00:32:00,399 --> 00:32:04,559
as a note here that such a

529
00:32:02,919 --> 00:32:07,919
simplification of

530
00:32:04,559 --> 00:32:11,200
dfa is not general

531
00:32:07,919 --> 00:32:11,200
in in general

532
00:32:11,919 --> 00:32:16,399
we will have a minimization of dfa

533
00:32:14,720 --> 00:32:19,840
process

534
00:32:16,399 --> 00:32:23,039
so it's it is not necessary that

535
00:32:19,840 --> 00:32:27,200
you will find some useless state as

536
00:32:23,039 --> 00:32:31,440
in this case okay so that would be the

537
00:32:27,200 --> 00:32:36,240
example to construct the dfa

538
00:32:31,440 --> 00:32:39,600
but the question remains um

539
00:32:36,240 --> 00:32:43,360
unlike unlike the proof

540
00:32:39,600 --> 00:32:46,000
in unlike the proof

541
00:32:43,360 --> 00:32:47,840
in the cultural property of union

542
00:32:46,000 --> 00:32:51,519
operation

543
00:32:47,840 --> 00:32:51,840
i said that that proof that construction

544
00:32:51,519 --> 00:32:56,720
is

545
00:32:51,840 --> 00:33:00,159
is quite intuitive so we don't provide

546
00:32:56,720 --> 00:33:02,559
a correct a correctness proof to prove

547
00:33:00,159 --> 00:33:04,480
that the construct by the procedure the

548
00:33:02,559 --> 00:33:09,279
constructed dfa

549
00:33:04,480 --> 00:33:09,279
is really equivalent of

550
00:33:09,360 --> 00:33:15,279
in that case really recognize the union

551
00:33:13,039 --> 00:33:18,320
of that two languages

552
00:33:15,279 --> 00:33:19,200
but in this case apparently the dfa

553
00:33:18,320 --> 00:33:22,960
constructed

554
00:33:19,200 --> 00:33:26,960
is kind of complicated right

555
00:33:22,960 --> 00:33:30,559
i think most of can most of us

556
00:33:26,960 --> 00:33:35,279
cannot readily

557
00:33:30,559 --> 00:33:38,399
accept that the dfa here

558
00:33:35,279 --> 00:33:41,440
is really equivalent to nfa here

559
00:33:38,399 --> 00:33:44,880
the language of the dfa is really

560
00:33:41,440 --> 00:33:47,840
the language of this nfa

561
00:33:44,880 --> 00:33:50,720
it's kind of difficult to accept so we

562
00:33:47,840 --> 00:33:50,720
need to prove that

563
00:33:51,120 --> 00:33:53,840
but

564
00:34:00,559 --> 00:34:06,720
in order to do the proof we need some

565
00:34:04,320 --> 00:34:07,679
uh mathematical trans construction to

566
00:34:06,720 --> 00:34:11,200
help

567
00:34:07,679 --> 00:34:14,159
to help us and the proof here

568
00:34:11,200 --> 00:34:15,679
we consider no epsilon errors for

569
00:34:14,159 --> 00:34:18,240
simplicity

570
00:34:15,679 --> 00:34:20,159
okay you need to do the epsilon closure

571
00:34:18,240 --> 00:34:21,200
puts back to the proof then it will be

572
00:34:20,159 --> 00:34:23,440
okay but

573
00:34:21,200 --> 00:34:24,720
for simplicity we don't consider that

574
00:34:23,440 --> 00:34:28,800
you can

575
00:34:24,720 --> 00:34:28,800
try to do it in your uh by yourself

576
00:34:30,079 --> 00:34:34,800
we define its extended transition

577
00:34:32,960 --> 00:34:38,000
function

578
00:34:34,800 --> 00:34:40,159
given one transition function okay

579
00:34:38,000 --> 00:34:41,200
so the extended transition function here

580
00:34:40,159 --> 00:34:44,639
is not

581
00:34:41,200 --> 00:34:48,000
some new things it is a

582
00:34:44,639 --> 00:34:52,000
it is merely a syntax

583
00:34:48,000 --> 00:34:55,679
sugar we use a shorter

584
00:34:52,000 --> 00:34:56,720
notation to express more complicated

585
00:34:55,679 --> 00:35:00,160
construction

586
00:34:56,720 --> 00:35:03,520
but we don't introduce new things

587
00:35:00,160 --> 00:35:07,520
into the framework

588
00:35:03,520 --> 00:35:10,800
so when you have a dfa that dfa

589
00:35:07,520 --> 00:35:14,079
will have a transition function

590
00:35:10,800 --> 00:35:14,960
right and based on this transition

591
00:35:14,079 --> 00:35:19,359
function

592
00:35:14,960 --> 00:35:22,960
we define extended transit function

593
00:35:19,359 --> 00:35:25,200
recursively based on

594
00:35:22,960 --> 00:35:27,280
this transition function how do we

595
00:35:25,200 --> 00:35:31,599
define that

596
00:35:27,280 --> 00:35:35,680
we define the extended charging function

597
00:35:31,599 --> 00:35:39,119
for all the states of the dfa

598
00:35:35,680 --> 00:35:40,240
and if nothing here which is an empty

599
00:35:39,119 --> 00:35:42,320
string

600
00:35:40,240 --> 00:35:44,400
then the extent transition function will

601
00:35:42,320 --> 00:35:48,320
be that state

602
00:35:44,400 --> 00:35:52,240
okay it is the base case

603
00:35:48,320 --> 00:35:55,680
if this is not

604
00:35:52,240 --> 00:35:59,520
an empty string then

605
00:35:55,680 --> 00:36:04,079
we separate

606
00:35:59,520 --> 00:36:04,079
the final symbol here

607
00:36:04,720 --> 00:36:08,960
and the calls back the extended

608
00:36:06,880 --> 00:36:11,599
transition function

609
00:36:08,960 --> 00:36:12,800
and this extended transformation finally

610
00:36:11,599 --> 00:36:15,920
will have

611
00:36:12,800 --> 00:36:18,240
well return a state then

612
00:36:15,920 --> 00:36:19,040
you just look up the original transition

613
00:36:18,240 --> 00:36:24,079
function

614
00:36:19,040 --> 00:36:24,079
with this state and the symbol here

615
00:36:24,720 --> 00:36:27,839
and why do we want to do it because we

616
00:36:27,440 --> 00:36:32,079
just

617
00:36:27,839 --> 00:36:34,320
want a notation to easily express

618
00:36:32,079 --> 00:36:34,320
uh

619
00:36:35,520 --> 00:36:42,640
the state transition after some dfa

620
00:36:39,440 --> 00:36:42,640
read a string

621
00:36:43,200 --> 00:36:50,480
so for example if a dfa

622
00:36:47,119 --> 00:36:53,599
has a transition function delta and

623
00:36:50,480 --> 00:36:54,240
you want to know that the dfa starts

624
00:36:53,599 --> 00:36:56,960
from

625
00:36:54,240 --> 00:36:56,960
q0

626
00:36:58,320 --> 00:37:06,240
after it reads 0 1 1

627
00:37:02,800 --> 00:37:09,599
0 1 where it goes

628
00:37:06,240 --> 00:37:11,200
how to express that so we use the

629
00:37:09,599 --> 00:37:13,359
transition from extended transition

630
00:37:11,200 --> 00:37:18,079
function here we say that

631
00:37:13,359 --> 00:37:22,400
okay we use this notation

632
00:37:18,079 --> 00:37:25,440
to express that okay

633
00:37:22,400 --> 00:37:26,000
so according to the definition here what

634
00:37:25,440 --> 00:37:29,760
will

635
00:37:26,000 --> 00:37:33,680
what will it be it will become

636
00:37:29,760 --> 00:37:37,839
delta delta head

637
00:37:33,680 --> 00:37:37,839
right q0

638
00:37:39,280 --> 00:37:46,320
q 0 0 1 1 0

639
00:37:42,960 --> 00:37:49,520
and 1 right

640
00:37:46,320 --> 00:37:52,640
the final one x and

641
00:37:49,520 --> 00:37:56,160
a in here

642
00:37:52,640 --> 00:37:59,280
then again

643
00:37:56,160 --> 00:38:03,599
delta delta hat

644
00:37:59,280 --> 00:38:08,560
q 0 0 1 1

645
00:38:03,599 --> 00:38:08,560
the last one previous string

646
00:38:08,880 --> 00:38:15,920
zero one right

647
00:38:12,800 --> 00:38:21,440
then delta

648
00:38:15,920 --> 00:38:24,640
delta delta delta hat

649
00:38:21,440 --> 00:38:29,119
q 0 0 1

650
00:38:24,640 --> 00:38:33,040
okay 1 sorry

651
00:38:29,119 --> 00:38:37,280
0 1.

652
00:38:33,040 --> 00:38:37,280
do that again you get

653
00:38:43,119 --> 00:38:49,599
q 0

654
00:38:46,400 --> 00:38:53,839
zero one

655
00:38:49,599 --> 00:38:57,680
one zero one

656
00:38:53,839 --> 00:39:01,440
okay so you can see that we do that

657
00:38:57,680 --> 00:39:04,720
once more we get

658
00:39:01,440 --> 00:39:08,720
q0 absolute

659
00:39:04,720 --> 00:39:12,400
right then 0 1

660
00:39:08,720 --> 00:39:12,400
1 0

661
00:39:12,839 --> 00:39:15,839
1.

662
00:39:16,960 --> 00:39:20,240
and what do we have here

663
00:39:21,280 --> 00:39:29,920
it will be the

664
00:39:25,119 --> 00:39:33,200
state right so that will be q0

665
00:39:29,920 --> 00:39:34,800
so you see we use this notation to

666
00:39:33,200 --> 00:39:38,720
represent

667
00:39:34,800 --> 00:39:43,040
what will this dfa start from q0

668
00:39:38,720 --> 00:39:46,320
read 0 1 1

669
00:39:43,040 --> 00:39:48,640
0 1 goes 2.

670
00:39:46,320 --> 00:39:50,079
so that's only a syntax trigger to

671
00:39:48,640 --> 00:39:53,280
express this

672
00:39:50,079 --> 00:39:56,320
okay so

673
00:39:53,280 --> 00:39:58,560
we also define the same

674
00:39:56,320 --> 00:39:59,359
extended transition function for a net

675
00:39:58,560 --> 00:40:02,480
phase

676
00:39:59,359 --> 00:40:04,720
transition function in the same way

677
00:40:02,480 --> 00:40:04,720
so

678
00:40:05,839 --> 00:40:13,119
if nothing here we have

679
00:40:09,599 --> 00:40:15,680
the set of this state only

680
00:40:13,119 --> 00:40:16,319
if there is something here then we

681
00:40:15,680 --> 00:40:19,520
separate

682
00:40:16,319 --> 00:40:23,440
the last symbol

683
00:40:19,520 --> 00:40:27,520
and this part

684
00:40:23,440 --> 00:40:29,280
goes to extend the transition function

685
00:40:27,520 --> 00:40:30,800
and since extended transition function

686
00:40:29,280 --> 00:40:34,160
will be a set

687
00:40:30,800 --> 00:40:38,240
of states so for every state

688
00:40:34,160 --> 00:40:40,640
in the set we do the original transition

689
00:40:38,240 --> 00:40:40,640
function

690
00:40:42,400 --> 00:40:50,240
so that means if you have

691
00:40:46,160 --> 00:40:53,680
if you start from some set the extra

692
00:40:50,240 --> 00:40:59,440
extended transition function

693
00:40:53,680 --> 00:41:03,920
will represent after processing a string

694
00:40:59,440 --> 00:41:06,880
what states will have process on

695
00:41:03,920 --> 00:41:10,000
the same concept as the dfa extension

696
00:41:06,880 --> 00:41:14,079
extended transition function

697
00:41:10,000 --> 00:41:21,839
so if you have no problem with this then

698
00:41:14,079 --> 00:41:21,839
we can prove that firstly

699
00:41:22,000 --> 00:41:31,839
from the original nfa

700
00:41:27,040 --> 00:41:35,040
start from the start state

701
00:41:31,839 --> 00:41:38,480
for every string

702
00:41:35,040 --> 00:41:44,800
the result will

703
00:41:38,480 --> 00:41:48,079
be the same as our constructed dfa

704
00:41:44,800 --> 00:41:51,599
and how do we process every possible

705
00:41:48,079 --> 00:41:54,640
strings we do a induction

706
00:41:51,599 --> 00:41:58,079
on the length of string

707
00:41:54,640 --> 00:42:02,160
so the basis will be empty string

708
00:41:58,079 --> 00:42:04,720
of which the length is zero okay

709
00:42:02,160 --> 00:42:08,160
so according to our construction

710
00:42:04,720 --> 00:42:08,160
according to our construction

711
00:42:08,400 --> 00:42:14,480
the extended transition function of

712
00:42:11,440 --> 00:42:17,760
the dfa will be this

713
00:42:14,480 --> 00:42:19,200
right because it's epsom and this one by

714
00:42:17,760 --> 00:42:22,640
our code

715
00:42:19,200 --> 00:42:27,200
our construction it is

716
00:42:22,640 --> 00:42:31,599
exactly q0 and

717
00:42:27,200 --> 00:42:35,760
a set contains only q0 and the list

718
00:42:31,599 --> 00:42:38,880
exactly is the nfs

719
00:42:35,760 --> 00:42:42,720
extended transition function so

720
00:42:38,880 --> 00:42:45,200
we have a basis then we make a

721
00:42:42,720 --> 00:42:46,480
make an assumption on the for the

722
00:42:45,200 --> 00:42:49,920
induction step

723
00:42:46,480 --> 00:42:55,040
we assume that for

724
00:42:49,920 --> 00:42:55,040
string for string of length n

725
00:42:55,440 --> 00:43:02,960
they are identical

726
00:42:59,680 --> 00:43:06,880
it's enough it's an assumption okay

727
00:43:02,960 --> 00:43:09,839
then we look at one more

728
00:43:06,880 --> 00:43:11,359
symbol the string with one more symbol

729
00:43:09,839 --> 00:43:15,520
that will be

730
00:43:11,359 --> 00:43:19,760
one string attach a symbol right

731
00:43:15,520 --> 00:43:23,599
we want to prove they are the same

732
00:43:19,760 --> 00:43:26,160
okay so this one is assumption

733
00:43:23,599 --> 00:43:27,599
we want to prove this one based on that

734
00:43:26,160 --> 00:43:31,920
assumption

735
00:43:27,599 --> 00:43:36,240
and how do we prove that kind of

736
00:43:31,920 --> 00:43:40,400
easy so left hand side we

737
00:43:36,240 --> 00:43:44,319
copy it here then

738
00:43:40,400 --> 00:43:48,079
we look up how dfa

739
00:43:44,319 --> 00:43:52,079
how dfs extended transition function

740
00:43:48,079 --> 00:43:52,079
defined so

741
00:43:52,880 --> 00:43:55,839
sorry

742
00:43:56,400 --> 00:44:00,480
you can go back to

743
00:44:00,800 --> 00:44:10,319
copy this part back to that part

744
00:44:05,440 --> 00:44:14,000
so we separate this one x a

745
00:44:10,319 --> 00:44:19,200
so a here x here right

746
00:44:14,000 --> 00:44:19,200
so that will be the delta

747
00:44:20,160 --> 00:44:28,720
uh dfs extension transition function

748
00:44:24,960 --> 00:44:31,599
this one copy here and the x

749
00:44:28,720 --> 00:44:32,720
here goes back to extended transitioning

750
00:44:31,599 --> 00:44:37,040
function

751
00:44:32,720 --> 00:44:40,640
and the last symbol we look up

752
00:44:37,040 --> 00:44:40,640
look up the original

753
00:44:41,119 --> 00:44:45,599
transition function then

754
00:44:45,760 --> 00:44:53,760
this part is our

755
00:44:50,240 --> 00:44:56,150
hypothesis right so we can

756
00:44:53,760 --> 00:44:57,599
simply replace this one

757
00:44:56,150 --> 00:45:00,960
[Music]

758
00:44:57,599 --> 00:45:04,319
with this one so that makes

759
00:45:00,960 --> 00:45:08,319
this one okay

760
00:45:04,319 --> 00:45:08,319
so we have this one

761
00:45:09,440 --> 00:45:13,599
then according to

762
00:45:17,520 --> 00:45:26,000
according to how we construct

763
00:45:22,079 --> 00:45:30,000
m's delta where is this

764
00:45:26,000 --> 00:45:30,000
this is here

765
00:45:30,400 --> 00:45:36,800
this is here

766
00:45:33,599 --> 00:45:40,640
according to the way we construct

767
00:45:36,800 --> 00:45:45,359
the dfa transition function we can

768
00:45:40,640 --> 00:45:48,880
expand to remember that the delta here

769
00:45:45,359 --> 00:45:49,440
is delta n there and the delta prime

770
00:45:48,880 --> 00:45:52,800
here

771
00:45:49,440 --> 00:45:55,119
is delta m

772
00:45:52,800 --> 00:45:55,119
sorry

773
00:45:55,839 --> 00:46:02,480
delta m there okay

774
00:46:00,160 --> 00:46:02,480
so

775
00:46:08,400 --> 00:46:19,040
delta m is the delta prime there

776
00:46:14,640 --> 00:46:21,440
and we just need to copy this part

777
00:46:19,040 --> 00:46:21,440
here

778
00:46:22,079 --> 00:46:24,720
and then

779
00:46:26,000 --> 00:46:30,000
look up this part

780
00:46:30,319 --> 00:46:35,599
there so for every p within

781
00:46:36,400 --> 00:46:44,000
this part we look up

782
00:46:40,400 --> 00:46:47,920
the original anaphase delta function

783
00:46:44,000 --> 00:46:50,079
transition function with the same symbol

784
00:46:47,920 --> 00:46:51,920
then if you have no problem with this

785
00:46:50,079 --> 00:46:55,440
step

786
00:46:51,920 --> 00:46:59,280
this one is exactly

787
00:46:55,440 --> 00:47:02,800
an ffs extended transition function

788
00:46:59,280 --> 00:47:05,359
like we defined on this page so we

789
00:47:02,800 --> 00:47:07,200
write from this direction back to this

790
00:47:05,359 --> 00:47:11,760
direction

791
00:47:07,200 --> 00:47:15,520
okay so

792
00:47:11,760 --> 00:47:19,119
we now prove that by the

793
00:47:15,520 --> 00:47:20,079
by induction we prove that for every

794
00:47:19,119 --> 00:47:23,280
length

795
00:47:20,079 --> 00:47:26,800
of the string we know that

796
00:47:23,280 --> 00:47:30,160
the result of our constructed

797
00:47:26,800 --> 00:47:31,119
dfa will be exactly the same as the

798
00:47:30,160 --> 00:47:34,880
result

799
00:47:31,119 --> 00:47:34,880
of the original nfa

800
00:47:37,119 --> 00:47:42,160
based on the result we can further prove

801
00:47:40,880 --> 00:47:46,319
that

802
00:47:42,160 --> 00:47:49,599
the language of the original nfa

803
00:47:46,319 --> 00:47:53,839
is exactly the language of

804
00:47:49,599 --> 00:47:53,839
our constructed dfa

805
00:47:54,079 --> 00:48:03,119
okay so the definition

806
00:47:59,760 --> 00:48:07,280
of the language of the

807
00:48:03,119 --> 00:48:12,000
original nfa is that

808
00:48:07,280 --> 00:48:12,000
every string start from

809
00:48:12,720 --> 00:48:21,760
the start state and

810
00:48:16,000 --> 00:48:25,520
after processing the string right

811
00:48:21,760 --> 00:48:25,520
there will be some state

812
00:48:26,319 --> 00:48:33,599
has the process will go stop

813
00:48:29,839 --> 00:48:37,520
and will stop on some state

814
00:48:33,599 --> 00:48:40,640
as long as one of the states

815
00:48:37,520 --> 00:48:44,640
is the member of

816
00:48:40,640 --> 00:48:47,760
the defined accept state

817
00:48:44,640 --> 00:48:49,520
that's why we use intersection with

818
00:48:47,760 --> 00:48:53,040
acceptance

819
00:48:49,520 --> 00:48:57,440
non-empty then that will be

820
00:48:53,040 --> 00:49:00,079
the string will be in the language right

821
00:48:57,440 --> 00:49:00,880
so that's the definition of the origin

822
00:49:00,079 --> 00:49:04,480
uh

823
00:49:00,880 --> 00:49:05,760
language of the original nfa we already

824
00:49:04,480 --> 00:49:09,040
proved that

825
00:49:05,760 --> 00:49:12,720
this thing

826
00:49:09,040 --> 00:49:18,160
is this right

827
00:49:12,720 --> 00:49:22,079
that's what we proved in the last slide

828
00:49:18,160 --> 00:49:25,760
then we rewrite

829
00:49:22,079 --> 00:49:29,760
this part to this part

830
00:49:25,760 --> 00:49:33,520
why can we do that because because

831
00:49:29,760 --> 00:49:36,640
the definition of f1 prime

832
00:49:33,520 --> 00:49:36,640
is exactly

833
00:49:38,559 --> 00:49:47,599
our dfa state

834
00:49:42,880 --> 00:49:51,599
has intersection with the accept states

835
00:49:47,599 --> 00:49:54,160
well in f prime right so

836
00:49:51,599 --> 00:49:54,160
that will be

837
00:49:55,440 --> 00:49:59,839
this step

838
00:50:00,559 --> 00:50:09,040
because any every one state

839
00:50:05,359 --> 00:50:13,920
of the dfa represents a set

840
00:50:09,040 --> 00:50:17,520
of nfa as long as it contains

841
00:50:13,920 --> 00:50:20,880
an accept state of n that means

842
00:50:17,520 --> 00:50:20,880
r as

843
00:50:20,960 --> 00:50:28,480
a set of the anaphase state

844
00:50:24,400 --> 00:50:28,480
intersection with f

845
00:50:28,720 --> 00:50:35,280
noun empty

846
00:50:32,160 --> 00:50:38,839
right then this one

847
00:50:35,280 --> 00:50:41,839
will be in the f prime

848
00:50:38,839 --> 00:50:41,839
so

849
00:50:45,359 --> 00:50:53,680
the this is one dfa

850
00:50:49,359 --> 00:50:58,319
state and represents

851
00:50:53,680 --> 00:51:02,480
a set of nfa state

852
00:50:58,319 --> 00:51:05,520
intersection with accept state

853
00:51:02,480 --> 00:51:09,200
non-zero sorry now empty

854
00:51:05,520 --> 00:51:13,520
if it happens then

855
00:51:09,200 --> 00:51:17,280
these states must be in our

856
00:51:13,520 --> 00:51:20,480
final state for the dfa and

857
00:51:17,280 --> 00:51:23,760
we know that this

858
00:51:20,480 --> 00:51:28,000
is exactly

859
00:51:23,760 --> 00:51:31,040
the language of the dfa so

860
00:51:28,000 --> 00:51:34,839
we know it's the language of

861
00:51:31,040 --> 00:51:37,359
m so we prove that l of

862
00:51:34,839 --> 00:51:40,559
n is l of

863
00:51:37,359 --> 00:51:44,800
n okay

864
00:51:40,559 --> 00:51:44,800
so that means that means

865
00:51:48,839 --> 00:51:54,800
after

866
00:51:51,040 --> 00:51:58,079
go through the procedure here

867
00:51:54,800 --> 00:52:02,319
to construct and do a dfa

868
00:51:58,079 --> 00:52:05,920
according to the given nfa

869
00:52:02,319 --> 00:52:09,119
the language recognized by the

870
00:52:05,920 --> 00:52:12,400
constructed nf dfa

871
00:52:09,119 --> 00:52:15,760
is equal to

872
00:52:12,400 --> 00:52:19,520
that of the nfa okay

873
00:52:15,760 --> 00:52:19,839
so we prove that of course we consider

874
00:52:19,520 --> 00:52:23,200
no

875
00:52:19,839 --> 00:52:28,319
epsilon errors first here and

876
00:52:23,200 --> 00:52:28,319
you can have that later so

877
00:52:29,920 --> 00:52:37,520
we proved that

878
00:52:33,440 --> 00:52:42,880
every nfa has an equivalent dfa

879
00:52:37,520 --> 00:52:42,880
we also know that every dfa

880
00:52:43,200 --> 00:52:50,160
has an equivalent nfa right

881
00:52:46,640 --> 00:52:53,760
that means they are equivalent

882
00:52:50,160 --> 00:52:56,960
that means the definition or

883
00:52:53,760 --> 00:52:57,920
of our regular language the definition

884
00:52:56,960 --> 00:53:02,079
of the term

885
00:52:57,920 --> 00:53:04,240
regular language is defined on dfa

886
00:53:02,079 --> 00:53:05,200
now we know nfa and the dfa are

887
00:53:04,240 --> 00:53:09,280
equivalent

888
00:53:05,200 --> 00:53:12,880
so we can extend the definition to

889
00:53:09,280 --> 00:53:12,880
a language is regular

890
00:53:12,960 --> 00:53:17,920
if and only if noun determines the

891
00:53:16,800 --> 00:53:21,119
finite automaton

892
00:53:17,920 --> 00:53:25,440
recognize it why can we do that

893
00:53:21,119 --> 00:53:28,960
because any nfa

894
00:53:25,440 --> 00:53:30,000
recognizes some language right you can

895
00:53:28,960 --> 00:53:33,440
find

896
00:53:30,000 --> 00:53:38,400
a dfa recognize that language

897
00:53:33,440 --> 00:53:38,400
so that language is regular

898
00:53:39,760 --> 00:53:48,000
okay so that's it for equivalence

899
00:53:42,880 --> 00:53:48,000
of another and dfas and now we know that

900
00:53:48,400 --> 00:53:52,880
you can use nfa or dfa

901
00:53:53,119 --> 00:53:56,800
to handle regular language a language

902
00:53:56,079 --> 00:53:59,839
can

903
00:53:56,800 --> 00:54:03,839
be recognized by a dfa it must be

904
00:53:59,839 --> 00:54:06,960
recognized by nfa and vice versa

905
00:54:03,839 --> 00:54:12,079
so now we can use us from now on

906
00:54:06,960 --> 00:54:12,079
we can use nfa for the proof

907
00:54:12,319 --> 00:54:16,960
of properties of regular languages

908
00:54:18,839 --> 00:54:21,839
okay

