1
00:00:03,760 --> 00:00:09,280
now let's uh

2
00:00:06,720 --> 00:00:13,599
take a look at some examples

3
00:00:09,280 --> 00:00:14,639
of problems in class mp okay

4
00:00:13,599 --> 00:00:17,920
so the

5
00:00:14,639 --> 00:00:19,039
first examples we want to introduce is

6
00:00:17,920 --> 00:00:20,080
called

7
00:00:19,039 --> 00:00:23,600
click

8
00:00:20,080 --> 00:00:26,400
okay so what is the problem click

9
00:00:23,600 --> 00:00:27,840
uh the problem of collecting is that

10
00:00:26,400 --> 00:00:31,279
given

11
00:00:27,840 --> 00:00:33,120
an undirected graph okay given an

12
00:00:31,279 --> 00:00:34,880
undirected graph

13
00:00:33,120 --> 00:00:36,880
and

14
00:00:34,880 --> 00:00:38,320
specify

15
00:00:36,880 --> 00:00:40,800
an integer

16
00:00:38,320 --> 00:00:42,719
of course positive integer

17
00:00:40,800 --> 00:00:46,719
integer k

18
00:00:42,719 --> 00:00:49,520
if the undirected graph

19
00:00:46,719 --> 00:00:51,520
has a k click

20
00:00:49,520 --> 00:00:55,199
then we say that

21
00:00:51,520 --> 00:00:56,160
the input string is in the language

22
00:00:55,199 --> 00:00:57,360
okay

23
00:00:56,160 --> 00:00:58,480
for example

24
00:00:57,360 --> 00:01:00,640
if the graph

25
00:00:58,480 --> 00:01:02,079
we are given is

26
00:01:00,640 --> 00:01:04,720
like

27
00:01:02,079 --> 00:01:05,680
like this one okay

28
00:01:04,720 --> 00:01:06,720
so

29
00:01:05,680 --> 00:01:10,560
well

30
00:01:06,720 --> 00:01:14,560
if k is one what is one click okay uh

31
00:01:10,560 --> 00:01:18,720
click is basically complete graph okay

32
00:01:14,560 --> 00:01:21,680
so if k is one of course

33
00:01:18,720 --> 00:01:22,720
there is one click right this one is one

34
00:01:21,680 --> 00:01:25,200
one

35
00:01:22,720 --> 00:01:27,280
uh complete graph of one note

36
00:01:25,200 --> 00:01:29,280
and this one is also

37
00:01:27,280 --> 00:01:32,400
a complete graph and this one is also a

38
00:01:29,280 --> 00:01:35,680
complicated well it's a trivial uh

39
00:01:32,400 --> 00:01:38,000
trivial quite a trivial question right

40
00:01:35,680 --> 00:01:38,960
and then if k is two

41
00:01:38,000 --> 00:01:42,079
then

42
00:01:38,960 --> 00:01:44,240
this part is a two click and this part

43
00:01:42,079 --> 00:01:45,600
is also a two click

44
00:01:44,240 --> 00:01:47,920
right

45
00:01:45,600 --> 00:01:48,720
then what about

46
00:01:47,920 --> 00:01:50,399
k

47
00:01:48,720 --> 00:01:52,960
is three

48
00:01:50,399 --> 00:01:56,399
okay if in this case case three

49
00:01:52,960 --> 00:01:58,320
then this graph has no

50
00:01:56,399 --> 00:01:59,600
three click

51
00:01:58,320 --> 00:02:01,840
right this

52
00:01:59,600 --> 00:02:03,280
this one has no three click

53
00:02:01,840 --> 00:02:04,640
so

54
00:02:03,280 --> 00:02:06,399
this graph

55
00:02:04,640 --> 00:02:08,560
three

56
00:02:06,399 --> 00:02:10,080
is not

57
00:02:08,560 --> 00:02:12,800
in click

58
00:02:10,080 --> 00:02:15,760
it's not included okay

59
00:02:12,800 --> 00:02:18,879
for another example here if we have like

60
00:02:15,760 --> 00:02:18,879
graph like this one

61
00:02:19,280 --> 00:02:20,800
okay

62
00:02:20,080 --> 00:02:23,599
so

63
00:02:20,800 --> 00:02:25,920
of course one click to click no problem

64
00:02:23,599 --> 00:02:27,440
is there any three click yes there are

65
00:02:25,920 --> 00:02:31,599
about i don't know

66
00:02:27,440 --> 00:02:32,720
one two three four five there are five

67
00:02:31,599 --> 00:02:34,319
three

68
00:02:32,720 --> 00:02:36,400
so of course if

69
00:02:34,319 --> 00:02:38,800
this graph with three

70
00:02:36,400 --> 00:02:40,640
then it's in click

71
00:02:38,800 --> 00:02:42,400
in this language

72
00:02:40,640 --> 00:02:44,879
and how about four

73
00:02:42,400 --> 00:02:45,760
actually there is a full click here

74
00:02:44,879 --> 00:02:48,720
right

75
00:02:45,760 --> 00:02:51,280
since four click is like this one

76
00:02:48,720 --> 00:02:52,560
so this graph

77
00:02:51,280 --> 00:02:55,120
four

78
00:02:52,560 --> 00:02:57,840
also in click

79
00:02:55,120 --> 00:02:59,120
but if k is five then it's not right

80
00:02:57,840 --> 00:03:01,040
there is no

81
00:02:59,120 --> 00:03:03,440
five notes

82
00:03:01,040 --> 00:03:06,560
as a complete square

83
00:03:03,440 --> 00:03:09,040
okay so click is that your problem given

84
00:03:06,560 --> 00:03:11,440
an undirected graph and

85
00:03:09,040 --> 00:03:12,800
uh specified

86
00:03:11,440 --> 00:03:14,400
um

87
00:03:12,800 --> 00:03:17,760
a positive integer

88
00:03:14,400 --> 00:03:20,000
is there a k click within the given

89
00:03:17,760 --> 00:03:22,319
underrated graph g

90
00:03:20,000 --> 00:03:22,319
okay

91
00:03:23,599 --> 00:03:28,799
and firstly can you write a decider for

92
00:03:25,920 --> 00:03:31,440
that if no concern of running time of

93
00:03:28,799 --> 00:03:34,560
course you can right you can try

94
00:03:31,440 --> 00:03:38,480
let's say if the graph here

95
00:03:34,560 --> 00:03:42,480
g is vertex and h right

96
00:03:38,480 --> 00:03:44,000
you can try all possible

97
00:03:42,480 --> 00:03:45,519
set

98
00:03:44,000 --> 00:03:46,959
on the graph

99
00:03:45,519 --> 00:03:48,400
and

100
00:03:46,959 --> 00:03:52,239
if

101
00:03:48,400 --> 00:03:54,319
any one of the combination is a complete

102
00:03:52,239 --> 00:03:56,640
is a complete graph

103
00:03:54,319 --> 00:03:56,640
then

104
00:03:58,480 --> 00:04:02,000
the input string

105
00:04:00,720 --> 00:04:04,480
is

106
00:04:02,000 --> 00:04:04,480
in click

107
00:04:04,720 --> 00:04:10,640
okay so there's no problem to solve this

108
00:04:07,760 --> 00:04:14,400
uh well for computability there's no

109
00:04:10,640 --> 00:04:16,560
problem now we are talking about

110
00:04:14,400 --> 00:04:17,519
click is in mp

111
00:04:16,560 --> 00:04:18,320
right

112
00:04:17,519 --> 00:04:22,160
and

113
00:04:18,320 --> 00:04:23,520
to prove that click is mp firstly we can

114
00:04:22,160 --> 00:04:26,960
follow our

115
00:04:23,520 --> 00:04:30,320
well as i called new

116
00:04:26,960 --> 00:04:33,040
new deformation okay that is if we can

117
00:04:30,320 --> 00:04:35,040
find a polynomial time verifier for

118
00:04:33,040 --> 00:04:37,280
click then

119
00:04:35,040 --> 00:04:38,080
uh click is in mp

120
00:04:37,280 --> 00:04:39,440
okay

121
00:04:38,080 --> 00:04:41,120
so

122
00:04:39,440 --> 00:04:43,680
let's construct the polynomial time

123
00:04:41,120 --> 00:04:46,240
verify here and for for

124
00:04:43,680 --> 00:04:48,639
permanent time for verifier we can ask

125
00:04:46,240 --> 00:04:49,919
for extra information right

126
00:04:48,639 --> 00:04:52,880
so

127
00:04:49,919 --> 00:04:55,759
in addition to the

128
00:04:52,880 --> 00:04:59,280
string w here which we want to determine

129
00:04:55,759 --> 00:05:01,360
if it is in click or not

130
00:04:59,280 --> 00:05:03,600
we ask

131
00:05:01,360 --> 00:05:07,120
certificate

132
00:05:03,600 --> 00:05:09,759
and the certificate we ask here

133
00:05:07,120 --> 00:05:11,440
is exactly the k notes

134
00:05:09,759 --> 00:05:12,880
which forms

135
00:05:11,440 --> 00:05:15,919
which forms

136
00:05:12,880 --> 00:05:17,600
the click on the graph on the given

137
00:05:15,919 --> 00:05:19,840
graph okay

138
00:05:17,600 --> 00:05:19,840
so

139
00:05:20,880 --> 00:05:24,080
based on these

140
00:05:22,560 --> 00:05:27,280
criteria

141
00:05:24,080 --> 00:05:28,240
our first step is to test

142
00:05:27,280 --> 00:05:29,680
whether

143
00:05:28,240 --> 00:05:34,000
c

144
00:05:29,680 --> 00:05:36,080
is a set of k nodes in g

145
00:05:34,000 --> 00:05:38,800
so how the test can be done

146
00:05:36,080 --> 00:05:42,320
you just need to go through

147
00:05:38,800 --> 00:05:43,680
the node specify in c right and the

148
00:05:42,320 --> 00:05:45,759
check

149
00:05:43,680 --> 00:05:48,880
okay note

150
00:05:45,759 --> 00:05:53,199
if the amount is correct right k notes

151
00:05:48,880 --> 00:05:54,240
if it is then you check if the first one

152
00:05:53,199 --> 00:05:56,479
in g

153
00:05:54,240 --> 00:05:58,720
second one in g

154
00:05:56,479 --> 00:06:02,479
third one g etc

155
00:05:58,720 --> 00:06:05,199
and there is no duplicate within

156
00:06:02,479 --> 00:06:07,759
the node specified in c

157
00:06:05,199 --> 00:06:09,840
okay let's do this test first

158
00:06:07,759 --> 00:06:13,520
and how much time you need to do the

159
00:06:09,840 --> 00:06:16,319
test uh to do to finish the test

160
00:06:13,520 --> 00:06:20,240
it must be well within the polynomial

161
00:06:16,319 --> 00:06:23,759
bound of the length of g

162
00:06:20,240 --> 00:06:26,960
right you just need to

163
00:06:23,759 --> 00:06:28,240
since there is only k at most k

164
00:06:26,960 --> 00:06:30,639
nodes here

165
00:06:28,240 --> 00:06:32,400
if it's more than k you can know that

166
00:06:30,639 --> 00:06:34,080
it's a wrong certificate you just need

167
00:06:32,400 --> 00:06:36,160
to reject it so you don't need to

168
00:06:34,080 --> 00:06:37,199
process further right

169
00:06:36,160 --> 00:06:39,520
then

170
00:06:37,199 --> 00:06:42,160
at most k note here

171
00:06:39,520 --> 00:06:47,280
and you just need to go back

172
00:06:42,160 --> 00:06:48,400
go forward on the tape and how long is

173
00:06:47,280 --> 00:06:49,840
the length here

174
00:06:48,400 --> 00:06:52,000
it's about

175
00:06:49,840 --> 00:06:53,120
the length of input length so there's no

176
00:06:52,000 --> 00:06:56,319
problem

177
00:06:53,120 --> 00:06:58,800
so you will be able to do the check

178
00:06:56,319 --> 00:07:00,000
within polynomial time of the length of

179
00:06:58,800 --> 00:07:01,520
g

180
00:07:00,000 --> 00:07:04,560
actually input string

181
00:07:01,520 --> 00:07:05,599
right it's g and the k

182
00:07:04,560 --> 00:07:07,919
then

183
00:07:05,599 --> 00:07:11,680
if certificate c

184
00:07:07,919 --> 00:07:13,039
contains actually k nodes in g

185
00:07:11,680 --> 00:07:14,240
then we check

186
00:07:13,039 --> 00:07:17,440
if

187
00:07:14,240 --> 00:07:21,120
the k nodes specified in c

188
00:07:17,440 --> 00:07:22,000
according to g's h

189
00:07:21,120 --> 00:07:23,759
g

190
00:07:22,000 --> 00:07:28,319
is v

191
00:07:23,759 --> 00:07:31,039
e right you check you check the e so

192
00:07:28,319 --> 00:07:34,080
for k note specified in c

193
00:07:31,039 --> 00:07:36,479
we check if this node connects to this

194
00:07:34,080 --> 00:07:38,479
node by using e

195
00:07:36,479 --> 00:07:41,520
and check

196
00:07:38,479 --> 00:07:47,280
one two three to k right check one two

197
00:07:41,520 --> 00:07:50,160
connect it one three 1 4 etc then 2 3

198
00:07:47,280 --> 00:07:53,280
2 4 etc then 3

199
00:07:50,160 --> 00:07:56,080
4 3 5 etc

200
00:07:53,280 --> 00:07:58,560
of course you need about k square to do

201
00:07:56,080 --> 00:08:01,440
that right but k

202
00:07:58,560 --> 00:08:03,280
is well within the whole string the

203
00:08:01,440 --> 00:08:05,120
polynomial bound of the whole input

204
00:08:03,280 --> 00:08:06,879
string so there's no problem

205
00:08:05,120 --> 00:08:08,560
so we test the g

206
00:08:06,879 --> 00:08:11,120
contains all

207
00:08:08,560 --> 00:08:12,879
edges connecting all the nodes

208
00:08:11,120 --> 00:08:14,800
in c

209
00:08:12,879 --> 00:08:16,400
if

210
00:08:14,800 --> 00:08:18,560
both

211
00:08:16,400 --> 00:08:19,840
steps

212
00:08:18,560 --> 00:08:21,440
are okay

213
00:08:19,840 --> 00:08:24,400
of course then

214
00:08:21,440 --> 00:08:27,039
the k nodes specified by the certificate

215
00:08:24,400 --> 00:08:29,199
is really the k click on

216
00:08:27,039 --> 00:08:30,479
the undirected graph g

217
00:08:29,199 --> 00:08:31,919
so accept

218
00:08:30,479 --> 00:08:33,519
otherwise

219
00:08:31,919 --> 00:08:35,440
any

220
00:08:33,519 --> 00:08:38,880
thing goes wrong

221
00:08:35,440 --> 00:08:40,479
anything goes wrong then we just reject

222
00:08:38,880 --> 00:08:43,680
so that's our

223
00:08:40,479 --> 00:08:44,959
verifier and as we described it the

224
00:08:43,680 --> 00:08:47,200
verifier

225
00:08:44,959 --> 00:08:49,920
must be

226
00:08:47,200 --> 00:08:49,920
finished up

227
00:08:51,440 --> 00:08:56,480
must

228
00:08:53,040 --> 00:08:56,480
well finish its uh

229
00:08:56,560 --> 00:09:00,160
execution within the polynomial time

230
00:08:59,279 --> 00:09:01,040
bound

231
00:09:00,160 --> 00:09:02,320
okay

232
00:09:01,040 --> 00:09:04,080
because the whole thing is

233
00:09:02,320 --> 00:09:06,880
straightforward and

234
00:09:04,080 --> 00:09:10,880
you you can actually calculate how many

235
00:09:06,880 --> 00:09:12,880
uh well approximately how many times you

236
00:09:10,880 --> 00:09:15,760
how many times how much time sorry how

237
00:09:12,880 --> 00:09:17,440
much time you need to finish the job

238
00:09:15,760 --> 00:09:19,120
okay

239
00:09:17,440 --> 00:09:21,120
and

240
00:09:19,120 --> 00:09:24,560
alternative proof

241
00:09:21,120 --> 00:09:28,240
that is we use the old definition

242
00:09:24,560 --> 00:09:29,839
we construct we can try to construct a

243
00:09:28,240 --> 00:09:31,600
non-deterministic

244
00:09:29,839 --> 00:09:33,279
turing machine running in polynomial

245
00:09:31,600 --> 00:09:36,399
time

246
00:09:33,279 --> 00:09:37,839
to decide click

247
00:09:36,399 --> 00:09:40,800
so for this

248
00:09:37,839 --> 00:09:43,839
decider of course decider don't need

249
00:09:40,800 --> 00:09:44,959
extra information don't need certificate

250
00:09:43,839 --> 00:09:47,760
and

251
00:09:44,959 --> 00:09:49,680
if you want to uh

252
00:09:47,760 --> 00:09:51,519
design a point uh

253
00:09:49,680 --> 00:09:55,519
if you want to design

254
00:09:51,519 --> 00:09:57,600
a polynomial time decider for click how

255
00:09:55,519 --> 00:10:00,320
how will you do it

256
00:09:57,600 --> 00:10:02,800
it's pretty straightforward that

257
00:10:00,320 --> 00:10:05,440
from the starting configuration you get

258
00:10:02,800 --> 00:10:06,560
g k

259
00:10:05,440 --> 00:10:10,560
right

260
00:10:06,560 --> 00:10:12,079
then for each branch

261
00:10:10,560 --> 00:10:15,760
for each branch

262
00:10:12,079 --> 00:10:17,680
you get a combination

263
00:10:15,760 --> 00:10:18,640
of k notes

264
00:10:17,680 --> 00:10:21,680
so

265
00:10:18,640 --> 00:10:21,680
we can fork

266
00:10:22,320 --> 00:10:26,320
so many

267
00:10:24,480 --> 00:10:29,519
branches

268
00:10:26,320 --> 00:10:29,519
and each one

269
00:10:29,839 --> 00:10:33,519
is

270
00:10:31,279 --> 00:10:37,839
a k note set

271
00:10:33,519 --> 00:10:37,839
then we verify if the k note

272
00:10:38,000 --> 00:10:42,959
is a click on the graph

273
00:10:41,839 --> 00:10:46,560
okay

274
00:10:42,959 --> 00:10:48,880
so if any one of the branch

275
00:10:46,560 --> 00:10:52,560
checks out okay

276
00:10:48,880 --> 00:10:54,880
for example this one okay then

277
00:10:52,560 --> 00:10:56,079
the string is in click

278
00:10:54,880 --> 00:10:58,640
otherwise

279
00:10:56,079 --> 00:10:58,640
if no

280
00:10:59,519 --> 00:11:04,800
except here

281
00:11:00,959 --> 00:11:08,560
none of the cases are accept uh

282
00:11:04,800 --> 00:11:12,800
none of the cases are accepted then

283
00:11:08,560 --> 00:11:13,680
the input string is not in click

284
00:11:12,800 --> 00:11:14,480
okay

285
00:11:13,680 --> 00:11:15,519
so

286
00:11:14,480 --> 00:11:18,160
again

287
00:11:15,519 --> 00:11:19,600
you'll you will find that

288
00:11:18,160 --> 00:11:23,440
the height

289
00:11:19,600 --> 00:11:26,720
how many computational steps the height

290
00:11:23,440 --> 00:11:29,279
is well within polynomial time

291
00:11:26,720 --> 00:11:30,480
although the width

292
00:11:29,279 --> 00:11:34,160
might be

293
00:11:30,480 --> 00:11:36,240
much larger than polynomial okay

294
00:11:34,160 --> 00:11:38,560
so you see

295
00:11:36,240 --> 00:11:40,959
this one is uh

296
00:11:38,560 --> 00:11:43,360
i'm not sure primal or exponential

297
00:11:40,959 --> 00:11:45,839
doesn't matter but we have the

298
00:11:43,360 --> 00:11:47,040
exponential case next one

299
00:11:45,839 --> 00:11:48,480
okay

300
00:11:47,040 --> 00:11:50,880
so

301
00:11:48,480 --> 00:11:53,279
we either construct a problem polynomial

302
00:11:50,880 --> 00:11:56,279
time verifier to prove a language is in

303
00:11:53,279 --> 00:11:56,279
mp

304
00:11:58,399 --> 00:12:02,000
by using a new definition

305
00:12:02,639 --> 00:12:06,880
or

306
00:12:03,440 --> 00:12:10,320
we construct a non-deterministic machine

307
00:12:06,880 --> 00:12:11,839
which can decide that language

308
00:12:10,320 --> 00:12:13,839
in polynomial time

309
00:12:11,839 --> 00:12:17,440
and remember that that polynomial time

310
00:12:13,839 --> 00:12:18,800
is only height of the computational tree

311
00:12:17,440 --> 00:12:20,880
not width

312
00:12:18,800 --> 00:12:22,800
we actually use the property of

313
00:12:20,880 --> 00:12:26,320
non-deterministic computation to guess

314
00:12:22,800 --> 00:12:29,680
all possible solutions and the number

315
00:12:26,320 --> 00:12:31,279
the amount of the all possible solutions

316
00:12:29,680 --> 00:12:32,560
might be

317
00:12:31,279 --> 00:12:34,560
much

318
00:12:32,560 --> 00:12:38,079
more than

319
00:12:34,560 --> 00:12:40,880
you know a polynomial polynomial

320
00:12:38,079 --> 00:12:43,120
bound of the

321
00:12:40,880 --> 00:12:44,880
length of the input string okay that's

322
00:12:43,120 --> 00:12:48,399
the key part

323
00:12:44,880 --> 00:12:50,880
okay then the second uh

324
00:12:48,399 --> 00:12:52,639
example here is

325
00:12:50,880 --> 00:12:54,880
subset stuff

326
00:12:52,639 --> 00:12:57,120
okay what is subsystem

327
00:12:54,880 --> 00:13:00,240
for subset sum

328
00:12:57,120 --> 00:13:02,639
the input is the

329
00:13:00,240 --> 00:13:02,639
is a

330
00:13:03,040 --> 00:13:08,639
multiset okay the important thing is

331
00:13:05,920 --> 00:13:10,240
here is this set is money set not only

332
00:13:08,639 --> 00:13:12,560
set but money set

333
00:13:10,240 --> 00:13:14,800
and what is a multiset in multiset you

334
00:13:12,560 --> 00:13:15,600
can have duplicate members that's it

335
00:13:14,800 --> 00:13:16,720
okay

336
00:13:15,600 --> 00:13:19,440
so

337
00:13:16,720 --> 00:13:20,480
you have a multiset of integers

338
00:13:19,440 --> 00:13:25,279
and

339
00:13:20,480 --> 00:13:25,279
you specified a number as the

340
00:13:25,360 --> 00:13:28,160
as the sum

341
00:13:29,440 --> 00:13:34,959
so if in

342
00:13:31,200 --> 00:13:38,240
the given multiset for example one one

343
00:13:34,959 --> 00:13:40,160
two three four four five

344
00:13:38,240 --> 00:13:41,279
okay that's you know it's an arbitrary

345
00:13:40,160 --> 00:13:44,639
multiset

346
00:13:41,279 --> 00:13:47,120
and then if some of them

347
00:13:44,639 --> 00:13:49,120
if you can get some of them

348
00:13:47,120 --> 00:13:50,880
to sum as

349
00:13:49,120 --> 00:13:52,639
for example 10

350
00:13:50,880 --> 00:13:55,519
okay

351
00:13:52,639 --> 00:13:57,760
then we say that the whole

352
00:13:55,519 --> 00:13:57,760
okay

353
00:13:59,360 --> 00:14:05,360
s and t

354
00:14:01,519 --> 00:14:06,320
the whole input stream is in subset sum

355
00:14:05,360 --> 00:14:08,639
that's it

356
00:14:06,320 --> 00:14:14,079
so you you are given

357
00:14:08,639 --> 00:14:14,079
you are given a multiset of integers and

358
00:14:14,399 --> 00:14:17,680
a sum

359
00:14:15,519 --> 00:14:18,399
a specified sum

360
00:14:17,680 --> 00:14:20,480
and

361
00:14:18,399 --> 00:14:23,120
as long as

362
00:14:20,480 --> 00:14:25,760
from the given body set you can choose

363
00:14:23,120 --> 00:14:27,760
some of them for this example you can

364
00:14:25,760 --> 00:14:28,839
choose

365
00:14:27,760 --> 00:14:32,480
let's say

366
00:14:28,839 --> 00:14:34,160
one four five

367
00:14:32,480 --> 00:14:37,360
okay or

368
00:14:34,160 --> 00:14:40,240
let's say one one three five

369
00:14:37,360 --> 00:14:42,880
so one one three five

370
00:14:40,240 --> 00:14:44,639
you add them together which is exactly

371
00:14:42,880 --> 00:14:45,839
the specified

372
00:14:44,639 --> 00:14:47,360
sum

373
00:14:45,839 --> 00:14:48,880
then

374
00:14:47,360 --> 00:14:51,519
the whole thing

375
00:14:48,880 --> 00:14:54,240
is in subsystem

376
00:14:51,519 --> 00:14:56,839
if you cannot do it for example let's

377
00:14:54,240 --> 00:15:00,560
say t is 100 and it's

378
00:14:56,839 --> 00:15:03,920
impossible it's impossible to have a

379
00:15:00,560 --> 00:15:08,399
even even the whole uh subset uh

380
00:15:03,920 --> 00:15:10,160
multiset add together is not 100 so

381
00:15:08,399 --> 00:15:10,959
the problem instance is not in subset

382
00:15:10,160 --> 00:15:15,040
sum

383
00:15:10,959 --> 00:15:18,720
okay so it's a pretty straightforward

384
00:15:15,040 --> 00:15:21,040
problem you just get some from the given

385
00:15:18,720 --> 00:15:22,399
multiset and to see

386
00:15:21,040 --> 00:15:24,880
if it can

387
00:15:22,399 --> 00:15:28,720
checks out

388
00:15:24,880 --> 00:15:32,639
as the specified thumb

389
00:15:28,720 --> 00:15:34,240
now we want to uh prove that subset sum

390
00:15:32,639 --> 00:15:35,120
is

391
00:15:34,240 --> 00:15:38,959
in

392
00:15:35,120 --> 00:15:41,920
mp the language itself is in mp

393
00:15:38,959 --> 00:15:44,800
okay so again

394
00:15:41,920 --> 00:15:48,160
two possibilities one is

395
00:15:44,800 --> 00:15:50,480
we follow the new definition and

396
00:15:48,160 --> 00:15:52,800
we found a new definition and

397
00:15:50,480 --> 00:15:56,160
uh construct a

398
00:15:52,800 --> 00:15:58,079
polynomial time verifier for subset sum

399
00:15:56,160 --> 00:15:59,360
okay so

400
00:15:58,079 --> 00:16:01,440
for

401
00:15:59,360 --> 00:16:04,720
verifier

402
00:16:01,440 --> 00:16:07,279
we get the input string w and we ask we

403
00:16:04,720 --> 00:16:09,600
can ask

404
00:16:07,279 --> 00:16:14,399
for actual information

405
00:16:09,600 --> 00:16:16,399
and for in this case we ask exactly

406
00:16:14,399 --> 00:16:19,120
what integers

407
00:16:16,399 --> 00:16:23,839
from the subset of the multiset

408
00:16:19,120 --> 00:16:26,560
can be add up to can be added up

409
00:16:23,839 --> 00:16:28,079
as the specified sum

410
00:16:26,560 --> 00:16:31,040
okay

411
00:16:28,079 --> 00:16:32,399
so uh okay so the first step of this one

412
00:16:31,040 --> 00:16:35,440
is

413
00:16:32,399 --> 00:16:38,959
firstly test if c is a collection of

414
00:16:35,440 --> 00:16:40,720
numbers sums to the specified

415
00:16:38,959 --> 00:16:41,519
sum

416
00:16:40,720 --> 00:16:44,560
okay

417
00:16:41,519 --> 00:16:47,360
so for our example one one two three

418
00:16:44,560 --> 00:16:52,480
four four five and ten

419
00:16:47,360 --> 00:16:54,720
if someone gives you one one three five

420
00:16:52,480 --> 00:16:56,320
then you add them up

421
00:16:54,720 --> 00:16:57,360
okay it's ten

422
00:16:56,320 --> 00:17:00,160
so

423
00:16:57,360 --> 00:17:02,800
no problem for the first first step then

424
00:17:00,160 --> 00:17:05,280
you test if

425
00:17:02,800 --> 00:17:08,640
the number three specified in c is

426
00:17:05,280 --> 00:17:09,520
really from s it's really contained uh

427
00:17:08,640 --> 00:17:12,240
or

428
00:17:09,520 --> 00:17:15,839
s contains all numbers in c

429
00:17:12,240 --> 00:17:19,120
so in this case one one three five no

430
00:17:15,839 --> 00:17:21,360
problem okay

431
00:17:19,120 --> 00:17:23,839
for other example let's say someone

432
00:17:21,360 --> 00:17:26,959
gives you 5 5

433
00:17:23,839 --> 00:17:28,319
then add up 10 no problem

434
00:17:26,959 --> 00:17:31,360
but

435
00:17:28,319 --> 00:17:33,679
1 5 is from s but the other 5

436
00:17:31,360 --> 00:17:34,720
you know s has only one five so it

437
00:17:33,679 --> 00:17:38,000
doesn't

438
00:17:34,720 --> 00:17:40,080
it doesn't work so reject

439
00:17:38,000 --> 00:17:41,200
okay so in this case reject

440
00:17:40,080 --> 00:17:42,799
so

441
00:17:41,200 --> 00:17:43,840
you uh

442
00:17:42,799 --> 00:17:45,919
verify

443
00:17:43,840 --> 00:17:49,520
again there is some responsibility of

444
00:17:45,919 --> 00:17:53,360
the verify is that based on correct

445
00:17:49,520 --> 00:17:56,240
certificate it return correct result

446
00:17:53,360 --> 00:17:58,080
well accept that's it

447
00:17:56,240 --> 00:18:00,240
it doesn't need to

448
00:17:58,080 --> 00:18:02,480
take care of the wrong certificate as

449
00:18:00,240 --> 00:18:04,000
long as the certificate is wrong then it

450
00:18:02,480 --> 00:18:06,240
just rejected

451
00:18:04,000 --> 00:18:08,960
okay we reject the input string

452
00:18:06,240 --> 00:18:12,640
so if both pass accepted

453
00:18:08,960 --> 00:18:15,280
otherwise rejected then we have the

454
00:18:12,640 --> 00:18:17,280
polynomial time we have the profile

455
00:18:15,280 --> 00:18:19,200
and since the provider doesn't really

456
00:18:17,280 --> 00:18:22,000
need to you know do a lot of things you

457
00:18:19,200 --> 00:18:23,840
just need to add the integers and check

458
00:18:22,000 --> 00:18:25,840
if they are in the

459
00:18:23,840 --> 00:18:27,360
given multiset so

460
00:18:25,840 --> 00:18:28,960
the whole process

461
00:18:27,360 --> 00:18:31,760
can surely be

462
00:18:28,960 --> 00:18:33,200
finished within the polynomial bound of

463
00:18:31,760 --> 00:18:35,600
the input string

464
00:18:33,200 --> 00:18:37,200
of the length of the industry

465
00:18:35,600 --> 00:18:38,400
right

466
00:18:37,200 --> 00:18:40,840
so

467
00:18:38,400 --> 00:18:44,480
for another

468
00:18:40,840 --> 00:18:45,440
proof again we use a non-deterministic

469
00:18:44,480 --> 00:18:47,919
machine

470
00:18:45,440 --> 00:18:51,520
to construct a divider and for the

471
00:18:47,919 --> 00:18:53,840
non-deterministic machine and firstly

472
00:18:51,520 --> 00:18:54,880
you know you just construct

473
00:18:53,840 --> 00:18:58,880
sorry

474
00:18:54,880 --> 00:19:01,280
you just need to construct all possible

475
00:18:58,880 --> 00:19:03,200
solutions and what is the old possible

476
00:19:01,280 --> 00:19:06,400
solutions in this case

477
00:19:03,200 --> 00:19:09,440
it's probably true to the

478
00:19:06,400 --> 00:19:10,960
community of the muddy set s

479
00:19:09,440 --> 00:19:13,200
right i shouldn't

480
00:19:10,960 --> 00:19:14,640
do that i should say here the same thing

481
00:19:13,200 --> 00:19:16,320
but yeah

482
00:19:14,640 --> 00:19:17,280
so you see

483
00:19:16,320 --> 00:19:21,200
the

484
00:19:17,280 --> 00:19:23,760
width here is obviously exponential

485
00:19:21,200 --> 00:19:25,200
to the length of the

486
00:19:23,760 --> 00:19:27,200
input stream

487
00:19:25,200 --> 00:19:30,880
but you know we don't care about the

488
00:19:27,200 --> 00:19:30,880
width we only care about

489
00:19:31,039 --> 00:19:34,320
the height

490
00:19:32,160 --> 00:19:37,039
so how many steps

491
00:19:34,320 --> 00:19:39,840
you need to construct all possibility

492
00:19:37,039 --> 00:19:42,160
all possible solutions

493
00:19:39,840 --> 00:19:45,039
you just need to

494
00:19:42,160 --> 00:19:49,120
you just need about cardinality of s

495
00:19:45,039 --> 00:19:52,720
right because for all possible subset

496
00:19:49,120 --> 00:19:54,240
for each integer in s

497
00:19:52,720 --> 00:19:56,080
you either

498
00:19:54,240 --> 00:19:57,200
include that integer

499
00:19:56,080 --> 00:19:59,679
or

500
00:19:57,200 --> 00:20:00,480
not include that integer so there are

501
00:19:59,679 --> 00:20:04,159
two

502
00:20:00,480 --> 00:20:05,120
possibilities for each in the integer in

503
00:20:04,159 --> 00:20:07,039
s

504
00:20:05,120 --> 00:20:08,799
so totally you have so many

505
00:20:07,039 --> 00:20:12,080
possibilities but

506
00:20:08,799 --> 00:20:14,320
the steps only about the cardinality of

507
00:20:12,080 --> 00:20:14,320
s

508
00:20:14,480 --> 00:20:18,799
okay

509
00:20:15,440 --> 00:20:22,480
then you just need to you know add up

510
00:20:18,799 --> 00:20:25,200
add up the selected integer to check if

511
00:20:22,480 --> 00:20:28,480
it is t or not

512
00:20:25,200 --> 00:20:29,280
any for any branches

513
00:20:28,480 --> 00:20:31,840
if

514
00:20:29,280 --> 00:20:35,280
the selected integers

515
00:20:31,840 --> 00:20:37,679
the sum of the selected integers

516
00:20:35,280 --> 00:20:39,120
is the specified

517
00:20:37,679 --> 00:20:41,760
t then

518
00:20:39,120 --> 00:20:45,679
accepted right then accept

519
00:20:41,760 --> 00:20:45,679
then as long as one branch

520
00:20:46,080 --> 00:20:50,480
returns accept then the whole machine

521
00:20:48,559 --> 00:20:52,159
accepts the string

522
00:20:50,480 --> 00:20:53,280
well as t

523
00:20:52,159 --> 00:20:54,720
otherwise

524
00:20:53,280 --> 00:20:56,480
if all

525
00:20:54,720 --> 00:20:57,360
branches reject

526
00:20:56,480 --> 00:21:00,240
then

527
00:20:57,360 --> 00:21:03,039
the whole machine rejects its input

528
00:21:00,240 --> 00:21:04,000
is so

529
00:21:03,039 --> 00:21:06,159
uh

530
00:21:04,000 --> 00:21:08,320
it is that straightforward so we just

531
00:21:06,159 --> 00:21:10,320
need to do that and

532
00:21:08,320 --> 00:21:14,080
we can

533
00:21:10,320 --> 00:21:16,400
uh we can construct a non-deterministic

534
00:21:14,080 --> 00:21:19,280
polynomial time verifier

535
00:21:16,400 --> 00:21:20,159
to verify subset sum

536
00:21:19,280 --> 00:21:25,200
okay

537
00:21:20,159 --> 00:21:27,360
so no matter uh we prove it with a new

538
00:21:25,200 --> 00:21:31,360
sorry uh yeah new

539
00:21:27,360 --> 00:21:33,280
definition of cos np or old definition

540
00:21:31,360 --> 00:21:35,200
of class mp

541
00:21:33,280 --> 00:21:37,039
it's question forward

542
00:21:35,200 --> 00:21:39,679
okay

543
00:21:37,039 --> 00:21:44,159
so that's another uh that's another

544
00:21:39,679 --> 00:21:45,520
example of uh problems in class np

545
00:21:44,159 --> 00:21:46,559
okay

546
00:21:45,520 --> 00:21:48,080
and let's

547
00:21:46,559 --> 00:21:50,720
further define

548
00:21:48,080 --> 00:21:52,240
uh some

549
00:21:50,720 --> 00:21:54,880
class actually

550
00:21:52,240 --> 00:21:56,240
so we define co mp

551
00:21:54,880 --> 00:22:00,720
see again

552
00:21:56,240 --> 00:22:00,720
call something right co x

553
00:22:00,960 --> 00:22:07,280
we introduce such notation in like

554
00:22:05,840 --> 00:22:10,799
co

555
00:22:07,280 --> 00:22:13,840
recognize the uh tool recognizable right

556
00:22:10,799 --> 00:22:15,679
what is culturally truly recognizable

557
00:22:13,840 --> 00:22:18,400
if a language

558
00:22:15,679 --> 00:22:21,360
is culture recognizable that means

559
00:22:18,400 --> 00:22:22,720
the complement of that language is too

560
00:22:21,360 --> 00:22:25,679
recognizable

561
00:22:22,720 --> 00:22:27,600
so the same thing here

562
00:22:25,679 --> 00:22:31,440
if a language

563
00:22:27,600 --> 00:22:36,559
is incall mp that means the complement

564
00:22:31,440 --> 00:22:36,559
of that language is in mp

565
00:22:37,840 --> 00:22:40,960
okay

566
00:22:38,720 --> 00:22:43,360
so

567
00:22:40,960 --> 00:22:43,360
click

568
00:22:44,000 --> 00:22:48,080
the complement

569
00:22:46,559 --> 00:22:48,880
of click

570
00:22:48,080 --> 00:22:49,760
is

571
00:22:48,880 --> 00:22:52,000
in

572
00:22:49,760 --> 00:22:53,440
column p

573
00:22:52,000 --> 00:22:57,520
because

574
00:22:53,440 --> 00:22:59,120
the complement of the complement of

575
00:22:57,520 --> 00:23:01,039
click

576
00:22:59,120 --> 00:23:03,600
is click

577
00:23:01,039 --> 00:23:03,600
in mp

578
00:23:03,760 --> 00:23:08,960
so the complement of click is in

579
00:23:07,280 --> 00:23:10,080
p

580
00:23:08,960 --> 00:23:11,760
okay

581
00:23:10,080 --> 00:23:13,360
well

582
00:23:11,760 --> 00:23:16,799
and

583
00:23:13,360 --> 00:23:17,919
complement of subset sum is in

584
00:23:16,799 --> 00:23:21,520
column p

585
00:23:17,919 --> 00:23:23,360
because its complement

586
00:23:21,520 --> 00:23:24,159
is in mp

587
00:23:23,360 --> 00:23:28,159
so

588
00:23:24,159 --> 00:23:30,080
this language is in column p

589
00:23:28,159 --> 00:23:32,320
okay so

590
00:23:30,080 --> 00:23:34,080
we introduce the class here

591
00:23:32,320 --> 00:23:36,799
and then

592
00:23:34,080 --> 00:23:38,720
currently as human beings

593
00:23:36,799 --> 00:23:42,240
well we don't know

594
00:23:38,720 --> 00:23:44,480
if co mp is different from mp

595
00:23:42,240 --> 00:23:47,440
okay we we don't know the

596
00:23:44,480 --> 00:23:49,039
the actual relationship between these

597
00:23:47,440 --> 00:23:53,200
two classes

598
00:23:49,039 --> 00:23:55,440
okay for some other classes we might

599
00:23:53,200 --> 00:23:56,880
we might know actually for example

600
00:23:55,440 --> 00:23:59,360
decidable

601
00:23:56,880 --> 00:24:02,400
if a language is decidable

602
00:23:59,360 --> 00:24:04,400
we know that the complement of languages

603
00:24:02,400 --> 00:24:07,520
must be decidable right

604
00:24:04,400 --> 00:24:10,480
so decidable and the code decidable is

605
00:24:07,520 --> 00:24:12,720
the exactly the same clause

606
00:24:10,480 --> 00:24:12,720
okay

607
00:24:13,200 --> 00:24:17,279
and we know

608
00:24:15,200 --> 00:24:19,760
to be recognizable

609
00:24:17,279 --> 00:24:22,960
and cold to recognizable

610
00:24:19,760 --> 00:24:22,960
is not equivalent

611
00:24:23,679 --> 00:24:27,360
right we know that

612
00:24:25,200 --> 00:24:29,600
because you know if

613
00:24:27,360 --> 00:24:29,600
uh

614
00:24:29,760 --> 00:24:34,559
if we remember that a language and its

615
00:24:32,159 --> 00:24:37,440
accomplishment can only there are only

616
00:24:34,559 --> 00:24:41,440
three possibilities

617
00:24:37,440 --> 00:24:44,799
right then those hierarchy

618
00:24:41,440 --> 00:24:46,640
let us know that coal too recognizable

619
00:24:44,799 --> 00:24:47,520
and the two recognizable is not the same

620
00:24:46,640 --> 00:24:48,480
thing

621
00:24:47,520 --> 00:24:50,400
okay

622
00:24:48,480 --> 00:24:54,240
and currently we don't know the

623
00:24:50,400 --> 00:24:59,200
relationship between comp and mp so

624
00:24:54,240 --> 00:24:59,200
that's the status quo okay

625
00:24:59,279 --> 00:25:03,600
and

626
00:25:00,640 --> 00:25:05,039
here comes the interesting uh

627
00:25:03,600 --> 00:25:07,600
uh

628
00:25:05,039 --> 00:25:07,600
discussion

629
00:25:08,159 --> 00:25:12,159
as i described that

630
00:25:10,400 --> 00:25:15,600
p class p

631
00:25:12,159 --> 00:25:16,720
is the class of languages

632
00:25:15,600 --> 00:25:20,000
for which

633
00:25:16,720 --> 00:25:21,360
membership can be decided

634
00:25:20,000 --> 00:25:22,799
quickly

635
00:25:21,360 --> 00:25:25,520
right

636
00:25:22,799 --> 00:25:27,760
give you a string you have a decider

637
00:25:25,520 --> 00:25:30,080
you can decide the given string is in a

638
00:25:27,760 --> 00:25:30,880
language or not within the polynomial

639
00:25:30,080 --> 00:25:33,200
time

640
00:25:30,880 --> 00:25:34,159
so quickly here means within polynomial

641
00:25:33,200 --> 00:25:35,600
time

642
00:25:34,159 --> 00:25:38,760
okay

643
00:25:35,600 --> 00:25:38,760
and then

644
00:25:42,880 --> 00:25:47,840
using an identical

645
00:25:44,799 --> 00:25:47,840
computational model

646
00:25:47,919 --> 00:25:53,679
mp is the class of languages

647
00:25:50,880 --> 00:25:55,279
for which membership can be

648
00:25:53,679 --> 00:25:57,200
verified

649
00:25:55,279 --> 00:25:59,919
quickly

650
00:25:57,200 --> 00:26:01,279
okay verify

651
00:25:59,919 --> 00:26:05,919
act on

652
00:26:01,279 --> 00:26:07,919
correct extra information you can verify

653
00:26:05,919 --> 00:26:11,279
membership of that language

654
00:26:07,919 --> 00:26:13,520
okay with the

655
00:26:11,279 --> 00:26:16,720
identical computational models okay

656
00:26:13,520 --> 00:26:16,720
that's easier

657
00:26:17,360 --> 00:26:21,919
and by definition

658
00:26:19,120 --> 00:26:22,840
okay by definition

659
00:26:21,919 --> 00:26:24,480
you can

660
00:26:22,840 --> 00:26:27,039
consider

661
00:26:24,480 --> 00:26:29,360
designer for

662
00:26:27,039 --> 00:26:32,640
a language

663
00:26:29,360 --> 00:26:34,880
it's actually the verifier

664
00:26:32,640 --> 00:26:37,919
for that language

665
00:26:34,880 --> 00:26:39,039
right because you just ignore because

666
00:26:37,919 --> 00:26:40,400
you can

667
00:26:39,039 --> 00:26:42,960
independently

668
00:26:40,400 --> 00:26:45,760
determine the membership so you can

669
00:26:42,960 --> 00:26:47,600
ignore any extra information that means

670
00:26:45,760 --> 00:26:50,320
no matter what information extra

671
00:26:47,600 --> 00:26:53,520
information is provided you can always

672
00:26:50,320 --> 00:26:57,919
give the correct answer so decider

673
00:26:53,520 --> 00:26:57,919
by definition is a verifier

674
00:26:58,799 --> 00:27:02,799
so according to this

675
00:27:01,120 --> 00:27:06,640
according to this

676
00:27:02,799 --> 00:27:09,120
class p and the class mp basically there

677
00:27:06,640 --> 00:27:10,480
are two possibilities of their

678
00:27:09,120 --> 00:27:13,600
relationship

679
00:27:10,480 --> 00:27:16,400
the first possibility is that

680
00:27:13,600 --> 00:27:19,120
since as i said

681
00:27:16,400 --> 00:27:21,520
decider is actually verified

682
00:27:19,120 --> 00:27:24,159
so p

683
00:27:21,520 --> 00:27:24,159
must be

684
00:27:24,799 --> 00:27:30,480
a subset of mp

685
00:27:28,480 --> 00:27:31,760
okay

686
00:27:30,480 --> 00:27:33,120
or

687
00:27:31,760 --> 00:27:36,159
p

688
00:27:33,120 --> 00:27:36,159
and mp

689
00:27:37,200 --> 00:27:41,600
are the same class

690
00:27:40,320 --> 00:27:43,760
okay

691
00:27:41,600 --> 00:27:46,159
by drawing the left part we mean that

692
00:27:43,760 --> 00:27:48,880
they are something here

693
00:27:46,159 --> 00:27:50,799
like we draw for a regular expression as

694
00:27:48,880 --> 00:27:54,320
a regular language and context-free

695
00:27:50,799 --> 00:27:56,080
language or we draw it for decidable

696
00:27:54,320 --> 00:27:58,880
undecidable but recognizable and

697
00:27:56,080 --> 00:28:00,960
unrecognizable right

698
00:27:58,880 --> 00:28:03,360
so

699
00:28:00,960 --> 00:28:04,720
according to the definition of p and mp

700
00:28:03,360 --> 00:28:08,240
we know

701
00:28:04,720 --> 00:28:09,760
the relationship of classes p and mp

702
00:28:08,240 --> 00:28:13,360
must be

703
00:28:09,760 --> 00:28:15,520
this one of this one but we don't know

704
00:28:13,360 --> 00:28:19,279
which one yet

705
00:28:15,520 --> 00:28:22,720
okay you can find uh many proof to prove

706
00:28:19,279 --> 00:28:24,960
this one or proof this one on the

707
00:28:22,720 --> 00:28:27,360
internet actually as long as you google

708
00:28:24,960 --> 00:28:31,760
there are some uh people collecting all

709
00:28:27,360 --> 00:28:32,640
the proofs proof p equals to np or

710
00:28:31,760 --> 00:28:34,960
uh

711
00:28:32,640 --> 00:28:35,840
p is not equal to

712
00:28:34,960 --> 00:28:38,240
mp

713
00:28:35,840 --> 00:28:41,600
okay we have a lot of proof uh right now

714
00:28:38,240 --> 00:28:43,760
but none of them are accept uh widely

715
00:28:41,600 --> 00:28:46,799
accepted by the

716
00:28:43,760 --> 00:28:48,880
academia okay so that's our

717
00:28:46,799 --> 00:28:51,440
current state

718
00:28:48,880 --> 00:28:51,440
for now

719
00:28:51,679 --> 00:28:57,440
to be sure

720
00:28:52,799 --> 00:29:01,120
what we can be sure of is that p

721
00:28:57,440 --> 00:29:03,440
is a subset of exponential time

722
00:29:01,120 --> 00:29:04,320
well we have the theorem to prove it

723
00:29:03,440 --> 00:29:06,799
right

724
00:29:04,320 --> 00:29:08,320
uh the proof is that we can you know use

725
00:29:06,799 --> 00:29:11,200
a deterministic

726
00:29:08,320 --> 00:29:14,720
turing machine to enumerate

727
00:29:11,200 --> 00:29:16,880
the computational tree of the of a

728
00:29:14,720 --> 00:29:21,120
non-deterministic tree machine so that

729
00:29:16,880 --> 00:29:23,760
way that will result in exponential time

730
00:29:21,120 --> 00:29:26,559
right that's the upper bound well for

731
00:29:23,760 --> 00:29:27,440
some uh better cases it might not be a

732
00:29:26,559 --> 00:29:29,520
uh

733
00:29:27,440 --> 00:29:30,880
might not need to use exponential time

734
00:29:29,520 --> 00:29:32,720
but

735
00:29:30,880 --> 00:29:36,000
that's the worst case

736
00:29:32,720 --> 00:29:38,240
and exponential time would be the union

737
00:29:36,000 --> 00:29:41,200
of all possible time

738
00:29:38,240 --> 00:29:44,720
of 2 to the n to the k power

739
00:29:41,200 --> 00:29:49,360
and remember that 2 here is not really 2

740
00:29:44,720 --> 00:29:49,360
you just need a number there okay to

741
00:29:49,520 --> 00:29:53,840
express that

742
00:29:52,080 --> 00:29:55,760
n is in the

743
00:29:53,840 --> 00:29:56,559
exponential part

744
00:29:55,760 --> 00:29:58,399
okay

745
00:29:56,559 --> 00:30:01,360
so that's what we know

746
00:29:58,399 --> 00:30:04,799
right now and we don't know whether mp

747
00:30:01,360 --> 00:30:08,080
is content in a smaller deterministic

748
00:30:04,799 --> 00:30:09,520
time compressive class

749
00:30:08,080 --> 00:30:12,640
we are sure of

750
00:30:09,520 --> 00:30:13,440
mp is in deterministic exponential time

751
00:30:12,640 --> 00:30:16,080
but

752
00:30:13,440 --> 00:30:18,480
any smaller time complexity class

753
00:30:16,080 --> 00:30:20,840
deterministic time complexity class we

754
00:30:18,480 --> 00:30:23,919
don't know okay that's

755
00:30:20,840 --> 00:30:26,480
currently uh the current situation and

756
00:30:23,919 --> 00:30:28,640
that's the limit of human knowledge

757
00:30:26,480 --> 00:30:30,880
right now

758
00:30:28,640 --> 00:30:30,880
okay

759
00:30:32,159 --> 00:30:34,399
so

760
00:30:34,960 --> 00:30:37,840
this one

761
00:30:38,000 --> 00:30:42,399
or

762
00:30:39,760 --> 00:30:42,399
this one

763
00:30:43,600 --> 00:30:47,120
is really we want to know

764
00:30:47,760 --> 00:30:52,799
not only for now for the past uh maybe

765
00:30:51,120 --> 00:30:56,320
50 years

766
00:30:52,799 --> 00:30:58,559
and probably future with we want to know

767
00:30:56,320 --> 00:31:00,799
which one is the

768
00:30:58,559 --> 00:31:00,799
uh

769
00:31:00,880 --> 00:31:05,120
we want to know which one is the real

770
00:31:03,039 --> 00:31:08,559
relationship okay

771
00:31:05,120 --> 00:31:08,559
so how do we uh

772
00:31:09,200 --> 00:31:15,919
approach this problem

773
00:31:12,240 --> 00:31:17,840
can uh how do we find a way to

774
00:31:15,919 --> 00:31:21,200
try to study

775
00:31:17,840 --> 00:31:22,960
left or right something like that

776
00:31:21,200 --> 00:31:26,000
so

777
00:31:22,960 --> 00:31:27,760
it is difficult because you know p is a

778
00:31:26,000 --> 00:31:30,640
class which is a set

779
00:31:27,760 --> 00:31:33,640
and mp is also a class which is a set

780
00:31:30,640 --> 00:31:33,640
and

781
00:31:33,679 --> 00:31:39,200
if you want to prove

782
00:31:36,159 --> 00:31:40,640
for example if you want to prove p equal

783
00:31:39,200 --> 00:31:42,799
to mp

784
00:31:40,640 --> 00:31:46,799
because p is a class and np is a class

785
00:31:42,799 --> 00:31:49,760
which are stats right so you must prove

786
00:31:46,799 --> 00:31:51,120
some language in p

787
00:31:49,760 --> 00:31:52,880
is in

788
00:31:51,120 --> 00:31:54,240
mp

789
00:31:52,880 --> 00:31:55,600
right

790
00:31:54,240 --> 00:31:57,679
sorry here

791
00:31:55,600 --> 00:31:58,720
then if you prove this direction that

792
00:31:57,679 --> 00:32:01,200
means

793
00:31:58,720 --> 00:32:05,679
p is in mp

794
00:32:01,200 --> 00:32:07,279
p is p is a subset of mp okay i should

795
00:32:05,679 --> 00:32:08,720
write it better

796
00:32:07,279 --> 00:32:10,960
like this

797
00:32:08,720 --> 00:32:12,320
and also you need to

798
00:32:10,960 --> 00:32:16,399
prove that

799
00:32:12,320 --> 00:32:19,519
if a language is an in np

800
00:32:16,399 --> 00:32:22,799
the language is in p then

801
00:32:19,519 --> 00:32:27,279
in this case you prove this

802
00:32:22,799 --> 00:32:30,000
and if you have nt then p is equal p

803
00:32:27,279 --> 00:32:32,880
equals to mp

804
00:32:30,000 --> 00:32:34,240
okay and as i said by definition you

805
00:32:32,880 --> 00:32:35,279
don't need to

806
00:32:34,240 --> 00:32:38,080
do this

807
00:32:35,279 --> 00:32:39,840
we already know it so the key part is

808
00:32:38,080 --> 00:32:41,200
this one

809
00:32:39,840 --> 00:32:43,279
okay

810
00:32:41,200 --> 00:32:46,320
then you see if we want to prove p

811
00:32:43,279 --> 00:32:47,440
equals to mp for what we we've already

812
00:32:46,320 --> 00:32:51,120
known

813
00:32:47,440 --> 00:32:53,279
we need to prove that all languages in

814
00:32:51,120 --> 00:32:55,679
mp

815
00:32:53,279 --> 00:32:58,640
are in p

816
00:32:55,679 --> 00:33:00,480
see discuss about all languages that's

817
00:32:58,640 --> 00:33:02,080
you know kind of

818
00:33:00,480 --> 00:33:02,960
difficult

819
00:33:02,080 --> 00:33:05,120
and

820
00:33:02,960 --> 00:33:06,559
for the left part

821
00:33:05,120 --> 00:33:09,440
the left part

822
00:33:06,559 --> 00:33:11,360
if we want to prove p

823
00:33:09,440 --> 00:33:13,200
and the mp

824
00:33:11,360 --> 00:33:15,200
if you want to prove p and mp are

825
00:33:13,200 --> 00:33:19,039
different

826
00:33:15,200 --> 00:33:20,720
then we need to find an example

827
00:33:19,039 --> 00:33:22,159
here

828
00:33:20,720 --> 00:33:25,919
okay

829
00:33:22,159 --> 00:33:28,240
the let if there is any language anyone

830
00:33:25,919 --> 00:33:31,440
any language

831
00:33:28,240 --> 00:33:33,279
if there is a language l which is not in

832
00:33:31,440 --> 00:33:34,159
p

833
00:33:33,279 --> 00:33:36,480
sorry

834
00:33:34,159 --> 00:33:38,399
which is not in p but

835
00:33:36,480 --> 00:33:41,679
it is in mp

836
00:33:38,399 --> 00:33:44,080
if we have this language then we prove

837
00:33:41,679 --> 00:33:45,679
this one

838
00:33:44,080 --> 00:33:48,480
right

839
00:33:45,679 --> 00:33:49,840
so you see for the midterm second

840
00:33:48,480 --> 00:33:51,440
metering

841
00:33:49,840 --> 00:33:56,000
examination

842
00:33:51,440 --> 00:33:57,440
why did i ask you firstly

843
00:33:56,000 --> 00:33:58,320
choose

844
00:33:57,440 --> 00:34:00,080
true

845
00:33:58,320 --> 00:34:01,440
or false

846
00:34:00,080 --> 00:34:03,919
then based on

847
00:34:01,440 --> 00:34:07,200
what you ch what you chose

848
00:34:03,919 --> 00:34:08,000
you try to prove you are correct

849
00:34:07,200 --> 00:34:11,440
so

850
00:34:08,000 --> 00:34:13,359
it's quite the same thing here

851
00:34:11,440 --> 00:34:17,359
we want to prove

852
00:34:13,359 --> 00:34:18,960
p equals to np or p is not

853
00:34:17,359 --> 00:34:22,879
equal to mp

854
00:34:18,960 --> 00:34:25,200
then if you want to prove p equal to mp

855
00:34:22,879 --> 00:34:27,919
you need to prove that all language is

856
00:34:25,200 --> 00:34:31,359
np they are in p okay

857
00:34:27,919 --> 00:34:35,520
or you want to prove p not equal to mp

858
00:34:31,359 --> 00:34:37,599
then you need to find a language here

859
00:34:35,520 --> 00:34:40,399
as soon as you find some language which

860
00:34:37,599 --> 00:34:42,480
is not in p by the np then you

861
00:34:40,399 --> 00:34:43,440
successfully prove that

862
00:34:42,480 --> 00:34:46,480
p

863
00:34:43,440 --> 00:34:49,119
is not equal to mp

864
00:34:46,480 --> 00:34:51,280
okay

865
00:34:49,119 --> 00:34:53,440
then

866
00:34:51,280 --> 00:34:55,760
what if

867
00:34:53,440 --> 00:34:58,400
what if

868
00:34:55,760 --> 00:35:00,640
we can find some

869
00:34:58,400 --> 00:35:03,280
uh

870
00:35:00,640 --> 00:35:04,880
well i would like to say spatial but

871
00:35:03,280 --> 00:35:07,760
not that special

872
00:35:04,880 --> 00:35:10,960
not that spatial but uh we're still

873
00:35:07,760 --> 00:35:15,480
special okay what if we can find some

874
00:35:10,960 --> 00:35:15,480
particular spatial language

875
00:35:17,520 --> 00:35:22,240
so special that

876
00:35:19,280 --> 00:35:23,760
as long as we find that

877
00:35:22,240 --> 00:35:26,079
it is not

878
00:35:23,760 --> 00:35:26,079
in p

879
00:35:26,400 --> 00:35:29,839
then we prove

880
00:35:27,680 --> 00:35:30,640
the right situation

881
00:35:29,839 --> 00:35:34,000
or

882
00:35:30,640 --> 00:35:35,520
if we find the language

883
00:35:34,000 --> 00:35:39,200
in p

884
00:35:35,520 --> 00:35:40,560
then we prove the second situation

885
00:35:39,200 --> 00:35:43,599
again

886
00:35:40,560 --> 00:35:45,040
what if we can find we can define some

887
00:35:43,599 --> 00:35:46,320
language

888
00:35:45,040 --> 00:35:48,640
of

889
00:35:46,320 --> 00:35:51,119
spatial property

890
00:35:48,640 --> 00:35:53,920
and according to that spatial property

891
00:35:51,119 --> 00:35:56,839
the language can help us

892
00:35:53,920 --> 00:36:00,480
to distinguish

893
00:35:56,839 --> 00:36:03,680
left or right the situation on the left

894
00:36:00,480 --> 00:36:03,680
or situation on the right

895
00:36:03,760 --> 00:36:08,400
if we can

896
00:36:05,599 --> 00:36:12,079
prove the language the arrow here

897
00:36:08,400 --> 00:36:15,119
in p then p equals to mp if we can prove

898
00:36:12,079 --> 00:36:18,640
that l here not in p then

899
00:36:15,119 --> 00:36:22,079
p is not equal to mp

900
00:36:18,640 --> 00:36:22,960
what if we have some language like this

901
00:36:22,079 --> 00:36:25,680
okay

902
00:36:22,960 --> 00:36:27,359
so that would be

903
00:36:25,680 --> 00:36:28,960
mp complete

904
00:36:27,359 --> 00:36:30,000
problem

905
00:36:28,960 --> 00:36:32,400
okay

906
00:36:30,000 --> 00:36:34,280
we will introduce np complete problem

907
00:36:32,400 --> 00:36:36,960
the first one will be

908
00:36:34,280 --> 00:36:38,560
satisfiability problem

909
00:36:36,960 --> 00:36:42,079
i mean first one is not the first one i

910
00:36:38,560 --> 00:36:44,160
want to introduce it is the first one in

911
00:36:42,079 --> 00:36:47,440
human history to be

912
00:36:44,160 --> 00:36:49,760
proved to be empty complete

913
00:36:47,440 --> 00:36:49,760
then

914
00:36:50,880 --> 00:36:55,320
it is the famous uh

915
00:36:58,800 --> 00:37:06,560
theorem okay

916
00:37:01,760 --> 00:37:06,560
if the satisfiability problem is in p

917
00:37:06,720 --> 00:37:11,839
sorry uh the

918
00:37:08,560 --> 00:37:13,359
satisfiability problem is in p if and

919
00:37:11,839 --> 00:37:14,400
only if

920
00:37:13,359 --> 00:37:16,720
p

921
00:37:14,400 --> 00:37:20,160
equals to np

922
00:37:16,720 --> 00:37:21,839
okay that we will prove this uh

923
00:37:20,160 --> 00:37:24,480
slightly later

924
00:37:21,839 --> 00:37:27,200
because we need some other mathematical

925
00:37:24,480 --> 00:37:29,359
construction first okay and let's

926
00:37:27,200 --> 00:37:31,119
introduce that first because uh we

927
00:37:29,359 --> 00:37:33,680
always need to do that

928
00:37:31,119 --> 00:37:36,880
so what is sat here

929
00:37:33,680 --> 00:37:39,359
sat is that you have a

930
00:37:36,880 --> 00:37:43,839
boolean formula

931
00:37:39,359 --> 00:37:45,119
is this boolean formula satisfiable

932
00:37:43,839 --> 00:37:47,839
if it is

933
00:37:45,119 --> 00:37:48,960
then it's inset otherwise it's not in

934
00:37:47,839 --> 00:37:52,560
set

935
00:37:48,960 --> 00:37:54,240
okay so what is putting formula i think

936
00:37:52,560 --> 00:37:56,720
most of them

937
00:37:54,240 --> 00:37:59,440
most of you should already know it but

938
00:37:56,720 --> 00:38:01,760
let's just describe it

939
00:37:59,440 --> 00:38:05,200
so a boolean formula

940
00:38:01,760 --> 00:38:07,040
is an expression

941
00:38:05,200 --> 00:38:08,720
involving putting variables and

942
00:38:07,040 --> 00:38:11,040
operators

943
00:38:08,720 --> 00:38:12,960
so for example a putting formula like

944
00:38:11,040 --> 00:38:14,000
this one so you have

945
00:38:12,960 --> 00:38:15,760
x bar

946
00:38:14,000 --> 00:38:16,960
and y

947
00:38:15,760 --> 00:38:18,400
then

948
00:38:16,960 --> 00:38:19,680
x and

949
00:38:18,400 --> 00:38:20,880
z bar

950
00:38:19,680 --> 00:38:22,079
and or

951
00:38:20,880 --> 00:38:24,320
okay

952
00:38:22,079 --> 00:38:26,320
then we said a boolean formula is

953
00:38:24,320 --> 00:38:27,760
satisfiable

954
00:38:26,320 --> 00:38:32,079
if

955
00:38:27,760 --> 00:38:34,880
some assignments of 0 and 1

956
00:38:32,079 --> 00:38:37,200
makes the whole formula

957
00:38:34,880 --> 00:38:38,000
evaluated to 1

958
00:38:37,200 --> 00:38:41,040
okay

959
00:38:38,000 --> 00:38:42,800
here for 0 is 4 4

960
00:38:41,040 --> 00:38:45,200
1 is true

961
00:38:42,800 --> 00:38:47,119
for this particular example

962
00:38:45,200 --> 00:38:49,040
for this particular example

963
00:38:47,119 --> 00:38:52,480
if we assign

964
00:38:49,040 --> 00:38:54,800
x zero so that would be one right x bar

965
00:38:52,480 --> 00:38:55,920
is a complement of zero one's complement

966
00:38:54,800 --> 00:38:56,880
okay

967
00:38:55,920 --> 00:38:58,400
and

968
00:38:56,880 --> 00:39:01,040
y to be one

969
00:38:58,400 --> 00:39:03,440
so one and one is one

970
00:39:01,040 --> 00:39:05,839
then it doesn't matter this one right

971
00:39:03,440 --> 00:39:10,480
because it's over so

972
00:39:05,839 --> 00:39:13,040
the whole formula evaluates to be one

973
00:39:10,480 --> 00:39:17,040
then it's satisfied

974
00:39:13,040 --> 00:39:18,079
then because the assignments

975
00:39:17,040 --> 00:39:19,359
exist

976
00:39:18,079 --> 00:39:23,760
we say that

977
00:39:19,359 --> 00:39:26,079
this formula is satisfiable

978
00:39:23,760 --> 00:39:28,720
right okay so that's the definition and

979
00:39:26,079 --> 00:39:31,599
of course there are fooling formula

980
00:39:28,720 --> 00:39:34,160
not satisfiable not satisfiable for

981
00:39:31,599 --> 00:39:36,640
example if you have x

982
00:39:34,160 --> 00:39:39,359
and x bar

983
00:39:36,640 --> 00:39:42,800
okay it's not satisfiable right because

984
00:39:39,359 --> 00:39:44,560
if you assign 0 to x then that'll be 0

985
00:39:42,800 --> 00:39:49,040
and 1 so

986
00:39:44,560 --> 00:39:52,000
n is 1. if you assign 0 to x then 1 at 1

987
00:39:49,040 --> 00:39:53,200
to x then 1 and

988
00:39:52,000 --> 00:39:55,359
0

989
00:39:53,200 --> 00:39:58,720
also 0 so

990
00:39:55,359 --> 00:40:00,720
no assignment satisfied this boolean

991
00:39:58,720 --> 00:40:01,760
formula

992
00:40:00,720 --> 00:40:04,560
so

993
00:40:01,760 --> 00:40:07,520
when you have a boolean formula

994
00:40:04,560 --> 00:40:08,400
it may be satisfiable or not

995
00:40:07,520 --> 00:40:11,040
so

996
00:40:08,400 --> 00:40:14,640
the language of sat

997
00:40:11,040 --> 00:40:18,480
is all the satisfiable that is the set

998
00:40:14,640 --> 00:40:20,720
of all the satisfiable boolean formula

999
00:40:18,480 --> 00:40:20,720
okay

1000
00:40:20,960 --> 00:40:25,040
so you see

1001
00:40:22,560 --> 00:40:27,119
can you firstly can you uh have a turing

1002
00:40:25,040 --> 00:40:28,560
machine decide

1003
00:40:27,119 --> 00:40:31,599
a given

1004
00:40:28,560 --> 00:40:34,079
formula satisfiable or not of course you

1005
00:40:31,599 --> 00:40:36,240
can have you can have it it's decidable

1006
00:40:34,079 --> 00:40:38,800
because you just need to try

1007
00:40:36,240 --> 00:40:42,880
all possible

1008
00:40:38,800 --> 00:40:45,280
assignments if any one of them

1009
00:40:42,880 --> 00:40:47,920
satisfy the formula and the formula is

1010
00:40:45,280 --> 00:40:50,400
viable so it's decidable the problem is

1011
00:40:47,920 --> 00:40:53,359
that how much time you need

1012
00:40:50,400 --> 00:40:55,680
to do the decision okay

1013
00:40:53,359 --> 00:40:55,680
then

1014
00:40:56,000 --> 00:40:59,280
cook 11

1015
00:40:58,000 --> 00:41:00,319
proof that

1016
00:40:59,280 --> 00:41:04,720
if

1017
00:41:00,319 --> 00:41:04,720
you need only polynomial time

1018
00:41:05,280 --> 00:41:12,800
if and only if p equals to mp okay so

1019
00:41:09,839 --> 00:41:16,319
that's the importance of

1020
00:41:12,800 --> 00:41:19,440
uh satisfiability and also the concept

1021
00:41:16,319 --> 00:41:21,839
of and mp complete uh np complete and

1022
00:41:19,440 --> 00:41:23,040
the mp completeness

1023
00:41:21,839 --> 00:41:24,319
okay

1024
00:41:23,040 --> 00:41:27,200
so

1025
00:41:24,319 --> 00:41:29,200
let's go through our uh

1026
00:41:27,200 --> 00:41:30,079
mathematic mathematical construction

1027
00:41:29,200 --> 00:41:31,359
first

1028
00:41:30,079 --> 00:41:32,160
for

1029
00:41:31,359 --> 00:41:34,640
uh

1030
00:41:32,160 --> 00:41:35,839
follow-up discussion okay

1031
00:41:34,640 --> 00:41:37,119
so

1032
00:41:35,839 --> 00:41:40,640
we want to

1033
00:41:37,119 --> 00:41:45,040
since we want to uh

1034
00:41:40,640 --> 00:41:47,359
well uh properly define np-complete

1035
00:41:45,040 --> 00:41:49,760
we need the following

1036
00:41:47,359 --> 00:41:52,480
measurement construction but these

1037
00:41:49,760 --> 00:41:55,920
constructions are very similar to uh

1038
00:41:52,480 --> 00:41:59,359
section 5.3 mapping reducibility

1039
00:41:55,920 --> 00:42:02,880
it's well basically the same but we

1040
00:41:59,359 --> 00:42:05,280
we add the constraint on time that's it

1041
00:42:02,880 --> 00:42:06,079
okay so let's go through a definition

1042
00:42:05,280 --> 00:42:07,359
here

1043
00:42:06,079 --> 00:42:09,599
so

1044
00:42:07,359 --> 00:42:13,040
here we want to introduce uh

1045
00:42:09,599 --> 00:42:15,920
polynomial time reducibility okay

1046
00:42:13,040 --> 00:42:17,040
so it is still making reusability but

1047
00:42:15,920 --> 00:42:19,200
with the

1048
00:42:17,040 --> 00:42:23,200
constraint on time

1049
00:42:19,200 --> 00:42:24,800
okay let's say a function f from string

1050
00:42:23,200 --> 00:42:27,359
to string

1051
00:42:24,800 --> 00:42:28,839
is a polynomial time

1052
00:42:27,359 --> 00:42:32,000
computable

1053
00:42:28,839 --> 00:42:34,560
function if

1054
00:42:32,000 --> 00:42:36,560
some polynomial time to machine

1055
00:42:34,560 --> 00:42:37,680
m exists

1056
00:42:36,560 --> 00:42:39,040
holds

1057
00:42:37,680 --> 00:42:42,079
with just

1058
00:42:39,040 --> 00:42:42,960
f of w on its tape

1059
00:42:42,079 --> 00:42:45,839
when

1060
00:42:42,960 --> 00:42:48,079
started on any input w

1061
00:42:45,839 --> 00:42:48,079
okay

1062
00:42:50,480 --> 00:42:57,280
remember in section 5.3 we define its

1063
00:42:54,400 --> 00:43:00,640
computable function it doesn't matter

1064
00:42:57,280 --> 00:43:03,200
how much time you need for the exclusion

1065
00:43:00,640 --> 00:43:06,400
and here we

1066
00:43:03,200 --> 00:43:10,240
emphasize on polynomial time computable

1067
00:43:06,400 --> 00:43:14,560
computable function and such computation

1068
00:43:10,240 --> 00:43:16,160
has to be done by polynomial time to a

1069
00:43:14,560 --> 00:43:19,200
machine okay

1070
00:43:16,160 --> 00:43:22,160
so now we quantify a running time within

1071
00:43:19,200 --> 00:43:24,400
the polynomial bound of the input string

1072
00:43:22,160 --> 00:43:27,040
a polynomial of the length of the input

1073
00:43:24,400 --> 00:43:29,359
string okay

1074
00:43:27,040 --> 00:43:30,720
then we say that

1075
00:43:29,359 --> 00:43:34,000
language a

1076
00:43:30,720 --> 00:43:38,000
is polynomial time maintain reducable so

1077
00:43:34,000 --> 00:43:40,400
c still may be reducible but now we add

1078
00:43:38,000 --> 00:43:43,839
polynomial time as our

1079
00:43:40,400 --> 00:43:46,319
constraint on time okay or simply

1080
00:43:43,839 --> 00:43:48,880
polynomial time reducible things we are

1081
00:43:46,319 --> 00:43:50,960
all talking about may be reducible we

1082
00:43:48,880 --> 00:43:53,200
you know slightly simplify the

1083
00:43:50,960 --> 00:43:56,079
expression we are using

1084
00:43:53,200 --> 00:44:00,079
we say that language a is polynomial

1085
00:43:56,079 --> 00:44:02,400
time may be reducible to language b

1086
00:44:00,079 --> 00:44:05,440
return

1087
00:44:02,400 --> 00:44:07,440
here we use p here means polynomial time

1088
00:44:05,440 --> 00:44:10,800
okay

1089
00:44:07,440 --> 00:44:12,720
if a polynomial time computable function

1090
00:44:10,800 --> 00:44:14,400
exists

1091
00:44:12,720 --> 00:44:15,359
give

1092
00:44:14,400 --> 00:44:16,560
gives

1093
00:44:15,359 --> 00:44:18,400
such

1094
00:44:16,560 --> 00:44:19,760
relation

1095
00:44:18,400 --> 00:44:21,440
for every

1096
00:44:19,760 --> 00:44:24,160
input string

1097
00:44:21,440 --> 00:44:27,520
see that relation is identical to what

1098
00:44:24,160 --> 00:44:29,520
we have in section 5.3

1099
00:44:27,520 --> 00:44:33,359
okay that means

1100
00:44:29,520 --> 00:44:33,359
any string in a

1101
00:44:33,599 --> 00:44:40,079
any string in a

1102
00:44:36,400 --> 00:44:40,880
map to a string in b and a string out of

1103
00:44:40,079 --> 00:44:44,160
a

1104
00:44:40,880 --> 00:44:46,480
map to string out of b

1105
00:44:44,160 --> 00:44:50,800
and remember that

1106
00:44:46,480 --> 00:44:53,760
there is no untwo or 1 to 1

1107
00:44:50,800 --> 00:44:57,200
okay there's no on 2 and 1 to 1

1108
00:44:53,760 --> 00:45:00,319
it is quite possible that

1109
00:44:57,200 --> 00:45:02,960
all strings in a map to exactly one

1110
00:45:00,319 --> 00:45:05,839
strings in b and all string out of a

1111
00:45:02,960 --> 00:45:08,079
exactly mapped to all string f

1112
00:45:05,839 --> 00:45:09,680
one string out of b that's

1113
00:45:08,079 --> 00:45:11,599
acceptable

1114
00:45:09,680 --> 00:45:14,000
acceptable

1115
00:45:11,599 --> 00:45:17,000
by our definition here

1116
00:45:14,000 --> 00:45:17,000
okay

1117
00:45:21,839 --> 00:45:26,079
again so the computable function we have

1118
00:45:24,480 --> 00:45:28,720
here

1119
00:45:26,079 --> 00:45:30,560
only need to provide

1120
00:45:28,720 --> 00:45:31,760
the relationship between

1121
00:45:30,560 --> 00:45:36,319
w

1122
00:45:31,760 --> 00:45:39,440
and f of w is that w in a if and only if

1123
00:45:36,319 --> 00:45:44,480
f of w f of w in b

1124
00:45:39,440 --> 00:45:47,440
there's no other other criteria okay

1125
00:45:44,480 --> 00:45:49,440
then

1126
00:45:47,440 --> 00:45:51,119
if such a

1127
00:45:49,440 --> 00:45:52,160
polynomial time computable function

1128
00:45:51,119 --> 00:45:55,520
exists

1129
00:45:52,160 --> 00:45:58,319
for language a to language b we say that

1130
00:45:55,520 --> 00:46:01,200
language a is polynomial time maybe

1131
00:45:58,319 --> 00:46:03,440
reducible to language b and we call this

1132
00:46:01,200 --> 00:46:06,960
function f

1133
00:46:03,440 --> 00:46:08,000
the polynomial time reduction

1134
00:46:06,960 --> 00:46:09,599
of

1135
00:46:08,000 --> 00:46:11,280
a to b

1136
00:46:09,599 --> 00:46:13,520
okay

1137
00:46:11,280 --> 00:46:16,800
so you can map back to

1138
00:46:13,520 --> 00:46:19,599
section 5.3

1139
00:46:16,800 --> 00:46:21,839
basically the same definition

1140
00:46:19,599 --> 00:46:25,200
only that we add

1141
00:46:21,839 --> 00:46:28,200
time constraint okay

1142
00:46:25,200 --> 00:46:28,200
then

1143
00:46:30,160 --> 00:46:36,319
then we have

1144
00:46:32,240 --> 00:46:37,680
we can uh by using this definition

1145
00:46:36,319 --> 00:46:39,200
we can have

1146
00:46:37,680 --> 00:46:41,200
a theorem

1147
00:46:39,200 --> 00:46:43,280
uh here there are

1148
00:46:41,200 --> 00:46:44,079
seven 7.31

1149
00:46:43,280 --> 00:46:47,040
so

1150
00:46:44,079 --> 00:46:47,040
we can prove that

1151
00:46:47,520 --> 00:46:50,480
we can prove that

1152
00:46:50,640 --> 00:46:55,119
if a

1153
00:46:52,240 --> 00:46:58,400
is polynomial

1154
00:46:55,119 --> 00:47:00,960
time reducible to b and you already know

1155
00:46:58,400 --> 00:47:02,000
that b is in

1156
00:47:00,960 --> 00:47:06,720
p

1157
00:47:02,000 --> 00:47:08,560
then we can conclude a in p

1158
00:47:06,720 --> 00:47:11,280
okay

1159
00:47:08,560 --> 00:47:13,440
we can conclude that a is in p

1160
00:47:11,280 --> 00:47:15,440
how to prove this theorem

1161
00:47:13,440 --> 00:47:17,839
basically

1162
00:47:15,440 --> 00:47:18,640
we know that

1163
00:47:17,839 --> 00:47:22,559
b

1164
00:47:18,640 --> 00:47:22,559
in class p that means there is a

1165
00:47:22,640 --> 00:47:27,680
decider for b

1166
00:47:24,800 --> 00:47:30,960
deterministic machine as a decider for b

1167
00:47:27,680 --> 00:47:31,920
running in polynomial time right

1168
00:47:30,960 --> 00:47:33,839
then

1169
00:47:31,920 --> 00:47:37,599
by using this

1170
00:47:33,839 --> 00:47:39,040
relation we can construct a decider for

1171
00:47:37,599 --> 00:47:42,400
a

1172
00:47:39,040 --> 00:47:42,400
running in polynomial time

1173
00:47:42,800 --> 00:47:47,839
so the theorem is proved okay

1174
00:47:46,480 --> 00:47:49,520
so

1175
00:47:47,839 --> 00:47:51,440
we can prove that

1176
00:47:49,520 --> 00:47:52,880
in this way

1177
00:47:51,440 --> 00:47:54,240
so firstly

1178
00:47:52,880 --> 00:47:56,079
we know that

1179
00:47:54,240 --> 00:47:57,119
b is in p

1180
00:47:56,079 --> 00:47:59,760
so

1181
00:47:57,119 --> 00:48:01,599
there is a transmission m

1182
00:47:59,760 --> 00:48:04,079
deciding b

1183
00:48:01,599 --> 00:48:07,640
in polynomial time okay

1184
00:48:04,079 --> 00:48:07,640
so that's our

1185
00:48:07,920 --> 00:48:12,319
known fact here

1186
00:48:10,000 --> 00:48:15,440
and we know that a

1187
00:48:12,319 --> 00:48:17,200
is maybe reducible a polynomial time may

1188
00:48:15,440 --> 00:48:18,880
be reducible to b

1189
00:48:17,200 --> 00:48:21,520
by definition

1190
00:48:18,880 --> 00:48:24,640
there is a

1191
00:48:21,520 --> 00:48:28,319
polynomial time reduction from a to b

1192
00:48:24,640 --> 00:48:28,319
right polynomial time reduction

1193
00:48:28,480 --> 00:48:34,240
then we construct

1194
00:48:31,440 --> 00:48:35,680
the decider running in polynomial time

1195
00:48:34,240 --> 00:48:38,559
for a

1196
00:48:35,680 --> 00:48:40,160
then we can prove a theorem okay so how

1197
00:48:38,559 --> 00:48:43,359
to construct that

1198
00:48:40,160 --> 00:48:45,040
we construct the machine n here

1199
00:48:43,359 --> 00:48:47,760
and for w

1200
00:48:45,040 --> 00:48:49,440
for any input string w

1201
00:48:47,760 --> 00:48:52,240
we call f

1202
00:48:49,440 --> 00:48:55,359
we compute f of w

1203
00:48:52,240 --> 00:48:57,760
remember that the definition of f

1204
00:48:55,359 --> 00:49:00,480
what is that it is a turing machine

1205
00:48:57,760 --> 00:49:03,680
holds on all inputs

1206
00:49:00,480 --> 00:49:06,240
with its tape as f of w right so we

1207
00:49:03,680 --> 00:49:08,160
don't need to take care of uh we don't

1208
00:49:06,240 --> 00:49:09,680
need to care about like an infinite loop

1209
00:49:08,160 --> 00:49:11,200
or something here

1210
00:49:09,680 --> 00:49:14,800
in chapter seven

1211
00:49:11,200 --> 00:49:19,520
there is no undecidable stuff okay

1212
00:49:14,800 --> 00:49:24,079
so we just need to compute f of w

1213
00:49:19,520 --> 00:49:26,880
after the first step and how long does

1214
00:49:24,079 --> 00:49:28,240
the uh anyway let's do the correctness

1215
00:49:26,880 --> 00:49:31,200
first okay

1216
00:49:28,240 --> 00:49:32,720
after con compute f of w

1217
00:49:31,200 --> 00:49:36,720
we call

1218
00:49:32,720 --> 00:49:39,920
m which is the decider for b right

1219
00:49:36,720 --> 00:49:40,720
on the input of f of w

1220
00:49:39,920 --> 00:49:41,680
and

1221
00:49:40,720 --> 00:49:46,319
what

1222
00:49:41,680 --> 00:49:48,800
can f provide us f providers such

1223
00:49:46,319 --> 00:49:48,800
relation

1224
00:49:52,400 --> 00:49:55,520
right

1225
00:49:53,520 --> 00:49:59,760
so

1226
00:49:55,520 --> 00:50:04,000
we run m on f of w

1227
00:49:59,760 --> 00:50:04,000
and n is the desire for b

1228
00:50:04,400 --> 00:50:06,640
so

1229
00:50:07,119 --> 00:50:10,400
n

1230
00:50:08,480 --> 00:50:11,280
must hold

1231
00:50:10,400 --> 00:50:14,880
with

1232
00:50:11,280 --> 00:50:16,480
an answer which is accept or reject

1233
00:50:14,880 --> 00:50:20,319
if m says

1234
00:50:16,480 --> 00:50:24,720
accept that means f of w is in b

1235
00:50:20,319 --> 00:50:27,119
then we know w is in a then we report

1236
00:50:24,720 --> 00:50:29,520
also accept

1237
00:50:27,119 --> 00:50:33,440
otherwise if m says

1238
00:50:29,520 --> 00:50:36,000
no f of w is not in b

1239
00:50:33,440 --> 00:50:38,000
then according to the relationship here

1240
00:50:36,000 --> 00:50:42,720
we know that

1241
00:50:38,000 --> 00:50:44,960
w is not in a so we also report the same

1242
00:50:42,720 --> 00:50:47,119
result again

1243
00:50:44,960 --> 00:50:51,040
okay that's why

1244
00:50:47,119 --> 00:50:51,040
the second step says so

1245
00:50:51,440 --> 00:50:53,520
so

1246
00:50:52,319 --> 00:50:55,200
surely

1247
00:50:53,520 --> 00:50:58,000
n here

1248
00:50:55,200 --> 00:51:00,079
is a decider for a right no problem

1249
00:50:58,000 --> 00:51:02,160
decider for a

1250
00:51:00,079 --> 00:51:04,240
okay how much time does it need to

1251
00:51:02,160 --> 00:51:06,000
finish the computation

1252
00:51:04,240 --> 00:51:07,680
firstly

1253
00:51:06,000 --> 00:51:10,960
f

1254
00:51:07,680 --> 00:51:14,400
is a polynomial time reduction so

1255
00:51:10,960 --> 00:51:16,880
you need a polynomial time of length of

1256
00:51:14,400 --> 00:51:17,839
w to finish the computation of the first

1257
00:51:16,880 --> 00:51:19,760
step

1258
00:51:17,839 --> 00:51:22,760
that's no problem right

1259
00:51:19,760 --> 00:51:22,760
then

1260
00:51:23,520 --> 00:51:28,000
is a polynomial times decider for b

1261
00:51:32,160 --> 00:51:37,920
and here is the polynomial

1262
00:51:34,880 --> 00:51:41,119
decided for b but

1263
00:51:37,920 --> 00:51:42,400
remember that the polynomial time

1264
00:51:41,119 --> 00:51:46,720
for m

1265
00:51:42,400 --> 00:51:49,359
is the length of f of w

1266
00:51:46,720 --> 00:51:52,160
right don't don't forget that

1267
00:51:49,359 --> 00:51:53,599
everyone in polynomial time but how long

1268
00:51:52,160 --> 00:51:54,559
does it take

1269
00:51:53,599 --> 00:51:56,640
actually

1270
00:51:54,559 --> 00:51:58,960
it is a polynomial of

1271
00:51:56,640 --> 00:52:02,319
f of w

1272
00:51:58,960 --> 00:52:04,800
so the problem here is that

1273
00:52:02,319 --> 00:52:06,160
the running time

1274
00:52:04,800 --> 00:52:08,720
here

1275
00:52:06,160 --> 00:52:12,400
is the running time here also within the

1276
00:52:08,720 --> 00:52:14,079
polynomial bound of the length of w

1277
00:52:12,400 --> 00:52:15,440
yes it is

1278
00:52:14,079 --> 00:52:17,359
why

1279
00:52:15,440 --> 00:52:20,960
because

1280
00:52:17,359 --> 00:52:20,960
since f of w

1281
00:52:21,520 --> 00:52:24,720
takes

1282
00:52:22,720 --> 00:52:26,640
polynomial time to finish the

1283
00:52:24,720 --> 00:52:29,920
computation

1284
00:52:26,640 --> 00:52:33,599
the length of f of w

1285
00:52:29,920 --> 00:52:35,520
must be within the polynomial bound of

1286
00:52:33,599 --> 00:52:36,720
the length of w

1287
00:52:35,520 --> 00:52:38,640
remember the

1288
00:52:36,720 --> 00:52:39,030
one step

1289
00:52:38,640 --> 00:52:40,319
one

1290
00:52:39,030 --> 00:52:43,520
[Music]

1291
00:52:40,319 --> 00:52:46,720
tape space one transition step a

1292
00:52:43,520 --> 00:52:48,480
connection between time and space of the

1293
00:52:46,720 --> 00:52:51,280
turing machine

1294
00:52:48,480 --> 00:52:52,400
if you remember that then you know

1295
00:52:51,280 --> 00:52:55,280
since

1296
00:52:52,400 --> 00:52:58,319
when we calculate f

1297
00:52:55,280 --> 00:53:01,760
when we calculate f

1298
00:52:58,319 --> 00:53:03,599
at most we take polynomial

1299
00:53:01,760 --> 00:53:05,680
steps

1300
00:53:03,599 --> 00:53:08,240
or we take the number of steps

1301
00:53:05,680 --> 00:53:09,520
polynomial to the length of

1302
00:53:08,240 --> 00:53:10,559
w

1303
00:53:09,520 --> 00:53:14,640
so

1304
00:53:10,559 --> 00:53:17,119
the length of f of w at the most

1305
00:53:14,640 --> 00:53:19,839
will be within the polynomial bound of

1306
00:53:17,119 --> 00:53:20,640
the length of w

1307
00:53:19,839 --> 00:53:23,760
then

1308
00:53:20,640 --> 00:53:28,079
n runs on the polynomial time of the

1309
00:53:23,760 --> 00:53:29,359
length of f of w so polynomials

1310
00:53:28,079 --> 00:53:31,440
polynomial

1311
00:53:29,359 --> 00:53:32,480
is still polynomial

1312
00:53:31,440 --> 00:53:36,400
right

1313
00:53:32,480 --> 00:53:38,240
so there's no problem and here is a

1314
00:53:36,400 --> 00:53:40,559
polynomial time

1315
00:53:38,240 --> 00:53:42,319
decider for a

1316
00:53:40,559 --> 00:53:45,200
so by definition

1317
00:53:42,319 --> 00:53:45,200
a is in p

1318
00:53:46,160 --> 00:53:49,040
okay

1319
00:53:47,920 --> 00:53:52,079
so

1320
00:53:49,040 --> 00:53:54,160
now we prove that

1321
00:53:52,079 --> 00:53:56,480
if you already know some language in p

1322
00:53:54,160 --> 00:53:58,720
and another language can be polynomial

1323
00:53:56,480 --> 00:54:00,000
time reducible to that language

1324
00:53:58,720 --> 00:54:02,240
then

1325
00:54:00,000 --> 00:54:05,040
the language that

1326
00:54:02,240 --> 00:54:08,040
the other language is in p2

1327
00:54:05,040 --> 00:54:08,040
okay

1328
00:54:13,359 --> 00:54:15,440
you

