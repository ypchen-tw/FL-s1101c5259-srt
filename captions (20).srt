1
00:00:01,280 --> 00:00:04,640
here comes uh chapter 3

2
00:00:03,679 --> 00:00:06,879
the

3
00:00:04,640 --> 00:00:09,200
church to win thesis

4
00:00:06,879 --> 00:00:12,080
well uh in the beginning of our course

5
00:00:09,200 --> 00:00:15,839
we are talk we were talking about

6
00:00:12,080 --> 00:00:18,160
this course is about study

7
00:00:15,839 --> 00:00:20,080
studying

8
00:00:18,160 --> 00:00:21,520
the limitation and the capability of

9
00:00:20,080 --> 00:00:22,480
computation

10
00:00:21,520 --> 00:00:25,680
and

11
00:00:22,480 --> 00:00:28,240
in order to do that we need to introduce

12
00:00:25,680 --> 00:00:29,679
the definition of computation

13
00:00:28,240 --> 00:00:32,079
and

14
00:00:29,679 --> 00:00:34,880
also in order to to do that we

15
00:00:32,079 --> 00:00:37,600
introduced computational models and then

16
00:00:34,880 --> 00:00:37,600
we said that

17
00:00:37,680 --> 00:00:41,840
since we

18
00:00:39,440 --> 00:00:44,559
it is kind of difficult

19
00:00:41,840 --> 00:00:45,360
to define computation directly

20
00:00:44,559 --> 00:00:47,120
we

21
00:00:45,360 --> 00:00:51,039
define

22
00:00:47,120 --> 00:00:52,800
models because we can define models

23
00:00:51,039 --> 00:00:56,640
pretty much

24
00:00:52,800 --> 00:00:59,039
very precise precisely then

25
00:00:56,640 --> 00:01:01,600
we can uh

26
00:00:59,039 --> 00:01:04,640
consider that the

27
00:01:01,600 --> 00:01:06,159
things these computational models do

28
00:01:04,640 --> 00:01:08,960
is computation

29
00:01:06,159 --> 00:01:11,119
okay the thing these

30
00:01:08,960 --> 00:01:12,479
these computational models do is

31
00:01:11,119 --> 00:01:14,720
computation

32
00:01:12,479 --> 00:01:16,400
and

33
00:01:14,720 --> 00:01:19,200
to

34
00:01:16,400 --> 00:01:22,240
get ourselves familiar

35
00:01:19,200 --> 00:01:24,560
familiar right with the concept and the

36
00:01:22,240 --> 00:01:28,000
use of computational models

37
00:01:24,560 --> 00:01:30,560
we introduced uh final automata in

38
00:01:28,000 --> 00:01:32,479
chapter one and the context free grammar

39
00:01:30,560 --> 00:01:36,159
in chapter two

40
00:01:32,479 --> 00:01:37,439
as actually as practice and also as uh

41
00:01:36,159 --> 00:01:40,320
foundations

42
00:01:37,439 --> 00:01:42,079
for our

43
00:01:40,320 --> 00:01:44,880
later

44
00:01:42,079 --> 00:01:47,280
mathematical development okay

45
00:01:44,880 --> 00:01:50,159
so now in chapter 3

46
00:01:47,280 --> 00:01:50,159
we finally

47
00:01:51,759 --> 00:01:55,360
enter the

48
00:01:53,759 --> 00:01:57,439
real uh

49
00:01:55,360 --> 00:01:59,680
and use the real thing

50
00:01:57,439 --> 00:02:00,640
uh regarding computation which is tui

51
00:01:59,680 --> 00:02:02,399
machine

52
00:02:00,640 --> 00:02:04,240
okay turing machines

53
00:02:02,399 --> 00:02:07,040
and we

54
00:02:04,240 --> 00:02:08,720
we do all this based on the

55
00:02:07,040 --> 00:02:12,160
concept of

56
00:02:08,720 --> 00:02:14,319
here the church tyrion thesis okay what

57
00:02:12,160 --> 00:02:17,120
is church during thesis

58
00:02:14,319 --> 00:02:19,520
basically it is uh

59
00:02:17,120 --> 00:02:20,840
it is a hypothesis that

60
00:02:19,520 --> 00:02:25,040
we

61
00:02:20,840 --> 00:02:26,640
think intuitive notions of algorithms

62
00:02:25,040 --> 00:02:28,800
or actually

63
00:02:26,640 --> 00:02:30,319
what the computation is

64
00:02:28,800 --> 00:02:32,720
equals

65
00:02:30,319 --> 00:02:36,319
turing machines okay or two machine

66
00:02:32,720 --> 00:02:37,440
algorithms as described here okay that

67
00:02:36,319 --> 00:02:38,720
is

68
00:02:37,440 --> 00:02:41,040
all what

69
00:02:38,720 --> 00:02:43,040
computation can do

70
00:02:41,040 --> 00:02:44,720
can be done

71
00:02:43,040 --> 00:02:46,560
by turing machines

72
00:02:44,720 --> 00:02:48,879
and vice versa

73
00:02:46,560 --> 00:02:51,760
what turing machines

74
00:02:48,879 --> 00:02:53,120
can do is computation

75
00:02:51,760 --> 00:02:54,800
that's what we

76
00:02:53,120 --> 00:02:58,000
believe okay

77
00:02:54,800 --> 00:03:01,840
and it is not a mathematical statement

78
00:02:58,000 --> 00:03:03,280
so uh you can you cannot you cannot

79
00:03:01,840 --> 00:03:04,720
treat

80
00:03:03,280 --> 00:03:07,519
it as

81
00:03:04,720 --> 00:03:11,200
a theorem or something it is a

82
00:03:07,519 --> 00:03:15,760
hypothesis it is a thesis that

83
00:03:11,200 --> 00:03:16,959
we think we consider we believe that

84
00:03:15,760 --> 00:03:20,239
computation

85
00:03:16,959 --> 00:03:22,000
is what two machines can do and

86
00:03:20,239 --> 00:03:23,120
all turing machine

87
00:03:22,000 --> 00:03:24,640
can do

88
00:03:23,120 --> 00:03:26,159
is computation

89
00:03:24,640 --> 00:03:28,480
okay

90
00:03:26,159 --> 00:03:31,680
so we transfer

91
00:03:28,480 --> 00:03:34,159
in a way we transfer the discussion

92
00:03:31,680 --> 00:03:35,519
regarding computation on two turing

93
00:03:34,159 --> 00:03:36,879
machines

94
00:03:35,519 --> 00:03:38,159
and

95
00:03:36,879 --> 00:03:40,080
by

96
00:03:38,159 --> 00:03:43,040
discussing the capability and the

97
00:03:40,080 --> 00:03:45,840
limitation of turing machines

98
00:03:43,040 --> 00:03:47,840
we think the result we think the

99
00:03:45,840 --> 00:03:49,360
conclusions

100
00:03:47,840 --> 00:03:51,760
are

101
00:03:49,360 --> 00:03:53,200
applicable to

102
00:03:51,760 --> 00:03:55,200
computation

103
00:03:53,200 --> 00:03:56,640
to what we want to

104
00:03:55,200 --> 00:03:57,760
understand

105
00:03:56,640 --> 00:03:58,560
okay

106
00:03:57,760 --> 00:04:01,840
so

107
00:03:58,560 --> 00:04:01,840
is there any other

108
00:04:02,480 --> 00:04:05,599
is there any other

109
00:04:05,680 --> 00:04:10,959
computational models

110
00:04:08,239 --> 00:04:14,080
equivalent to turn machines

111
00:04:10,959 --> 00:04:17,120
of course there are

112
00:04:14,080 --> 00:04:20,160
for example lambda calculus actually

113
00:04:17,120 --> 00:04:20,959
proposed by church okay

114
00:04:20,160 --> 00:04:23,360
see

115
00:04:20,959 --> 00:04:25,919
the church to read theses

116
00:04:23,360 --> 00:04:26,960
land of calculus it was proposed by

117
00:04:25,919 --> 00:04:30,960
church

118
00:04:26,960 --> 00:04:33,520
and later they proved that

119
00:04:30,960 --> 00:04:36,080
lambda calculus and the framework of

120
00:04:33,520 --> 00:04:38,000
london calculus and the two machines are

121
00:04:36,080 --> 00:04:40,320
equivalent

122
00:04:38,000 --> 00:04:40,320
then

123
00:04:41,440 --> 00:04:45,040
currently

124
00:04:43,120 --> 00:04:46,240
in computer science we

125
00:04:45,040 --> 00:04:48,639
use

126
00:04:46,240 --> 00:04:50,000
turing machines as our computational

127
00:04:48,639 --> 00:04:51,040
models

128
00:04:50,000 --> 00:04:52,800
uh

129
00:04:51,040 --> 00:04:56,720
more often because

130
00:04:52,800 --> 00:04:58,160
the operations of turin machines

131
00:04:56,720 --> 00:05:00,560
are uh

132
00:04:58,160 --> 00:05:01,600
closer to what we have

133
00:05:00,560 --> 00:05:03,759
uh

134
00:05:01,600 --> 00:05:06,720
to what we have

135
00:05:03,759 --> 00:05:08,960
right now like uh desktop new notebook

136
00:05:06,720 --> 00:05:12,479
computers or something like that or the

137
00:05:08,960 --> 00:05:13,199
tablet even the mobile phone you have

138
00:05:12,479 --> 00:05:16,320
the

139
00:05:13,199 --> 00:05:17,919
underlying hardware the operations are

140
00:05:16,320 --> 00:05:22,000
closer to

141
00:05:17,919 --> 00:05:23,280
touring machines so that's why

142
00:05:22,000 --> 00:05:25,039
in computer science

143
00:05:23,280 --> 00:05:26,800
uh most of time we talk about

144
00:05:25,039 --> 00:05:28,080
computational models we talk about

145
00:05:26,800 --> 00:05:29,039
turing machines

146
00:05:28,080 --> 00:05:31,120
okay

147
00:05:29,039 --> 00:05:33,199
so again

148
00:05:31,120 --> 00:05:34,000
church tuning thesis

149
00:05:33,199 --> 00:05:37,840
into

150
00:05:34,000 --> 00:05:41,360
intuitive notion of algorithms

151
00:05:37,840 --> 00:05:41,360
turing machine algorithms

152
00:05:43,759 --> 00:05:48,639
now think about

153
00:05:46,240 --> 00:05:51,280
uh finite automata and

154
00:05:48,639 --> 00:05:52,400
push down with time time first

155
00:05:51,280 --> 00:05:54,560
uh

156
00:05:52,400 --> 00:05:57,919
basically finite automata

157
00:05:54,560 --> 00:05:59,039
has finite control right what is finite

158
00:05:57,919 --> 00:06:02,880
control

159
00:05:59,039 --> 00:06:04,880
finite control basically uh consists of

160
00:06:02,880 --> 00:06:08,800
a finite

161
00:06:04,880 --> 00:06:10,240
set of string a set of states and it can

162
00:06:08,800 --> 00:06:11,039
process

163
00:06:10,240 --> 00:06:13,759
uh

164
00:06:11,039 --> 00:06:16,240
a set of finite symbols

165
00:06:13,759 --> 00:06:18,720
since the state and the symbols are

166
00:06:16,240 --> 00:06:21,120
finite the transition function the

167
00:06:18,720 --> 00:06:23,039
entries of the number of entries of

168
00:06:21,120 --> 00:06:25,840
transition function

169
00:06:23,039 --> 00:06:27,039
is also finite

170
00:06:25,840 --> 00:06:28,319
right

171
00:06:27,039 --> 00:06:30,080
and

172
00:06:28,319 --> 00:06:32,960
for

173
00:06:30,080 --> 00:06:34,560
let's say deterministic finite automata

174
00:06:32,960 --> 00:06:36,000
there is no

175
00:06:34,560 --> 00:06:37,440
memory

176
00:06:36,000 --> 00:06:39,919
of course you can

177
00:06:37,440 --> 00:06:41,600
in a way you can think of states

178
00:06:39,919 --> 00:06:42,560
as memory

179
00:06:41,600 --> 00:06:45,600
but

180
00:06:42,560 --> 00:06:49,120
you actually had

181
00:06:45,600 --> 00:06:51,120
you actually have firstly finite state

182
00:06:49,120 --> 00:06:53,199
and

183
00:06:51,120 --> 00:06:55,440
when the machine

184
00:06:53,199 --> 00:06:57,599
is defined

185
00:06:55,440 --> 00:07:00,000
basically the

186
00:06:57,599 --> 00:07:00,000
state

187
00:07:00,080 --> 00:07:06,960
the states are not very similar to what

188
00:07:03,520 --> 00:07:08,639
we think about uh storage or memory so

189
00:07:06,960 --> 00:07:10,400
usually we

190
00:07:08,639 --> 00:07:13,520
consider

191
00:07:10,400 --> 00:07:16,720
finite automata a memory less machine

192
00:07:13,520 --> 00:07:18,960
okay it has finite control but there is

193
00:07:16,720 --> 00:07:18,960
no

194
00:07:19,440 --> 00:07:23,280
let's say

195
00:07:21,280 --> 00:07:26,319
programmers

196
00:07:23,280 --> 00:07:28,800
do not have the

197
00:07:26,319 --> 00:07:31,280
do not do not have a

198
00:07:28,800 --> 00:07:33,520
convenient way to

199
00:07:31,280 --> 00:07:36,560
write or read

200
00:07:33,520 --> 00:07:37,680
on some storage so

201
00:07:36,560 --> 00:07:40,319
they are

202
00:07:37,680 --> 00:07:44,479
they have only finite controls

203
00:07:40,319 --> 00:07:48,400
and for pda you can think of pda is

204
00:07:44,479 --> 00:07:51,039
these pdas are interfaced with

205
00:07:48,400 --> 00:07:53,440
stake with a stake right

206
00:07:51,039 --> 00:07:54,800
and the stake is basically

207
00:07:53,440 --> 00:07:57,840
unlimited

208
00:07:54,800 --> 00:08:00,240
memory okay unlimited memory

209
00:07:57,840 --> 00:08:02,080
because we say that okay you can

210
00:08:00,240 --> 00:08:04,560
have infinite

211
00:08:02,080 --> 00:08:06,639
space for on the state

212
00:08:04,560 --> 00:08:11,199
so that's why

213
00:08:06,639 --> 00:08:13,280
pda can recognize languages like uh 0 n

214
00:08:11,199 --> 00:08:17,280
1 n and

215
00:08:13,280 --> 00:08:20,560
greater than or equal to 0 right

216
00:08:17,280 --> 00:08:24,479
why it can do that but dfa or nfa can't

217
00:08:20,560 --> 00:08:28,319
because pdas have unlimited

218
00:08:24,479 --> 00:08:30,240
stake unlimited uh memory but such a

219
00:08:28,319 --> 00:08:33,519
memory is

220
00:08:30,240 --> 00:08:35,680
restricted okay restricted because for

221
00:08:33,519 --> 00:08:37,919
stake you can only

222
00:08:35,680 --> 00:08:39,680
do push and pop

223
00:08:37,919 --> 00:08:42,560
so that would be a

224
00:08:39,680 --> 00:08:46,399
less in first out or you say first in

225
00:08:42,560 --> 00:08:48,560
less out style it is restricted

226
00:08:46,399 --> 00:08:49,959
okay so two machines

227
00:08:48,560 --> 00:08:53,200
has

228
00:08:49,959 --> 00:08:54,399
unrestricted memory that means

229
00:08:53,200 --> 00:08:56,000
it has

230
00:08:54,399 --> 00:08:59,120
some

231
00:08:56,000 --> 00:09:02,160
storage and you can go

232
00:08:59,120 --> 00:09:05,040
you can read any position

233
00:09:02,160 --> 00:09:08,640
from the storage and write

234
00:09:05,040 --> 00:09:10,800
data onto the storage so that's why it

235
00:09:08,640 --> 00:09:13,600
is unrestricted memory you can go

236
00:09:10,800 --> 00:09:17,920
anywhere you don't need to like stack

237
00:09:13,600 --> 00:09:19,440
okay you you cannot directly access some

238
00:09:17,920 --> 00:09:23,200
position of

239
00:09:19,440 --> 00:09:26,240
the data you already stored okay

240
00:09:23,200 --> 00:09:26,240
so imagine that

241
00:09:26,320 --> 00:09:31,200
if we have uh

242
00:09:29,120 --> 00:09:34,720
if we have some

243
00:09:31,200 --> 00:09:38,160
property if we have a machine with the

244
00:09:34,720 --> 00:09:40,399
following property like uh you can

245
00:09:38,160 --> 00:09:42,000
you can write down

246
00:09:40,399 --> 00:09:45,200
let's model the

247
00:09:42,000 --> 00:09:48,720
memory or storage as a tape

248
00:09:45,200 --> 00:09:51,920
okay that's a you know model

249
00:09:48,720 --> 00:09:53,839
that's uh conceptualize the memory or

250
00:09:51,920 --> 00:09:56,240
storage as a tape

251
00:09:53,839 --> 00:09:57,920
then you have

252
00:09:56,240 --> 00:09:59,040
a lot of

253
00:09:57,920 --> 00:10:00,080
blank

254
00:09:59,040 --> 00:10:01,040
space

255
00:10:00,080 --> 00:10:02,640
each

256
00:10:01,040 --> 00:10:05,839
box you can

257
00:10:02,640 --> 00:10:08,399
put one symbol on it into it

258
00:10:05,839 --> 00:10:11,680
and you can write down the tape and read

259
00:10:08,399 --> 00:10:15,440
from it like you have a reading uh you

260
00:10:11,680 --> 00:10:18,640
have a head okay you have a head

261
00:10:15,440 --> 00:10:20,160
on the position of the head of the head

262
00:10:18,640 --> 00:10:21,920
you can

263
00:10:20,160 --> 00:10:25,200
write a symbol

264
00:10:21,920 --> 00:10:26,000
or read a symbol okay and the head can

265
00:10:25,200 --> 00:10:27,760
move

266
00:10:26,000 --> 00:10:29,440
right and

267
00:10:27,760 --> 00:10:32,560
left and right

268
00:10:29,440 --> 00:10:36,560
the tape is infinite okay so you have

269
00:10:32,560 --> 00:10:39,760
infinite uh spaces to prove to

270
00:10:36,560 --> 00:10:39,760
save or to

271
00:10:40,000 --> 00:10:43,440
uh to read from the memory

272
00:10:42,480 --> 00:10:44,880
and

273
00:10:43,440 --> 00:10:48,160
then

274
00:10:44,880 --> 00:10:49,440
the machine well

275
00:10:48,160 --> 00:10:51,440
the the

276
00:10:49,440 --> 00:10:54,160
operation of the machine is

277
00:10:51,440 --> 00:10:54,160
mostly like

278
00:10:54,560 --> 00:11:00,880
dfa pdas it will accept or reject a

279
00:10:58,640 --> 00:11:03,519
string but

280
00:11:00,880 --> 00:11:06,560
it is slightly different when we are

281
00:11:03,519 --> 00:11:10,320
talking about tuning machine because for

282
00:11:06,560 --> 00:11:12,959
dfa nfa or pda you can think of you have

283
00:11:10,320 --> 00:11:14,880
a input machine sorry input

284
00:11:12,959 --> 00:11:16,399
input string somewhere

285
00:11:14,880 --> 00:11:19,200
and every time

286
00:11:16,399 --> 00:11:21,120
the machine gets one symbol out of the

287
00:11:19,200 --> 00:11:23,760
input string

288
00:11:21,120 --> 00:11:26,839
that symbol will be consumed

289
00:11:23,760 --> 00:11:30,480
right and only

290
00:11:26,839 --> 00:11:32,720
when the input strings are all

291
00:11:30,480 --> 00:11:34,399
processed the symbols of input strings

292
00:11:32,720 --> 00:11:36,640
are all processed

293
00:11:34,399 --> 00:11:39,760
we then talk about

294
00:11:36,640 --> 00:11:42,240
uh accept or or not accept

295
00:11:39,760 --> 00:11:45,040
but that's different for from two

296
00:11:42,240 --> 00:11:48,000
machines for two machines it

297
00:11:45,040 --> 00:11:48,000
it works like

298
00:11:48,959 --> 00:11:54,399
you put your input on the tape

299
00:11:52,720 --> 00:11:57,760
before

300
00:11:54,399 --> 00:11:58,880
booting the machine okay like this

301
00:11:57,760 --> 00:12:01,440
so

302
00:11:58,880 --> 00:12:03,519
each tape

303
00:12:01,440 --> 00:12:05,760
space like this

304
00:12:03,519 --> 00:12:05,760
okay

305
00:12:08,880 --> 00:12:11,839
then

306
00:12:12,480 --> 00:12:16,800
then

307
00:12:14,000 --> 00:12:20,480
the head position is at the

308
00:12:16,800 --> 00:12:22,320
start of the input string

309
00:12:20,480 --> 00:12:26,480
and then you can

310
00:12:22,320 --> 00:12:26,480
let's assume that we have a

311
00:12:27,680 --> 00:12:31,680
we have a turing machine or we have a

312
00:12:29,680 --> 00:12:34,399
machine which can do

313
00:12:31,680 --> 00:12:35,519
the uh four

314
00:12:34,399 --> 00:12:36,800
four

315
00:12:35,519 --> 00:12:38,880
operations

316
00:12:36,800 --> 00:12:40,639
listed here then

317
00:12:38,880 --> 00:12:42,800
we can think of that

318
00:12:40,639 --> 00:12:46,000
when we read zero

319
00:12:42,800 --> 00:12:46,800
when we read the tape and we find that

320
00:12:46,000 --> 00:12:49,600
the

321
00:12:46,800 --> 00:12:51,760
symbol on the on this tape

322
00:12:49,600 --> 00:12:53,200
on this

323
00:12:51,760 --> 00:12:54,560
down on this

324
00:12:53,200 --> 00:12:57,120
space

325
00:12:54,560 --> 00:12:59,760
is zero then

326
00:12:57,120 --> 00:13:02,560
we move the head

327
00:12:59,760 --> 00:13:02,560
close the

328
00:13:04,000 --> 00:13:07,040
line here

329
00:13:05,200 --> 00:13:09,040
because

330
00:13:07,040 --> 00:13:11,519
if we want to

331
00:13:09,040 --> 00:13:12,880
accept strings like

332
00:13:11,519 --> 00:13:15,600
this

333
00:13:12,880 --> 00:13:17,120
you have some zero one string

334
00:13:15,600 --> 00:13:19,360
and

335
00:13:17,120 --> 00:13:20,800
you have a separator

336
00:13:19,360 --> 00:13:24,399
here and

337
00:13:20,800 --> 00:13:27,760
the same01 strings

338
00:13:24,399 --> 00:13:29,040
you can easily prove that this language

339
00:13:27,760 --> 00:13:31,920
is not

340
00:13:29,040 --> 00:13:31,920
regular language

341
00:13:32,000 --> 00:13:36,079
and this language

342
00:13:34,959 --> 00:13:39,839
is not

343
00:13:36,079 --> 00:13:42,160
context-free language either okay

344
00:13:39,839 --> 00:13:44,880
but we can use

345
00:13:42,160 --> 00:13:47,600
the model of turing machine to

346
00:13:44,880 --> 00:13:50,880
recognize such a language easily because

347
00:13:47,600 --> 00:13:52,880
when you read 0 like this example

348
00:13:50,880 --> 00:13:54,240
you just move the head across the

349
00:13:52,880 --> 00:13:55,279
separator

350
00:13:54,240 --> 00:13:58,320
and

351
00:13:55,279 --> 00:14:01,600
oh sorry when you read 0 you just

352
00:13:58,320 --> 00:14:04,160
change it to something mark

353
00:14:01,600 --> 00:14:07,199
some mark to indicate that you have

354
00:14:04,160 --> 00:14:08,639
already processed this symbol and then

355
00:14:07,199 --> 00:14:11,760
you when

356
00:14:08,639 --> 00:14:13,760
you you can go across the separator and

357
00:14:11,760 --> 00:14:14,880
read this symbol

358
00:14:13,760 --> 00:14:18,720
okay

359
00:14:14,880 --> 00:14:20,800
and if it is not a zero then you reject

360
00:14:18,720 --> 00:14:21,680
you reject the string because it cannot

361
00:14:20,800 --> 00:14:23,920
be

362
00:14:21,680 --> 00:14:26,079
like this format right

363
00:14:23,920 --> 00:14:29,440
if it is zero

364
00:14:26,079 --> 00:14:32,320
then you change the symbol to

365
00:14:29,440 --> 00:14:34,800
like x here that means this symbol has

366
00:14:32,320 --> 00:14:37,040
been processed

367
00:14:34,800 --> 00:14:40,959
then you go back

368
00:14:37,040 --> 00:14:43,199
you move the head back to

369
00:14:40,959 --> 00:14:44,880
less position

370
00:14:43,199 --> 00:14:47,600
because you know

371
00:14:44,880 --> 00:14:50,560
this symbol has been processed so you

372
00:14:47,600 --> 00:14:53,279
when he you go here and check what the

373
00:14:50,560 --> 00:14:54,880
symbol is so it is one

374
00:14:53,279 --> 00:14:57,680
then

375
00:14:54,880 --> 00:15:00,959
mark it processed then go

376
00:14:57,680 --> 00:15:04,079
to go acro

377
00:15:00,959 --> 00:15:07,440
across the separator then

378
00:15:04,079 --> 00:15:10,079
read the first unprocessed symbol right

379
00:15:07,440 --> 00:15:13,600
if it is not one you reject you say that

380
00:15:10,079 --> 00:15:15,040
it okay this string is not what i want

381
00:15:13,600 --> 00:15:16,000
it is one

382
00:15:15,040 --> 00:15:18,880
then

383
00:15:16,000 --> 00:15:21,680
you go back

384
00:15:18,880 --> 00:15:25,040
sorry let's try this

385
00:15:21,680 --> 00:15:29,360
it is one then you go back

386
00:15:25,040 --> 00:15:31,759
here then reach next unprocessed

387
00:15:29,360 --> 00:15:35,279
symbol one okay

388
00:15:31,759 --> 00:15:39,440
across the separator and

389
00:15:35,279 --> 00:15:40,639
and read this yes yes it is one

390
00:15:39,440 --> 00:15:42,800
and

391
00:15:40,639 --> 00:15:46,800
go back to this

392
00:15:42,800 --> 00:15:49,360
final last process the symbol then read

393
00:15:46,800 --> 00:15:50,880
next on process symbol

394
00:15:49,360 --> 00:15:52,240
0

395
00:15:50,880 --> 00:15:55,759
then go here

396
00:15:52,240 --> 00:15:58,720
0 okay go back to here

397
00:15:55,759 --> 00:16:01,199
then next on process symbol

398
00:15:58,720 --> 00:16:02,880
you go back and forth go back and forth

399
00:16:01,199 --> 00:16:05,040
then finally

400
00:16:02,880 --> 00:16:06,000
you will meet blank

401
00:16:05,040 --> 00:16:07,600
okay

402
00:16:06,000 --> 00:16:09,199
this means

403
00:16:07,600 --> 00:16:10,399
that uh

404
00:16:09,199 --> 00:16:13,920
type space

405
00:16:10,399 --> 00:16:15,680
there is no symbol stored on that type

406
00:16:13,920 --> 00:16:18,399
space

407
00:16:15,680 --> 00:16:20,959
okay then you know

408
00:16:18,399 --> 00:16:24,800
there is no this uh

409
00:16:20,959 --> 00:16:24,800
there's no unmatched symbol

410
00:16:25,199 --> 00:16:30,399
on the left and the right of the

411
00:16:27,600 --> 00:16:33,839
separator that means

412
00:16:30,399 --> 00:16:34,839
this part and this part

413
00:16:33,839 --> 00:16:37,920
are

414
00:16:34,839 --> 00:16:39,600
identical so you accept

415
00:16:37,920 --> 00:16:42,560
the string

416
00:16:39,600 --> 00:16:45,680
okay so as long as we have a machine

417
00:16:42,560 --> 00:16:47,680
which is capable of you know the four

418
00:16:45,680 --> 00:16:50,160
operations here write down the tape and

419
00:16:47,680 --> 00:16:52,639
reframe it move the head to the left and

420
00:16:50,160 --> 00:16:56,320
to the right and you have infinite

421
00:16:52,639 --> 00:16:57,440
memory which is conceptualized as a tape

422
00:16:56,320 --> 00:16:59,040
and then

423
00:16:57,440 --> 00:17:01,680
you

424
00:16:59,040 --> 00:17:03,600
put the input string on the tape then

425
00:17:01,680 --> 00:17:05,280
put the machine

426
00:17:03,600 --> 00:17:07,600
and since

427
00:17:05,280 --> 00:17:09,839
since the input string is on the tape

428
00:17:07,600 --> 00:17:11,280
it's not somewhere and you consume the

429
00:17:09,839 --> 00:17:13,360
symbol like

430
00:17:11,280 --> 00:17:16,319
we were doing for

431
00:17:13,360 --> 00:17:19,520
a final automata or a pda

432
00:17:16,319 --> 00:17:22,240
too much the model to machine reject or

433
00:17:19,520 --> 00:17:26,640
accept the string immediately

434
00:17:22,240 --> 00:17:26,640
okay immediately so it's not

435
00:17:26,959 --> 00:17:29,840
the same as we

436
00:17:28,640 --> 00:17:31,120
have in

437
00:17:29,840 --> 00:17:33,440
dfa or

438
00:17:31,120 --> 00:17:35,600
peas

439
00:17:33,440 --> 00:17:35,600
so

440
00:17:37,200 --> 00:17:42,480
let's introduce the formal definition of

441
00:17:39,280 --> 00:17:43,600
a tube machine first then we

442
00:17:42,480 --> 00:17:46,240
start to

443
00:17:43,600 --> 00:17:49,679
discuss something regarding two machines

444
00:17:46,240 --> 00:17:52,720
so a tool machine is a seven tuple okay

445
00:17:49,679 --> 00:17:53,600
looks like look looks like many

446
00:17:52,720 --> 00:17:56,160
uh

447
00:17:53,600 --> 00:18:00,720
components but it's actually the same

448
00:17:56,160 --> 00:18:03,919
thing as pds or dfa okay so the uh first

449
00:18:00,720 --> 00:18:06,080
component is a finite finite set of

450
00:18:03,919 --> 00:18:08,080
states okay it's the same you have a

451
00:18:06,080 --> 00:18:10,799
state state

452
00:18:08,080 --> 00:18:14,559
and the second one is the input alphabet

453
00:18:10,799 --> 00:18:16,799
okay so the language compo is composed

454
00:18:14,559 --> 00:18:18,640
of input alphabet

455
00:18:16,799 --> 00:18:21,360
then we

456
00:18:18,640 --> 00:18:24,960
we require that

457
00:18:21,360 --> 00:18:24,960
the input input alphabet

458
00:18:25,280 --> 00:18:29,280
do not contain the blank symbol

459
00:18:28,480 --> 00:18:31,280
okay

460
00:18:29,280 --> 00:18:35,200
you can think of that there is a very

461
00:18:31,280 --> 00:18:37,440
special symbol we reserved

462
00:18:35,200 --> 00:18:39,200
for the use of

463
00:18:37,440 --> 00:18:41,440
tape blank

464
00:18:39,200 --> 00:18:43,280
okay so you don't have

465
00:18:41,440 --> 00:18:45,520
blank

466
00:18:43,280 --> 00:18:48,320
in your

467
00:18:45,520 --> 00:18:51,440
alphabet in your

468
00:18:48,320 --> 00:18:51,440
symbols to

469
00:18:52,240 --> 00:18:55,679
your

470
00:18:53,520 --> 00:19:00,000
symbols of your languages

471
00:18:55,679 --> 00:19:01,280
there is a special symbol blank symbol

472
00:19:00,000 --> 00:19:05,120
and then

473
00:19:01,280 --> 00:19:08,480
the third one is the tape alphabet

474
00:19:05,120 --> 00:19:11,600
okay what is table alphabet

475
00:19:08,480 --> 00:19:16,160
type alphabet

476
00:19:11,600 --> 00:19:20,080
type alphabet is the symbols which are

477
00:19:16,160 --> 00:19:23,559
which are which will be stored

478
00:19:20,080 --> 00:19:23,559
on the tape

479
00:19:30,080 --> 00:19:33,760
so

480
00:19:31,679 --> 00:19:36,480
like i said

481
00:19:33,760 --> 00:19:36,480
like i said

482
00:19:37,200 --> 00:19:42,320
the input strings

483
00:19:39,120 --> 00:19:43,600
will be put onto the tape

484
00:19:42,320 --> 00:19:46,080
then

485
00:19:43,600 --> 00:19:47,440
the machine will be booted up right

486
00:19:46,080 --> 00:19:50,720
so

487
00:19:47,440 --> 00:19:50,720
you will see that

488
00:19:51,120 --> 00:19:58,720
the input alphabet

489
00:19:53,360 --> 00:19:59,760
is a subset of stack sorry type alphabet

490
00:19:58,720 --> 00:20:00,640
okay

491
00:19:59,760 --> 00:20:04,559
and

492
00:20:00,640 --> 00:20:05,840
actually it's a proper subset because

493
00:20:04,559 --> 00:20:09,280
there will

494
00:20:05,840 --> 00:20:11,520
there must be at least one symbol

495
00:20:09,280 --> 00:20:14,400
in tape alphabet

496
00:20:11,520 --> 00:20:16,159
as the type blank symbol

497
00:20:14,400 --> 00:20:18,480
which is not

498
00:20:16,159 --> 00:20:19,520
which is not

499
00:20:18,480 --> 00:20:21,919
in

500
00:20:19,520 --> 00:20:23,440
input alphabet

501
00:20:21,919 --> 00:20:24,480
okay

502
00:20:23,440 --> 00:20:27,840
so

503
00:20:24,480 --> 00:20:29,280
for and other than this you can have uh

504
00:20:27,840 --> 00:20:31,520
your

505
00:20:29,280 --> 00:20:34,400
you what you can have the

506
00:20:31,520 --> 00:20:35,520
uh input alphabet you want and you can

507
00:20:34,400 --> 00:20:37,919
have

508
00:20:35,520 --> 00:20:40,080
more than one symbol in type alphabet

509
00:20:37,919 --> 00:20:42,000
which is not in the input alphabet

510
00:20:40,080 --> 00:20:44,960
that's no problem okay

511
00:20:42,000 --> 00:20:48,080
at least you you need you need at least

512
00:20:44,960 --> 00:20:51,520
one blank symbol as the special symbol

513
00:20:48,080 --> 00:20:52,720
which is not in input alphabet but in

514
00:20:51,520 --> 00:20:55,280
tape

515
00:20:52,720 --> 00:20:56,960
above it indicating

516
00:20:55,280 --> 00:20:58,400
the tape space

517
00:20:56,960 --> 00:21:00,320
which is not

518
00:20:58,400 --> 00:21:04,480
stored

519
00:21:00,320 --> 00:21:06,000
there is no input symbol stored on that

520
00:21:04,480 --> 00:21:09,679
type space

521
00:21:06,000 --> 00:21:12,480
okay that's the usage of a blank symbol

522
00:21:09,679 --> 00:21:14,240
and compared to

523
00:21:12,480 --> 00:21:17,520
stack alphabet

524
00:21:14,240 --> 00:21:20,720
of pds if you remember that uh for pds

525
00:21:17,520 --> 00:21:22,559
we also have stake of alphabet it's very

526
00:21:20,720 --> 00:21:25,679
similar because

527
00:21:22,559 --> 00:21:27,919
stack alphabet uh indicates what you can

528
00:21:25,679 --> 00:21:28,799
store on the stack

529
00:21:27,919 --> 00:21:31,280
right

530
00:21:28,799 --> 00:21:33,200
but you will you can

531
00:21:31,280 --> 00:21:34,080
easily see that

532
00:21:33,200 --> 00:21:36,000
for

533
00:21:34,080 --> 00:21:38,080
stick alphabet

534
00:21:36,000 --> 00:21:41,760
in pda

535
00:21:38,080 --> 00:21:43,679
basically there is no restriction

536
00:21:41,760 --> 00:21:46,000
for stack alphabet

537
00:21:43,679 --> 00:21:49,039
we don't even say that or you must have

538
00:21:46,000 --> 00:21:50,640
a dollar sign to indicate the end of

539
00:21:49,039 --> 00:21:52,080
stake because

540
00:21:50,640 --> 00:21:54,559
that part

541
00:21:52,080 --> 00:21:57,200
that part is not

542
00:21:54,559 --> 00:21:59,840
in it's not uh

543
00:21:57,200 --> 00:21:59,840
is not

544
00:22:00,159 --> 00:22:02,799
the

545
00:22:01,200 --> 00:22:05,360
theoretical

546
00:22:02,799 --> 00:22:06,720
is not part of the theoretical framework

547
00:22:05,360 --> 00:22:09,360
it's just a

548
00:22:06,720 --> 00:22:10,559
you know programming uh practice and the

549
00:22:09,360 --> 00:22:12,880
skills

550
00:22:10,559 --> 00:22:16,000
we usually do that because it's easier

551
00:22:12,880 --> 00:22:19,200
for us to write a program for pda

552
00:22:16,000 --> 00:22:21,440
to detect the end of stake but that's

553
00:22:19,200 --> 00:22:22,640
not required by the theoretical

554
00:22:21,440 --> 00:22:23,840
framework

555
00:22:22,640 --> 00:22:25,440
but here

556
00:22:23,840 --> 00:22:26,960
firstly

557
00:22:25,440 --> 00:22:28,320
blank symbol

558
00:22:26,960 --> 00:22:29,039
blank symbol

559
00:22:28,320 --> 00:22:30,960
in

560
00:22:29,039 --> 00:22:34,960
type alphabet

561
00:22:30,960 --> 00:22:37,679
not in input alphabet is required by the

562
00:22:34,960 --> 00:22:40,960
theoretical framework firstly

563
00:22:37,679 --> 00:22:42,240
secondly you will find that

564
00:22:40,960 --> 00:22:44,159
here we

565
00:22:42,240 --> 00:22:47,760
explicitly know that

566
00:22:44,159 --> 00:22:50,159
input alphabet must be a subset actually

567
00:22:47,760 --> 00:22:53,120
a proper subset of

568
00:22:50,159 --> 00:22:56,400
tab alphabet why because you need to put

569
00:22:53,120 --> 00:22:59,440
your input string onto the tape right

570
00:22:56,400 --> 00:23:03,039
and that is not true for pda because for

571
00:22:59,440 --> 00:23:06,840
the first example of pda

572
00:23:03,039 --> 00:23:08,720
our input alphabet is 0 1

573
00:23:06,840 --> 00:23:10,320
right

574
00:23:08,720 --> 00:23:11,600
and

575
00:23:10,320 --> 00:23:14,080
our

576
00:23:11,600 --> 00:23:16,880
stake alphabet what is that our stake

577
00:23:14,080 --> 00:23:19,440
alphabet is actually zero

578
00:23:16,880 --> 00:23:22,240
dollar sign

579
00:23:19,440 --> 00:23:25,120
right as i said dollar sign is what we

580
00:23:22,240 --> 00:23:27,840
want not required actually not required

581
00:23:25,120 --> 00:23:30,159
by framework but you can see that

582
00:23:27,840 --> 00:23:31,440
we have only zero

583
00:23:30,159 --> 00:23:34,159
in

584
00:23:31,440 --> 00:23:36,240
stack alphabet we don't have one and we

585
00:23:34,159 --> 00:23:39,200
don't need one

586
00:23:36,240 --> 00:23:42,080
why because input string is not

587
00:23:39,200 --> 00:23:43,679
required to be stored on the stack for

588
00:23:42,080 --> 00:23:46,000
that pda

589
00:23:43,679 --> 00:23:48,480
if you want to write out another pda

590
00:23:46,000 --> 00:23:52,640
with all the input alphabet that's

591
00:23:48,480 --> 00:23:55,440
that's fine that's okay but for pda

592
00:23:52,640 --> 00:23:57,840
there's no requirement for you to store

593
00:23:55,440 --> 00:24:00,000
all input symbols

594
00:23:57,840 --> 00:24:02,159
on the stack but

595
00:24:00,000 --> 00:24:05,440
for tuning machine you have to do that

596
00:24:02,159 --> 00:24:07,840
because your input string will be stored

597
00:24:05,440 --> 00:24:09,360
on the tape before the booting of the

598
00:24:07,840 --> 00:24:10,400
machine

599
00:24:09,360 --> 00:24:12,080
okay

600
00:24:10,400 --> 00:24:15,480
so that's a

601
00:24:12,080 --> 00:24:15,480
slight difference

602
00:24:19,440 --> 00:24:23,039
then

603
00:24:20,640 --> 00:24:25,360
you have a

604
00:24:23,039 --> 00:24:26,799
spatial state called

605
00:24:25,360 --> 00:24:29,919
star state

606
00:24:26,799 --> 00:24:32,400
which is in the

607
00:24:29,919 --> 00:24:33,520
state of states and

608
00:24:32,400 --> 00:24:34,880
you have

609
00:24:33,520 --> 00:24:36,720
one

610
00:24:34,880 --> 00:24:40,559
accept state

611
00:24:36,720 --> 00:24:41,679
and the one reject state okay

612
00:24:40,559 --> 00:24:43,919
so

613
00:24:41,679 --> 00:24:48,559
there are seven components for turing

614
00:24:43,919 --> 00:24:48,559
machine but of them you know are

615
00:24:49,120 --> 00:24:54,400
there is no

616
00:24:50,720 --> 00:24:57,200
new one here we we just separate all

617
00:24:54,400 --> 00:25:00,400
states here like you have a star state

618
00:24:57,200 --> 00:25:02,480
accept state and reject state okay

619
00:25:00,400 --> 00:25:06,000
and for the turing machine the

620
00:25:02,480 --> 00:25:06,000
transition of the turing machine

621
00:25:07,200 --> 00:25:11,679
is that uh you

622
00:25:09,520 --> 00:25:14,960
from uh

623
00:25:11,679 --> 00:25:17,200
from a state from a state reading the

624
00:25:14,960 --> 00:25:19,120
current symbol

625
00:25:17,200 --> 00:25:21,760
and then you transit

626
00:25:19,120 --> 00:25:25,679
from the state to

627
00:25:21,760 --> 00:25:27,120
probably the other state and you change

628
00:25:25,679 --> 00:25:28,480
you change

629
00:25:27,120 --> 00:25:31,600
the symbol you

630
00:25:28,480 --> 00:25:32,640
read at that exactly position

631
00:25:31,600 --> 00:25:34,400
and

632
00:25:32,640 --> 00:25:36,799
the head

633
00:25:34,400 --> 00:25:37,840
the reading uh

634
00:25:36,799 --> 00:25:38,640
the

635
00:25:37,840 --> 00:25:40,080
head

636
00:25:38,640 --> 00:25:43,279
the tape head

637
00:25:40,080 --> 00:25:46,080
can go left or go right

638
00:25:43,279 --> 00:25:47,200
okay go left and go right

639
00:25:46,080 --> 00:25:48,640
so

640
00:25:47,200 --> 00:25:52,559
it

641
00:25:48,640 --> 00:25:54,400
it is like that for example

642
00:25:52,559 --> 00:25:57,039
for example

643
00:25:54,400 --> 00:25:59,679
uh

644
00:25:57,039 --> 00:26:02,159
the location of the head is here then

645
00:25:59,679 --> 00:26:03,760
you read let's say a

646
00:26:02,159 --> 00:26:04,880
and currently

647
00:26:03,760 --> 00:26:06,880
it's q

648
00:26:04,880 --> 00:26:10,559
nine something like that

649
00:26:06,880 --> 00:26:11,520
then if there is a transition entry says

650
00:26:10,559 --> 00:26:13,520
that

651
00:26:11,520 --> 00:26:15,279
q9

652
00:26:13,520 --> 00:26:19,520
a

653
00:26:15,279 --> 00:26:21,440
you change to q11 and write b

654
00:26:19,520 --> 00:26:23,600
and go left

655
00:26:21,440 --> 00:26:25,200
then

656
00:26:23,600 --> 00:26:28,240
then

657
00:26:25,200 --> 00:26:31,120
you will change you will read you

658
00:26:28,240 --> 00:26:34,159
add q9 you read a

659
00:26:31,120 --> 00:26:35,919
then you change the a to b

660
00:26:34,159 --> 00:26:39,440
and then you becomes

661
00:26:35,919 --> 00:26:40,799
q11 and the head go

662
00:26:39,440 --> 00:26:44,000
left

663
00:26:40,799 --> 00:26:44,799
okay so the operation just as simple as

664
00:26:44,000 --> 00:26:47,440
this

665
00:26:44,799 --> 00:26:49,120
and according to the transition function

666
00:26:47,440 --> 00:26:50,159
the definition of the transition

667
00:26:49,120 --> 00:26:53,200
function

668
00:26:50,159 --> 00:26:55,600
you know that now

669
00:26:53,200 --> 00:26:57,440
what we are defining

670
00:26:55,600 --> 00:27:00,000
is a deterministic

671
00:26:57,440 --> 00:27:00,960
two machine deterministic turing machine

672
00:27:00,000 --> 00:27:04,000
because

673
00:27:00,960 --> 00:27:05,279
when you see state and the symbol you

674
00:27:04,000 --> 00:27:07,279
exactly

675
00:27:05,279 --> 00:27:09,679
go to

676
00:27:07,279 --> 00:27:12,880
this state and rewrite the symbol as

677
00:27:09,679 --> 00:27:16,159
this one and go left or right

678
00:27:12,880 --> 00:27:18,840
so that's a deterministic next

679
00:27:16,159 --> 00:27:21,919
next step

680
00:27:18,840 --> 00:27:24,399
okay so that's our uh

681
00:27:21,919 --> 00:27:25,200
trim machine in this textbook

682
00:27:24,399 --> 00:27:27,039
and

683
00:27:25,200 --> 00:27:29,440
i have to say that there are many

684
00:27:27,039 --> 00:27:31,679
fundamental

685
00:27:29,440 --> 00:27:31,679
uh

686
00:27:32,399 --> 00:27:37,840
type of two machines and uh what we are

687
00:27:36,000 --> 00:27:42,559
using here is that

688
00:27:37,840 --> 00:27:44,000
uh we assume that there is a single tape

689
00:27:42,559 --> 00:27:45,039
okay

690
00:27:44,000 --> 00:27:48,080
and

691
00:27:45,039 --> 00:27:50,880
we have a left hand

692
00:27:48,080 --> 00:27:51,840
yes the table is infinite but on the

693
00:27:50,880 --> 00:27:54,480
right

694
00:27:51,840 --> 00:27:56,640
so we have a left hand

695
00:27:54,480 --> 00:27:57,679
so we have a left-handed

696
00:27:56,640 --> 00:27:59,919
tape

697
00:27:57,679 --> 00:28:03,440
and infinite

698
00:27:59,919 --> 00:28:05,679
length of the length is infinite

699
00:28:03,440 --> 00:28:09,279
then

700
00:28:05,679 --> 00:28:11,520
for our turn machine the head starts at

701
00:28:09,279 --> 00:28:14,640
the first

702
00:28:11,520 --> 00:28:17,840
the first space and you

703
00:28:14,640 --> 00:28:18,880
in you put input

704
00:28:17,840 --> 00:28:21,279
string

705
00:28:18,880 --> 00:28:21,279
w

706
00:28:21,679 --> 00:28:26,720
on the tape before putting the machine

707
00:28:24,559 --> 00:28:29,279
and all other

708
00:28:26,720 --> 00:28:29,279
all other

709
00:28:29,520 --> 00:28:33,600
tape space are

710
00:28:31,120 --> 00:28:36,640
filled in

711
00:28:33,600 --> 00:28:40,080
blank symbol here like this then you put

712
00:28:36,640 --> 00:28:42,720
the machine so that that is the uh

713
00:28:40,080 --> 00:28:45,679
tim machine described or defined as the

714
00:28:42,720 --> 00:28:47,440
fundamental one in this textbook

715
00:28:45,679 --> 00:28:50,399
in other textbooks there are other

716
00:28:47,440 --> 00:28:52,320
variants okay

717
00:28:50,399 --> 00:28:54,799
for example

718
00:28:52,320 --> 00:28:54,799
there are

719
00:28:55,679 --> 00:28:59,120
for example there is a

720
00:28:57,279 --> 00:29:00,240
two machine

721
00:28:59,120 --> 00:29:01,120
with

722
00:29:00,240 --> 00:29:03,919
three

723
00:29:01,120 --> 00:29:03,919
left-handed

724
00:29:04,320 --> 00:29:07,679
tape

725
00:29:05,679 --> 00:29:10,559
so

726
00:29:07,679 --> 00:29:10,559
input string is

727
00:29:11,279 --> 00:29:16,240
stored on the first one

728
00:29:13,120 --> 00:29:18,640
and the last one used for output

729
00:29:16,240 --> 00:29:21,200
and you have you can do

730
00:29:18,640 --> 00:29:22,399
your your operation

731
00:29:21,200 --> 00:29:26,240
on this

732
00:29:22,399 --> 00:29:30,080
working tape as the second one

733
00:29:26,240 --> 00:29:32,000
so that's that's one one

734
00:29:30,080 --> 00:29:33,600
other fundamental

735
00:29:32,000 --> 00:29:36,480
type of turing machine

736
00:29:33,600 --> 00:29:38,840
or in other textbooks you have you know

737
00:29:36,480 --> 00:29:43,360
open ended

738
00:29:38,840 --> 00:29:45,840
tape you have uh left infinite right i'm

739
00:29:43,360 --> 00:29:48,880
sorry right beneath left infinite and

740
00:29:45,840 --> 00:29:50,640
your head is somewhere here and

741
00:29:48,880 --> 00:29:52,640
that's the

742
00:29:50,640 --> 00:29:55,440
input string

743
00:29:52,640 --> 00:29:58,640
it's also an uh

744
00:29:55,440 --> 00:30:01,200
a fundamental machine for some textbook

745
00:29:58,640 --> 00:30:03,600
basically all these are equivalents so

746
00:30:01,200 --> 00:30:05,840
we hear

747
00:30:03,600 --> 00:30:08,399
the author of our textbook the author of

748
00:30:05,840 --> 00:30:10,399
our textbook adopted

749
00:30:08,399 --> 00:30:13,520
this

750
00:30:10,399 --> 00:30:15,360
for simplicity okay actually they are

751
00:30:13,520 --> 00:30:17,360
not far from each other they are

752
00:30:15,360 --> 00:30:19,200
basically the same

753
00:30:17,360 --> 00:30:21,360
so again

754
00:30:19,200 --> 00:30:22,399
for the volatile machine we have right

755
00:30:21,360 --> 00:30:24,559
now

756
00:30:22,399 --> 00:30:26,559
have

757
00:30:24,559 --> 00:30:30,720
have a

758
00:30:26,559 --> 00:30:34,080
type of infinite length but left-handed

759
00:30:30,720 --> 00:30:34,080
and you are the

760
00:30:34,559 --> 00:30:39,440
initially the head is at let's say the

761
00:30:38,080 --> 00:30:40,960
first

762
00:30:39,440 --> 00:30:44,000
uh space

763
00:30:40,960 --> 00:30:46,320
then you put your input

764
00:30:44,000 --> 00:30:48,399
string on the tape

765
00:30:46,320 --> 00:30:50,320
then put the machine

766
00:30:48,399 --> 00:30:53,360
okay

767
00:30:50,320 --> 00:30:56,559
then to describe

768
00:30:53,360 --> 00:30:59,840
a tool machine or not describe after

769
00:30:56,559 --> 00:31:00,799
define the two machine you use it uh in

770
00:30:59,840 --> 00:31:04,880
action

771
00:31:00,799 --> 00:31:06,000
we can define configuration

772
00:31:04,880 --> 00:31:08,159
to

773
00:31:06,000 --> 00:31:10,320
depict to describe

774
00:31:08,159 --> 00:31:12,640
the two machine in action

775
00:31:10,320 --> 00:31:12,640
okay

776
00:31:12,720 --> 00:31:17,279
and if you look uh think back

777
00:31:15,919 --> 00:31:19,760
regarding

778
00:31:17,279 --> 00:31:21,120
the action machine actions

779
00:31:19,760 --> 00:31:24,320
let's say

780
00:31:21,120 --> 00:31:27,519
for dfa what do we need to know

781
00:31:24,320 --> 00:31:30,320
regarding the machine operation

782
00:31:27,519 --> 00:31:34,799
you need to know

783
00:31:30,320 --> 00:31:37,760
the remaining input string and also the

784
00:31:34,799 --> 00:31:41,919
state of the machine right for dfa as

785
00:31:37,760 --> 00:31:41,919
long as the state is the same

786
00:31:43,039 --> 00:31:46,880
you will get the same result for the

787
00:31:45,039 --> 00:31:49,840
same input

788
00:31:46,880 --> 00:31:52,320
right and for pda you know that

789
00:31:49,840 --> 00:31:55,679
in addition to

790
00:31:52,320 --> 00:31:59,200
state and input string you need to know

791
00:31:55,679 --> 00:32:02,000
the current content of stack

792
00:31:59,200 --> 00:32:04,399
because the content of deck

793
00:32:02,000 --> 00:32:07,039
will have influence on the result of

794
00:32:04,399 --> 00:32:07,039
computation

795
00:32:07,519 --> 00:32:11,440
and

796
00:32:09,360 --> 00:32:14,640
for turing machines we

797
00:32:11,440 --> 00:32:15,919
define a configuration

798
00:32:14,640 --> 00:32:18,880
to

799
00:32:15,919 --> 00:32:19,919
more precisely describe the whole thing

800
00:32:18,880 --> 00:32:22,080
that

801
00:32:19,919 --> 00:32:24,320
a configuration of a turing machine is

802
00:32:22,080 --> 00:32:25,919
considered

803
00:32:24,320 --> 00:32:27,279
is composed of

804
00:32:25,919 --> 00:32:30,640
current state

805
00:32:27,279 --> 00:32:33,440
see you know you must know

806
00:32:30,640 --> 00:32:36,480
the state the current state and then the

807
00:32:33,440 --> 00:32:38,880
current tape content okay

808
00:32:36,480 --> 00:32:40,640
well tab contents include the input

809
00:32:38,880 --> 00:32:43,840
stream and also

810
00:32:40,640 --> 00:32:45,760
anything you change you

811
00:32:43,840 --> 00:32:47,679
add

812
00:32:45,760 --> 00:32:51,679
along the process

813
00:32:47,679 --> 00:32:53,919
and then current head location

814
00:32:51,679 --> 00:32:53,919
okay

815
00:32:54,840 --> 00:33:03,519
so that represents the configuration of

816
00:32:58,720 --> 00:33:06,880
the tuning machine as q sorry uqv

817
00:33:03,519 --> 00:33:09,120
for state q current state okay current

818
00:33:06,880 --> 00:33:10,799
state and

819
00:33:09,120 --> 00:33:12,960
u and v

820
00:33:10,799 --> 00:33:15,279
u and v

821
00:33:12,960 --> 00:33:16,080
together

822
00:33:15,279 --> 00:33:18,480
u

823
00:33:16,080 --> 00:33:21,440
and v together is

824
00:33:18,480 --> 00:33:25,360
type contents okay then why do we

825
00:33:21,440 --> 00:33:30,080
separate umv because we want to

826
00:33:25,360 --> 00:33:31,840
represent location together so we put

827
00:33:30,080 --> 00:33:34,000
q

828
00:33:31,840 --> 00:33:37,600
onto

829
00:33:34,000 --> 00:33:38,720
the location of the head that means

830
00:33:37,600 --> 00:33:42,720
u

831
00:33:38,720 --> 00:33:44,399
is somewhere before the head

832
00:33:42,720 --> 00:33:45,279
and the v

833
00:33:44,399 --> 00:33:46,640
is

834
00:33:45,279 --> 00:33:49,760
somewhere

835
00:33:46,640 --> 00:33:49,760
at the head and

836
00:33:50,159 --> 00:33:54,720
you know the later part the right part

837
00:33:53,600 --> 00:33:55,919
of the

838
00:33:54,720 --> 00:33:59,360
head

839
00:33:55,919 --> 00:33:59,360
so we can represent

840
00:34:00,480 --> 00:34:03,600
a two machine

841
00:34:02,399 --> 00:34:07,840
states

842
00:34:03,600 --> 00:34:10,560
now okay the status of two machine like

843
00:34:07,840 --> 00:34:11,520
the type content actually

844
00:34:10,560 --> 00:34:12,320
is

845
00:34:11,520 --> 00:34:14,240
one

846
00:34:12,320 --> 00:34:17,359
zero one one

847
00:34:14,240 --> 00:34:21,359
zero one one one one and don't forget

848
00:34:17,359 --> 00:34:22,639
that you we actually have infinite blank

849
00:34:21,359 --> 00:34:24,639
okay

850
00:34:22,639 --> 00:34:27,359
we just you know

851
00:34:24,639 --> 00:34:27,359
don't write it

852
00:34:27,520 --> 00:34:30,639
we have infinite blank

853
00:34:29,679 --> 00:34:32,960
but

854
00:34:30,639 --> 00:34:35,839
everybody knows that so we

855
00:34:32,960 --> 00:34:35,839
you know just

856
00:34:36,240 --> 00:34:39,440
omit the part

857
00:34:38,560 --> 00:34:42,000
so

858
00:34:39,440 --> 00:34:46,240
if the head here

859
00:34:42,000 --> 00:34:49,760
that means next step is reading 0

860
00:34:46,240 --> 00:34:52,079
we put q7 which is the states

861
00:34:49,760 --> 00:34:52,079
here

862
00:34:52,320 --> 00:34:55,520
to indicate that

863
00:34:55,679 --> 00:35:00,320
we will read zero

864
00:34:58,560 --> 00:35:01,599
and that's

865
00:35:00,320 --> 00:35:02,560
v

866
00:35:01,599 --> 00:35:03,680
that's

867
00:35:02,560 --> 00:35:06,400
u

868
00:35:03,680 --> 00:35:08,960
so that's why we write

869
00:35:06,400 --> 00:35:10,079
the configuration of a turing machine

870
00:35:08,960 --> 00:35:10,880
like

871
00:35:10,079 --> 00:35:11,680
u

872
00:35:10,880 --> 00:35:12,800
q

873
00:35:11,680 --> 00:35:14,240
seven

874
00:35:12,800 --> 00:35:17,119
v

875
00:35:14,240 --> 00:35:19,839
okay like this one

876
00:35:17,119 --> 00:35:22,160
and you can see that we can

877
00:35:19,839 --> 00:35:23,440
write q70

878
00:35:22,160 --> 00:35:26,640
and

879
00:35:23,440 --> 00:35:28,240
call the transition function

880
00:35:26,640 --> 00:35:31,359
and you will get

881
00:35:28,240 --> 00:35:34,800
you know for example if your machine

882
00:35:31,359 --> 00:35:37,599
says okay that will be q9

883
00:35:34,800 --> 00:35:39,760
one and right

884
00:35:37,599 --> 00:35:43,760
then you know that

885
00:35:39,760 --> 00:35:46,400
this one zero one uh one zero one one q

886
00:35:43,760 --> 00:35:48,800
7 0 1 1 1 1

887
00:35:46,400 --> 00:35:50,079
will become what

888
00:35:48,800 --> 00:35:52,480
1

889
00:35:50,079 --> 00:35:53,520
0 1 1

890
00:35:52,480 --> 00:35:54,720
and

891
00:35:53,520 --> 00:35:55,920
since

892
00:35:54,720 --> 00:35:56,880
q 7

893
00:35:55,920 --> 00:36:00,400
0

894
00:35:56,880 --> 00:36:02,800
q q 7 will become q 9 and the 0 will be

895
00:36:00,400 --> 00:36:04,160
1 right and go to right right is this

896
00:36:02,800 --> 00:36:05,040
position

897
00:36:04,160 --> 00:36:09,599
so

898
00:36:05,040 --> 00:36:11,440
this 0 will be 1 then q 9

899
00:36:09,599 --> 00:36:13,680
1 1 1 1

900
00:36:11,440 --> 00:36:14,880
so

901
00:36:13,680 --> 00:36:17,200
that's the

902
00:36:14,880 --> 00:36:19,200
transition of the machine to be

903
00:36:17,200 --> 00:36:21,440
expressed as the transition of

904
00:36:19,200 --> 00:36:23,760
configurations

905
00:36:21,440 --> 00:36:26,400
okay

906
00:36:23,760 --> 00:36:29,599
so as a side note we can think of

907
00:36:26,400 --> 00:36:31,280
configuration uh as

908
00:36:29,599 --> 00:36:34,079
well as the

909
00:36:31,280 --> 00:36:35,280
snapshot of your virtual machines

910
00:36:34,079 --> 00:36:37,520
right

911
00:36:35,280 --> 00:36:40,720
it's kind of relatively easy to

912
00:36:37,520 --> 00:36:42,160
introduce the concepts these days

913
00:36:40,720 --> 00:36:43,920
because

914
00:36:42,160 --> 00:36:44,720
everybody has

915
00:36:43,920 --> 00:36:47,200
a

916
00:36:44,720 --> 00:36:48,960
twin machine to play you can have your

917
00:36:47,200 --> 00:36:50,800
hands on two machines

918
00:36:48,960 --> 00:36:52,839
and for tuning machine it's very

919
00:36:50,800 --> 00:36:55,040
convenient that you can do

920
00:36:52,839 --> 00:36:56,079
snapshot right

921
00:36:55,040 --> 00:36:58,240
then

922
00:36:56,079 --> 00:36:59,520
you can think of configuration is like a

923
00:36:58,240 --> 00:37:00,400
snapshot

924
00:36:59,520 --> 00:37:03,119
so

925
00:37:00,400 --> 00:37:05,280
you snapshot the machine then you know

926
00:37:03,119 --> 00:37:07,760
what is the next step and you do another

927
00:37:05,280 --> 00:37:09,520
snapshot or something like that or you

928
00:37:07,760 --> 00:37:12,480
have a notebook

929
00:37:09,520 --> 00:37:16,240
the hibernation is like saving a

930
00:37:12,480 --> 00:37:19,200
configuration so next time next time you

931
00:37:16,240 --> 00:37:24,079
can put up the machine and

932
00:37:19,200 --> 00:37:24,079
restore the configuration back to

933
00:37:24,880 --> 00:37:28,480
the moment you do the hibernation

934
00:37:27,680 --> 00:37:30,400
right

935
00:37:28,480 --> 00:37:33,200
okay

936
00:37:30,400 --> 00:37:33,200
so let's say

937
00:37:33,440 --> 00:37:38,000
if a turing machine can legally go from

938
00:37:35,760 --> 00:37:41,040
configuration c1

939
00:37:38,000 --> 00:37:44,079
to configuration c2 we said that

940
00:37:41,040 --> 00:37:45,200
c1 yields c2

941
00:37:44,079 --> 00:37:47,200
okay

942
00:37:45,200 --> 00:37:50,240
then if we describe the whole thing

943
00:37:47,200 --> 00:37:51,760
formally let's say

944
00:37:50,240 --> 00:37:52,010
for abc

945
00:37:51,760 --> 00:37:53,760
in

946
00:37:52,010 --> 00:37:57,200
[Music]

947
00:37:53,760 --> 00:37:58,480
type alphabet and the uv as tape

948
00:37:57,200 --> 00:38:01,040
the string

949
00:37:58,480 --> 00:38:04,880
of tab alphabet

950
00:38:01,040 --> 00:38:06,240
and qyq is the states of the machine

951
00:38:04,880 --> 00:38:07,839
let's say

952
00:38:06,240 --> 00:38:08,800
q a

953
00:38:07,839 --> 00:38:11,680
u

954
00:38:08,800 --> 00:38:13,920
sorry u a q i b v

955
00:38:11,680 --> 00:38:13,920
and

956
00:38:14,079 --> 00:38:18,640
u q j

957
00:38:15,920 --> 00:38:20,960
a c v are two configurations we said

958
00:38:18,640 --> 00:38:24,240
that

959
00:38:20,960 --> 00:38:26,480
this configuration yields

960
00:38:24,240 --> 00:38:27,760
this one

961
00:38:26,480 --> 00:38:29,760
if

962
00:38:27,760 --> 00:38:33,200
for that two machine there is a

963
00:38:29,760 --> 00:38:39,520
transition function entry

964
00:38:33,200 --> 00:38:42,480
says that if the machine is at qi and

965
00:38:39,520 --> 00:38:42,480
reads b

966
00:38:43,119 --> 00:38:48,320
qi will transit to qj

967
00:38:46,640 --> 00:38:52,240
and change

968
00:38:48,320 --> 00:38:53,599
b to c and the gold left the head goes

969
00:38:52,240 --> 00:38:54,560
left

970
00:38:53,599 --> 00:38:57,200
c

971
00:38:54,560 --> 00:38:58,320
q i

972
00:38:57,200 --> 00:39:01,040
b

973
00:38:58,320 --> 00:39:04,560
q i will be qj okay

974
00:39:01,040 --> 00:39:07,839
and goes left where is left that means

975
00:39:04,560 --> 00:39:10,400
next time you will read a

976
00:39:07,839 --> 00:39:11,280
and this b will be c

977
00:39:10,400 --> 00:39:15,200
so

978
00:39:11,280 --> 00:39:17,839
this configuration yields u and the q j

979
00:39:15,200 --> 00:39:19,760
because your head goes left and next

980
00:39:17,839 --> 00:39:23,599
time you will read a

981
00:39:19,760 --> 00:39:26,839
and then the original b becomes c and

982
00:39:23,599 --> 00:39:28,560
all tab contents

983
00:39:26,839 --> 00:39:30,480
later

984
00:39:28,560 --> 00:39:32,960
then this point will be the same

985
00:39:30,480 --> 00:39:36,000
identical okay

986
00:39:32,960 --> 00:39:36,000
or you have

987
00:39:38,000 --> 00:39:43,839
right right direction

988
00:39:40,320 --> 00:39:47,200
your head will go go right then

989
00:39:43,839 --> 00:39:50,640
the same thing but head goes right so

990
00:39:47,200 --> 00:39:53,920
you see qr will become qj but

991
00:39:50,640 --> 00:39:59,280
head will go here that means next time

992
00:39:53,920 --> 00:40:00,320
it it will read the first symbol of v

993
00:39:59,280 --> 00:40:04,160
okay

994
00:40:00,320 --> 00:40:05,920
and then these are identical and this c

995
00:40:04,160 --> 00:40:06,720
is the b here

996
00:40:05,920 --> 00:40:08,880
and

997
00:40:06,720 --> 00:40:12,079
q y becomes q j

998
00:40:08,880 --> 00:40:14,960
so we have

999
00:40:12,079 --> 00:40:14,960
we have uh

1000
00:40:17,119 --> 00:40:23,760
these calculation as the

1001
00:40:19,760 --> 00:40:25,920
result of this configuration

1002
00:40:23,760 --> 00:40:27,680
after

1003
00:40:25,920 --> 00:40:29,599
the transition here

1004
00:40:27,680 --> 00:40:30,480
okay

1005
00:40:29,599 --> 00:40:33,680
okay

1006
00:40:30,480 --> 00:40:34,880
so uh the notation of configurations

1007
00:40:33,680 --> 00:40:37,680
have

1008
00:40:34,880 --> 00:40:39,839
special cases or the definition of

1009
00:40:37,680 --> 00:40:43,200
turing machine in this textbook first

1010
00:40:39,839 --> 00:40:44,880
one is that for the left hand left hand

1011
00:40:43,200 --> 00:40:45,680
end of the tape

1012
00:40:44,880 --> 00:40:49,599
see

1013
00:40:45,680 --> 00:40:52,400
since we adopt since we adopt tape model

1014
00:40:49,599 --> 00:40:55,839
like this there is a left-handed

1015
00:40:52,400 --> 00:40:57,760
left hand left hand end

1016
00:40:55,839 --> 00:40:59,680
what if you

1017
00:40:57,760 --> 00:41:03,119
encountered a

1018
00:40:59,680 --> 00:41:06,720
transition ask you to go left

1019
00:41:03,119 --> 00:41:09,440
in this textbook we assume not the head

1020
00:41:06,720 --> 00:41:11,440
stay as the first

1021
00:41:09,440 --> 00:41:13,760
at the first

1022
00:41:11,440 --> 00:41:14,640
position okay

1023
00:41:13,760 --> 00:41:17,680
so

1024
00:41:14,640 --> 00:41:17,680
let's say uh

1025
00:41:17,920 --> 00:41:22,880
for dixie sample

1026
00:41:19,680 --> 00:41:26,079
okay if your configuration is like this

1027
00:41:22,880 --> 00:41:28,319
then you don't move your head

1028
00:41:26,079 --> 00:41:30,560
so that would be q

1029
00:41:28,319 --> 00:41:30,560
sorry

1030
00:41:30,880 --> 00:41:35,599
q

1031
00:41:31,839 --> 00:41:36,400
q j and there's no a here and u here

1032
00:41:35,599 --> 00:41:40,000
right

1033
00:41:36,400 --> 00:41:41,599
so b becomes c and the v

1034
00:41:40,000 --> 00:41:43,760
so q u

1035
00:41:41,599 --> 00:41:47,280
q i b v

1036
00:41:43,760 --> 00:41:51,839
went through this one becomes q j cv

1037
00:41:47,280 --> 00:41:53,920
because we have a left and left hand end

1038
00:41:51,839 --> 00:41:56,560
so for

1039
00:41:53,920 --> 00:42:00,160
models like this there is no end so it

1040
00:41:56,560 --> 00:42:02,640
can go left but in this textbook we

1041
00:42:00,160 --> 00:42:05,839
have a left hand

1042
00:42:02,640 --> 00:42:08,319
okay then the other special case is that

1043
00:42:05,839 --> 00:42:10,480
uh right hand end of the tape

1044
00:42:08,319 --> 00:42:12,560
since there is there is actually no

1045
00:42:10,480 --> 00:42:15,280
right hand end right because it's

1046
00:42:12,560 --> 00:42:17,520
infinite so what what does

1047
00:42:15,280 --> 00:42:19,119
what does this sentence the spatial case

1048
00:42:17,520 --> 00:42:20,720
mean that means

1049
00:42:19,119 --> 00:42:21,839
for example

1050
00:42:20,720 --> 00:42:24,800
if you

1051
00:42:21,839 --> 00:42:26,640
if this configuration is like this so

1052
00:42:24,800 --> 00:42:28,560
it's the last symbol

1053
00:42:26,640 --> 00:42:31,200
and don't don't forget that there are

1054
00:42:28,560 --> 00:42:35,119
infinite blank okay

1055
00:42:31,200 --> 00:42:37,680
so after this transition

1056
00:42:35,119 --> 00:42:40,800
they'll be like this

1057
00:42:37,680 --> 00:42:43,440
but they are actually infinite

1058
00:42:40,800 --> 00:42:44,560
blank right so in this case we will

1059
00:42:43,440 --> 00:42:47,760
write

1060
00:42:44,560 --> 00:42:50,240
the blank symbol out to indicate that

1061
00:42:47,760 --> 00:42:51,040
there are blank symbols so that's just

1062
00:42:50,240 --> 00:42:54,160
for

1063
00:42:51,040 --> 00:42:57,440
uh convenience so we will write the

1064
00:42:54,160 --> 00:42:58,560
configuration in this case u a

1065
00:42:57,440 --> 00:42:59,760
qj

1066
00:42:58,560 --> 00:43:02,560
blank

1067
00:42:59,760 --> 00:43:06,160
okay so you will find you will find that

1068
00:43:02,560 --> 00:43:08,160
blank out of nowhere but actually it

1069
00:43:06,160 --> 00:43:11,599
they are there

1070
00:43:08,160 --> 00:43:13,280
we just don't usually write them out

1071
00:43:11,599 --> 00:43:16,640
okay so that's a

1072
00:43:13,280 --> 00:43:16,640
well kind of special case

1073
00:43:16,960 --> 00:43:20,000
then

1074
00:43:17,760 --> 00:43:20,000
for

1075
00:43:20,800 --> 00:43:27,520
uh spatial configurations we said that

1076
00:43:24,960 --> 00:43:30,480
since the machine starts with start

1077
00:43:27,520 --> 00:43:33,599
state and input strings right

1078
00:43:30,480 --> 00:43:37,599
so we say that star configuration is the

1079
00:43:33,599 --> 00:43:39,040
start state of the machine and the input

1080
00:43:37,599 --> 00:43:41,520
string

1081
00:43:39,040 --> 00:43:42,400
called that start configuration

1082
00:43:41,520 --> 00:43:45,280
and

1083
00:43:42,400 --> 00:43:48,000
accepting configuration is that any

1084
00:43:45,280 --> 00:43:51,280
configuration of that machine

1085
00:43:48,000 --> 00:43:54,560
as long as the state is q accept then we

1086
00:43:51,280 --> 00:43:56,880
call it accepting configuration

1087
00:43:54,560 --> 00:43:59,200
if the state is reject

1088
00:43:56,880 --> 00:44:01,760
q reject we call it

1089
00:43:59,200 --> 00:44:03,200
rejecting configuration

1090
00:44:01,760 --> 00:44:04,560
okay

1091
00:44:03,200 --> 00:44:08,079
and

1092
00:44:04,560 --> 00:44:10,319
accepting or rejecting we call them

1093
00:44:08,079 --> 00:44:11,200
halting configuration

1094
00:44:10,319 --> 00:44:14,560
okay

1095
00:44:11,200 --> 00:44:19,040
so it actually uh connects to how the

1096
00:44:14,560 --> 00:44:22,240
machine operates like we just indicate

1097
00:44:19,040 --> 00:44:25,520
like we just indicate uh

1098
00:44:22,240 --> 00:44:25,520
turing machine is uh

1099
00:44:27,760 --> 00:44:32,560
two machine

1100
00:44:29,119 --> 00:44:34,240
operates differently from pda

1101
00:44:32,560 --> 00:44:36,960
dfa

1102
00:44:34,240 --> 00:44:39,040
for pda dfa or nfa they

1103
00:44:36,960 --> 00:44:41,119
after all the

1104
00:44:39,040 --> 00:44:44,480
transition all the input symbols are

1105
00:44:41,119 --> 00:44:46,640
consumed then you see the machine

1106
00:44:44,480 --> 00:44:48,240
whether the machine accept that string

1107
00:44:46,640 --> 00:44:51,280
but for turing machine it's not like

1108
00:44:48,240 --> 00:44:53,839
this for two machine you have your input

1109
00:44:51,280 --> 00:44:54,880
string on the tape

1110
00:44:53,839 --> 00:44:56,079
right

1111
00:44:54,880 --> 00:44:58,160
and

1112
00:44:56,079 --> 00:45:01,119
input string on the tape and then you

1113
00:44:58,160 --> 00:45:01,119
put up the machine

1114
00:45:01,520 --> 00:45:04,520
then

1115
00:45:04,880 --> 00:45:09,040
the machine

1116
00:45:06,800 --> 00:45:12,400
is considered

1117
00:45:09,040 --> 00:45:14,000
running and running and running unless

1118
00:45:12,400 --> 00:45:15,839
it decides

1119
00:45:14,000 --> 00:45:17,440
to accept the string or reject the

1120
00:45:15,839 --> 00:45:18,720
string

1121
00:45:17,440 --> 00:45:21,680
if it

1122
00:45:18,720 --> 00:45:24,319
it decides to accept string it

1123
00:45:21,680 --> 00:45:26,880
enters the accept state

1124
00:45:24,319 --> 00:45:26,880
that's why

1125
00:45:27,200 --> 00:45:33,040
the queue accepts

1126
00:45:29,839 --> 00:45:35,599
as long as the configuration has

1127
00:45:33,040 --> 00:45:37,680
the state of the configuration is q q

1128
00:45:35,599 --> 00:45:39,040
accept we call it accepting

1129
00:45:37,680 --> 00:45:41,359
configuration

1130
00:45:39,040 --> 00:45:44,560
accepting configuration

1131
00:45:41,359 --> 00:45:46,480
if it's reject then it enters

1132
00:45:44,560 --> 00:45:50,480
the reject state then we call it

1133
00:45:46,480 --> 00:45:53,839
rejecting configuration and only

1134
00:45:50,480 --> 00:45:55,119
when the machine enters either one of

1135
00:45:53,839 --> 00:45:58,960
the states

1136
00:45:55,119 --> 00:46:02,720
we consider the machine halt

1137
00:45:58,960 --> 00:46:02,720
okay the machine stopped

1138
00:46:02,880 --> 00:46:07,680
if the machine didn't

1139
00:46:05,760 --> 00:46:09,520
or

1140
00:46:07,680 --> 00:46:11,920
as long as the machine

1141
00:46:09,520 --> 00:46:14,319
does not enter either one of the two

1142
00:46:11,920 --> 00:46:15,839
states we don't consider the machine

1143
00:46:14,319 --> 00:46:18,560
stop

1144
00:46:15,839 --> 00:46:21,520
okay that's why we call

1145
00:46:18,560 --> 00:46:23,520
accepting or rejecting configuration

1146
00:46:21,520 --> 00:46:25,440
holding configuration

1147
00:46:23,520 --> 00:46:28,240
so that's basically

1148
00:46:25,440 --> 00:46:30,160
uh that's the

1149
00:46:28,240 --> 00:46:32,400
fundamental difference between two

1150
00:46:30,160 --> 00:46:34,960
machines and all the machines we

1151
00:46:32,400 --> 00:46:37,040
previously introduced

1152
00:46:34,960 --> 00:46:42,560
and we said that

1153
00:46:37,040 --> 00:46:44,880
a two machine accepts input w

1154
00:46:42,560 --> 00:46:48,880
if and

1155
00:46:44,880 --> 00:46:50,000
if a sequence of configurations okay

1156
00:46:48,880 --> 00:46:51,680
exist

1157
00:46:50,000 --> 00:46:54,480
where

1158
00:46:51,680 --> 00:46:58,000
again three conditions

1159
00:46:54,480 --> 00:47:00,079
c1 is the star configuration of m on

1160
00:46:58,000 --> 00:47:04,720
input w

1161
00:47:00,079 --> 00:47:09,680
and the ck is an accepting configuration

1162
00:47:04,720 --> 00:47:11,119
and the hci yields ci plus one

1163
00:47:09,680 --> 00:47:14,480
if you

1164
00:47:11,119 --> 00:47:18,160
take the definition here and the

1165
00:47:14,480 --> 00:47:19,680
compare to what we have for dfa and fa

1166
00:47:18,160 --> 00:47:22,720
or pda

1167
00:47:19,680 --> 00:47:24,720
it's quite easy to understand right

1168
00:47:22,720 --> 00:47:26,640
we say that the two machine accepts

1169
00:47:24,720 --> 00:47:30,160
input w if

1170
00:47:26,640 --> 00:47:33,520
a sequence of configurations c1 c2

1171
00:47:30,160 --> 00:47:36,559
to ck exists where c1 is the star

1172
00:47:33,520 --> 00:47:37,520
configuration of mnw

1173
00:47:36,559 --> 00:47:42,800
and

1174
00:47:37,520 --> 00:47:42,800
hci yields c i plus 1.

1175
00:47:43,280 --> 00:47:47,920
let's say for all i

1176
00:47:45,520 --> 00:47:49,200
equal 1 2

1177
00:47:47,920 --> 00:47:51,440
2

1178
00:47:49,200 --> 00:47:53,200
k minus 1 right

1179
00:47:51,440 --> 00:47:56,160
and the final

1180
00:47:53,200 --> 00:47:58,960
configuration ck is an accepting

1181
00:47:56,160 --> 00:47:58,960
configuration

1182
00:47:59,839 --> 00:48:03,520
so that's

1183
00:48:01,040 --> 00:48:05,119
what we said that machine accepted input

1184
00:48:03,520 --> 00:48:07,839
w

1185
00:48:05,119 --> 00:48:07,839
okay

1186
00:48:14,000 --> 00:48:20,920
so let's see an example here

1187
00:48:17,920 --> 00:48:20,920
so

1188
00:48:21,440 --> 00:48:26,000
we said that uh

1189
00:48:24,000 --> 00:48:29,040
artillery machine here

1190
00:48:26,000 --> 00:48:29,839
we want to decide the language

1191
00:48:29,040 --> 00:48:32,160
a

1192
00:48:29,839 --> 00:48:32,160
here

1193
00:48:32,839 --> 00:48:36,559
okay which means

1194
00:48:36,640 --> 00:48:41,359
when n

1195
00:48:37,839 --> 00:48:45,520
equals 0 that will be 0 right

1196
00:48:41,359 --> 00:48:48,880
when n equal to 1 now b 0 0

1197
00:48:45,520 --> 00:48:50,960
and then 0 0 0 0

1198
00:48:48,880 --> 00:48:52,800
and 8 0

1199
00:48:50,960 --> 00:48:57,680
16 0

1200
00:48:52,800 --> 00:48:59,920
32 0 stuff like this this language

1201
00:48:57,680 --> 00:48:59,920
okay

1202
00:49:00,079 --> 00:49:03,920
so

1203
00:49:02,000 --> 00:49:05,440
what we want to do

1204
00:49:03,920 --> 00:49:07,760
basically

1205
00:49:05,440 --> 00:49:09,920
like description here

1206
00:49:07,760 --> 00:49:11,599
we want to design a turing machine an

1207
00:49:09,920 --> 00:49:13,920
input string

1208
00:49:11,599 --> 00:49:17,520
okay

1209
00:49:13,920 --> 00:49:19,680
we sweep left to right across the tape

1210
00:49:17,520 --> 00:49:20,720
and

1211
00:49:19,680 --> 00:49:25,200
thinking

1212
00:49:20,720 --> 00:49:26,160
about crossing of every other zero

1213
00:49:25,200 --> 00:49:27,760
okay

1214
00:49:26,160 --> 00:49:28,480
after that

1215
00:49:27,760 --> 00:49:31,280
if

1216
00:49:28,480 --> 00:49:33,599
there is only one zero

1217
00:49:31,280 --> 00:49:35,839
except

1218
00:49:33,599 --> 00:49:38,640
okay

1219
00:49:35,839 --> 00:49:41,440
if more than one

1220
00:49:38,640 --> 00:49:43,200
and you know that the number of zeros

1221
00:49:41,440 --> 00:49:44,800
was odd

1222
00:49:43,200 --> 00:49:48,000
reject

1223
00:49:44,800 --> 00:49:51,359
because it is impossible to have

1224
00:49:48,000 --> 00:49:53,440
2 to the nth power

1225
00:49:51,359 --> 00:49:55,119
0s

1226
00:49:53,440 --> 00:49:56,480
right

1227
00:49:55,119 --> 00:49:59,280
and then

1228
00:49:56,480 --> 00:50:01,440
return the head to the left and

1229
00:49:59,280 --> 00:50:03,119
left hand end of the tape

1230
00:50:01,440 --> 00:50:06,319
and that's a loop

1231
00:50:03,119 --> 00:50:08,559
okay that's what we want to do

1232
00:50:06,319 --> 00:50:12,559
and thinking of the

1233
00:50:08,559 --> 00:50:15,599
well some kind of algorithm here we

1234
00:50:12,559 --> 00:50:18,800
design a tool machine like this

1235
00:50:15,599 --> 00:50:21,200
seven tuple right so we have state

1236
00:50:18,800 --> 00:50:24,240
and we have q one q two q

1237
00:50:21,200 --> 00:50:25,680
three five q except you reject seven

1238
00:50:24,240 --> 00:50:29,440
states

1239
00:50:25,680 --> 00:50:31,040
and then the alphabet is only zero okay

1240
00:50:29,440 --> 00:50:33,680
because the language you are talking

1241
00:50:31,040 --> 00:50:35,119
about have

1242
00:50:33,680 --> 00:50:37,040
is composed

1243
00:50:35,119 --> 00:50:37,920
composed of

1244
00:50:37,040 --> 00:50:39,520
only

1245
00:50:37,920 --> 00:50:43,680
a single zero

1246
00:50:39,520 --> 00:50:47,359
and the tab alphabet we want to have all

1247
00:50:43,680 --> 00:50:49,280
symbols in sigma right and

1248
00:50:47,359 --> 00:50:51,119
at least the blank

1249
00:50:49,280 --> 00:50:54,800
and for the

1250
00:50:51,119 --> 00:50:57,760
programming purpose we add one more

1251
00:50:54,800 --> 00:51:00,079
symbols here for convenience

1252
00:50:57,760 --> 00:51:00,079
then

1253
00:51:00,720 --> 00:51:05,760
uh

1254
00:51:02,240 --> 00:51:06,960
q1 is our start state and of course q

1255
00:51:05,760 --> 00:51:08,960
accept

1256
00:51:06,960 --> 00:51:10,079
q reject

1257
00:51:08,960 --> 00:51:13,200
right

1258
00:51:10,079 --> 00:51:15,440
and for convenience here

1259
00:51:13,200 --> 00:51:18,160
we have

1260
00:51:15,440 --> 00:51:18,160
we have a

1261
00:51:20,160 --> 00:51:25,359
diagram for the transition function it's

1262
00:51:22,319 --> 00:51:27,680
just for convenience but it actually you

1263
00:51:25,359 --> 00:51:32,400
can write write down all the entries

1264
00:51:27,680 --> 00:51:32,400
here right so for example we have

1265
00:51:33,599 --> 00:51:38,079
we have q1

1266
00:51:36,960 --> 00:51:39,359
reading

1267
00:51:38,079 --> 00:51:41,119
0

1268
00:51:39,359 --> 00:51:43,359
right and

1269
00:51:41,119 --> 00:51:43,359
sorry

1270
00:51:43,760 --> 00:51:46,880
will become what

1271
00:51:47,040 --> 00:51:49,520
q 2

1272
00:51:49,760 --> 00:51:53,280
let's mark this way okay so that's the

1273
00:51:52,160 --> 00:51:55,520
first one

1274
00:51:53,280 --> 00:51:57,839
we have the example here

1275
00:51:55,520 --> 00:51:59,599
oh i should sorry

1276
00:51:57,839 --> 00:52:02,240
the first here

1277
00:51:59,599 --> 00:52:03,119
uh i shouldn't do that i should do this

1278
00:52:02,240 --> 00:52:08,000
one

1279
00:52:03,119 --> 00:52:10,079
yes and q2 and also zero

1280
00:52:08,000 --> 00:52:11,440
sorry

1281
00:52:10,079 --> 00:52:14,480
blank

1282
00:52:11,440 --> 00:52:18,640
and goes right okay

1283
00:52:14,480 --> 00:52:20,240
so we use the notation like this here

1284
00:52:18,640 --> 00:52:21,839
q1

1285
00:52:20,240 --> 00:52:24,319
read zero

1286
00:52:21,839 --> 00:52:26,480
change zero to blank

1287
00:52:24,319 --> 00:52:27,839
and goes right

1288
00:52:26,480 --> 00:52:30,079
okay

1289
00:52:27,839 --> 00:52:30,960
so here

1290
00:52:30,079 --> 00:52:33,760
yeah

1291
00:52:30,960 --> 00:52:35,119
and goes right and also for the second

1292
00:52:33,760 --> 00:52:37,680
one here

1293
00:52:35,119 --> 00:52:38,720
second entry transition into here we

1294
00:52:37,680 --> 00:52:40,880
have

1295
00:52:38,720 --> 00:52:42,559
q1

1296
00:52:40,880 --> 00:52:44,400
reads blank

1297
00:52:42,559 --> 00:52:47,839
right

1298
00:52:44,400 --> 00:52:48,640
q reject let's use qr okay

1299
00:52:47,839 --> 00:52:51,680
and

1300
00:52:48,640 --> 00:52:54,480
we don't write symbol here means we

1301
00:52:51,680 --> 00:52:56,319
don't change the symbol so blank

1302
00:52:54,480 --> 00:52:57,280
and right

1303
00:52:56,319 --> 00:52:59,599
okay

1304
00:52:57,280 --> 00:53:02,559
so third one here

1305
00:52:59,599 --> 00:53:02,559
so 1 here

1306
00:53:02,880 --> 00:53:07,359
q1

1307
00:53:05,119 --> 00:53:09,920
x

1308
00:53:07,359 --> 00:53:12,480
qr

1309
00:53:09,920 --> 00:53:14,480
no change right x

1310
00:53:12,480 --> 00:53:15,680
r

1311
00:53:14,480 --> 00:53:18,240
okay

1312
00:53:15,680 --> 00:53:19,839
so that's the uh

1313
00:53:18,240 --> 00:53:23,200
no uh notification

1314
00:53:19,839 --> 00:53:24,400
that's the notion here o or

1315
00:53:23,200 --> 00:53:26,880
let's say

1316
00:53:24,400 --> 00:53:29,680
uh for q4 let's write the same thing

1317
00:53:26,880 --> 00:53:31,520
here so

1318
00:53:29,680 --> 00:53:33,520
1

1319
00:53:31,520 --> 00:53:37,839
that's

1320
00:53:33,520 --> 00:53:39,599
1 okay so delta q 4

1321
00:53:37,839 --> 00:53:40,839
reading 0

1322
00:53:39,599 --> 00:53:44,880
become

1323
00:53:40,839 --> 00:53:44,880
what q3

1324
00:53:45,280 --> 00:53:48,319
x

1325
00:53:46,240 --> 00:53:49,920
r

1326
00:53:48,319 --> 00:53:52,480
and the two

1327
00:53:49,920 --> 00:53:54,319
uh to do the blink okay

1328
00:53:52,480 --> 00:53:57,280
two

1329
00:53:54,319 --> 00:53:59,599
delta q for

1330
00:53:57,280 --> 00:54:03,200
blank

1331
00:53:59,599 --> 00:54:05,839
goes to q reject

1332
00:54:03,200 --> 00:54:06,880
blank no change okay

1333
00:54:05,839 --> 00:54:08,319
r

1334
00:54:06,880 --> 00:54:11,280
and the

1335
00:54:08,319 --> 00:54:12,559
third one here

1336
00:54:11,280 --> 00:54:15,040
third one

1337
00:54:12,559 --> 00:54:17,280
q4

1338
00:54:15,040 --> 00:54:17,280
x

1339
00:54:17,920 --> 00:54:21,599
go back to q4

1340
00:54:19,680 --> 00:54:22,839
no change

1341
00:54:21,599 --> 00:54:24,400
r

1342
00:54:22,839 --> 00:54:25,920
okay

1343
00:54:24,400 --> 00:54:28,559
so we use the

1344
00:54:25,920 --> 00:54:31,119
diagram like this to represent

1345
00:54:28,559 --> 00:54:33,119
the transition function for convenience

1346
00:54:31,119 --> 00:54:35,680
only

1347
00:54:33,119 --> 00:54:37,839
and why do we want to

1348
00:54:35,680 --> 00:54:40,000
use the diagram because it's easier for

1349
00:54:37,839 --> 00:54:43,839
us to trace

1350
00:54:40,000 --> 00:54:43,839
the operation on the input string

1351
00:54:44,240 --> 00:54:49,000
so we will do that next time

