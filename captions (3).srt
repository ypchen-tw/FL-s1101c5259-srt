1
00:00:06,160 --> 00:00:08,720
okay

2
00:00:07,040 --> 00:00:11,040
last time we

3
00:00:08,720 --> 00:00:12,240
proved that the union of two regular

4
00:00:11,040 --> 00:00:14,880
languages

5
00:00:12,240 --> 00:00:17,760
is still regular so

6
00:00:14,880 --> 00:00:19,520
that's the closure property of the

7
00:00:17,760 --> 00:00:22,480
union operations

8
00:00:19,520 --> 00:00:23,519
union operation on regular languages

9
00:00:22,480 --> 00:00:24,320
then

10
00:00:23,519 --> 00:00:28,240
we

11
00:00:24,320 --> 00:00:30,560
want to prove concluding now the closure

12
00:00:28,240 --> 00:00:30,560
property of conconnation not

13
00:00:42,840 --> 00:00:48,399
available any languages

14
00:00:45,600 --> 00:00:50,559
when you do conclination that would be a

15
00:00:48,399 --> 00:00:51,360
cartesian product

16
00:00:50,559 --> 00:00:53,360
so

17
00:00:51,360 --> 00:00:55,039
that would be cartesian product like

18
00:00:53,360 --> 00:00:55,840
this and this

19
00:00:55,039 --> 00:00:58,559
but

20
00:00:55,840 --> 00:01:01,600
for the concatenation for languages we

21
00:00:58,559 --> 00:01:03,920
don't do the notation here we just

22
00:01:01,600 --> 00:01:06,720
concatenate the two strings

23
00:01:03,920 --> 00:01:10,560
so for example if you have

24
00:01:06,720 --> 00:01:14,000
a language one zero zero

25
00:01:10,560 --> 00:01:15,439
and the other languages that say are

26
00:01:14,000 --> 00:01:17,680
one

27
00:01:15,439 --> 00:01:19,680
then the two languages will be in

28
00:01:17,680 --> 00:01:23,040
cartesian product that we usually use

29
00:01:19,680 --> 00:01:25,280
the notation that's one one right

30
00:01:23,040 --> 00:01:26,400
then zero zero one

31
00:01:25,280 --> 00:01:28,320
but for

32
00:01:26,400 --> 00:01:31,759
here we write

33
00:01:28,320 --> 00:01:34,000
one one a string and zero zero one the

34
00:01:31,759 --> 00:01:35,759
other string so that's it

35
00:01:34,000 --> 00:01:36,880
so that's concatenation

36
00:01:35,759 --> 00:01:39,600
okay

37
00:01:36,880 --> 00:01:42,720
now we want to prove

38
00:01:39,600 --> 00:01:44,799
the class of regular languages is closed

39
00:01:42,720 --> 00:01:47,280
under the combination

40
00:01:44,799 --> 00:01:48,560
operation

41
00:01:47,280 --> 00:01:51,600
well

42
00:01:48,560 --> 00:01:54,240
can we use the same idea

43
00:01:51,600 --> 00:01:56,479
when we prove the closure property of

44
00:01:54,240 --> 00:01:58,719
the union operation

45
00:01:56,479 --> 00:01:59,840
and here

46
00:01:58,719 --> 00:02:02,079
that's

47
00:01:59,840 --> 00:02:04,880
that's one way

48
00:02:02,079 --> 00:02:07,439
i'm not sure if that works but

49
00:02:04,880 --> 00:02:10,319
apparently in history no one ever

50
00:02:07,439 --> 00:02:15,520
succeeded to do that

51
00:02:10,319 --> 00:02:15,520
why why it is difficult because you see

52
00:02:16,319 --> 00:02:20,400
in the proof of union operation we try

53
00:02:19,040 --> 00:02:21,280
to trace

54
00:02:20,400 --> 00:02:23,200
two

55
00:02:21,280 --> 00:02:24,959
machines together

56
00:02:23,200 --> 00:02:28,160
we use a

57
00:02:24,959 --> 00:02:29,360
combination of states

58
00:02:28,160 --> 00:02:31,200
to trace

59
00:02:29,360 --> 00:02:32,319
two or finite

60
00:02:31,200 --> 00:02:33,680
machines

61
00:02:32,319 --> 00:02:34,640
at the same time

62
00:02:33,680 --> 00:02:36,480
but

63
00:02:34,640 --> 00:02:38,239
for concatenations

64
00:02:36,480 --> 00:02:40,239
you actually need to

65
00:02:38,239 --> 00:02:42,879
break the string

66
00:02:40,239 --> 00:02:45,840
and check the first part and the second

67
00:02:42,879 --> 00:02:49,800
part right for example if you have two

68
00:02:45,840 --> 00:02:49,800
languages like a

69
00:02:52,720 --> 00:02:58,080
let's say 0 1 and 1

70
00:02:56,319 --> 00:02:59,599
and b

71
00:02:58,080 --> 00:03:02,959
let's say

72
00:02:59,599 --> 00:03:04,400
0 0 0 and

73
00:03:02,959 --> 00:03:08,239
1 0.

74
00:03:04,400 --> 00:03:11,519
so the combination of a and b will be

75
00:03:08,239 --> 00:03:14,000
0 1 0 0 0

76
00:03:11,519 --> 00:03:15,920
0 1

77
00:03:14,000 --> 00:03:17,040
1 0

78
00:03:15,920 --> 00:03:21,040
and

79
00:03:17,040 --> 00:03:24,800
one zero zero zero and one one zero the

80
00:03:21,040 --> 00:03:24,800
four strings here right

81
00:03:25,120 --> 00:03:28,640
okay so

82
00:03:27,519 --> 00:03:31,200
when you have

83
00:03:28,640 --> 00:03:31,200
let's say

84
00:03:31,519 --> 00:03:33,680
one

85
00:03:32,480 --> 00:03:36,080
one

86
00:03:33,680 --> 00:03:36,080
zero

87
00:03:36,159 --> 00:03:43,599
how do you know it's one and one zero

88
00:03:40,879 --> 00:03:43,599
one in a

89
00:03:44,000 --> 00:03:50,080
and is one 0 in b

90
00:03:47,680 --> 00:03:52,640
how do you know that it

91
00:03:50,080 --> 00:03:53,840
it's 1 and 0 1 0

92
00:03:52,640 --> 00:03:55,280
is not

93
00:03:53,840 --> 00:03:57,599
1 1

94
00:03:55,280 --> 00:03:57,599
0

95
00:03:58,159 --> 00:04:03,120
0 is not in b and

96
00:04:01,040 --> 00:04:06,000
one one

97
00:04:03,120 --> 00:04:08,720
is not in a

98
00:04:06,000 --> 00:04:11,120
right how well to where to break the

99
00:04:08,720 --> 00:04:13,760
string you don't know that you can you

100
00:04:11,120 --> 00:04:14,879
can just try one because for this

101
00:04:13,760 --> 00:04:16,239
example

102
00:04:14,879 --> 00:04:17,440
if you try

103
00:04:16,239 --> 00:04:20,720
1 1

104
00:04:17,440 --> 00:04:22,079
0 and another accepted by the machine

105
00:04:20,720 --> 00:04:22,960
for b

106
00:04:22,079 --> 00:04:25,440
and

107
00:04:22,960 --> 00:04:28,400
not accept by the machine for a you

108
00:04:25,440 --> 00:04:31,600
cannot go back because it's not in the

109
00:04:28,400 --> 00:04:33,919
specification of final automata

110
00:04:31,600 --> 00:04:35,360
final automata is that you give it a

111
00:04:33,919 --> 00:04:38,880
string and

112
00:04:35,360 --> 00:04:40,160
it process step by step by step by step

113
00:04:38,880 --> 00:04:43,120
and stop

114
00:04:40,160 --> 00:04:45,440
and you see the answer

115
00:04:43,120 --> 00:04:47,120
accept or not

116
00:04:45,440 --> 00:04:48,560
okay

117
00:04:47,120 --> 00:04:51,040
so it's probably

118
00:04:48,560 --> 00:04:54,320
probably impossible

119
00:04:51,040 --> 00:04:56,400
to use the same concept

120
00:04:54,320 --> 00:04:57,680
when we uh

121
00:04:56,400 --> 00:05:00,080
prove the

122
00:04:57,680 --> 00:05:03,199
union of

123
00:05:00,080 --> 00:05:03,199
two regular languages

124
00:05:04,080 --> 00:05:07,280
so

125
00:05:04,880 --> 00:05:09,039
what do we what do we do now

126
00:05:07,280 --> 00:05:11,039
okay

127
00:05:09,039 --> 00:05:13,919
okay uh

128
00:05:11,039 --> 00:05:15,440
interestingly that's uh set aside the

129
00:05:13,919 --> 00:05:18,479
whole thing here

130
00:05:15,440 --> 00:05:19,680
let's introduce another type of machine

131
00:05:18,479 --> 00:05:22,840
okay

132
00:05:19,680 --> 00:05:27,120
kind of weird but that's that's just do

133
00:05:22,840 --> 00:05:28,800
it so we want to uh introduce another

134
00:05:27,120 --> 00:05:30,560
type machine called

135
00:05:28,800 --> 00:05:34,320
which is called

136
00:05:30,560 --> 00:05:38,160
non-deterministic finite automata

137
00:05:34,320 --> 00:05:40,400
okay non-deterministic finite automata

138
00:05:38,160 --> 00:05:40,400
so

139
00:05:41,199 --> 00:05:46,720
for non-deterministic

140
00:05:43,520 --> 00:05:48,160
the previously previous

141
00:05:46,720 --> 00:05:50,960
final automata

142
00:05:48,160 --> 00:05:55,520
the let's say fundamental financial we

143
00:05:50,960 --> 00:05:58,479
defined in our last class last two class

144
00:05:55,520 --> 00:06:01,840
it's called it is called can be called

145
00:05:58,479 --> 00:06:04,759
deterministic uh finite automata

146
00:06:01,840 --> 00:06:07,120
okay so now we want to define

147
00:06:04,759 --> 00:06:09,600
non-deterministic final automata

148
00:06:07,120 --> 00:06:12,080
okay what is deterministic computation

149
00:06:09,600 --> 00:06:14,400
what is deterministic final automata

150
00:06:12,080 --> 00:06:16,160
it's quite simple actually it's

151
00:06:14,400 --> 00:06:19,199
our you know

152
00:06:16,160 --> 00:06:20,400
our usually day life is more like this

153
00:06:19,199 --> 00:06:23,199
we have

154
00:06:20,400 --> 00:06:24,560
determined next move

155
00:06:23,199 --> 00:06:25,680
okay

156
00:06:24,560 --> 00:06:29,520
well

157
00:06:25,680 --> 00:06:30,240
for some people maybe it's not true but

158
00:06:29,520 --> 00:06:33,440
for

159
00:06:30,240 --> 00:06:34,960
programs or for your computers at your

160
00:06:33,440 --> 00:06:36,160
hand like

161
00:06:34,960 --> 00:06:38,880
your

162
00:06:36,160 --> 00:06:42,639
your cellular form your notebook

163
00:06:38,880 --> 00:06:45,199
all computing machine right now is

164
00:06:42,639 --> 00:06:46,720
uh except for those you know content

165
00:06:45,199 --> 00:06:48,960
computation

166
00:06:46,720 --> 00:06:50,560
all the traditional computation machine

167
00:06:48,960 --> 00:06:53,599
right now is

168
00:06:50,560 --> 00:06:56,080
deterministic computation which has

169
00:06:53,599 --> 00:07:00,080
determined next move

170
00:06:56,080 --> 00:07:00,800
for our uh final automata you see if you

171
00:07:00,080 --> 00:07:02,560
fro

172
00:07:00,800 --> 00:07:06,160
you are from

173
00:07:02,560 --> 00:07:07,520
p1 the state p1 and you see the

174
00:07:06,160 --> 00:07:09,360
symbol a

175
00:07:07,520 --> 00:07:10,240
you go to state

176
00:07:09,360 --> 00:07:11,840
p

177
00:07:10,240 --> 00:07:15,039
4

178
00:07:11,840 --> 00:07:16,800
and you have a transition like this

179
00:07:15,039 --> 00:07:18,400
p1 a

180
00:07:16,800 --> 00:07:19,199
sorry

181
00:07:18,400 --> 00:07:19,919
a

182
00:07:19,199 --> 00:07:22,000
and

183
00:07:19,919 --> 00:07:25,280
p4

184
00:07:22,000 --> 00:07:27,840
so that's deterministic

185
00:07:25,280 --> 00:07:30,960
you know exactly

186
00:07:27,840 --> 00:07:32,639
your next step

187
00:07:30,960 --> 00:07:35,599
think about that if you are writing a

188
00:07:32,639 --> 00:07:38,160
program and the computer doesn't give

189
00:07:35,599 --> 00:07:40,400
you what you expect

190
00:07:38,160 --> 00:07:42,560
unless you have a bug in your pro in

191
00:07:40,400 --> 00:07:46,400
your program if you don't have a bug in

192
00:07:42,560 --> 00:07:48,319
your program computer response responds

193
00:07:46,400 --> 00:07:50,160
differently than you expect that would

194
00:07:48,319 --> 00:07:51,759
be very bad right

195
00:07:50,160 --> 00:07:55,199
so

196
00:07:51,759 --> 00:07:55,199
that's deterministic computation

197
00:07:55,280 --> 00:08:00,080
on the contrary

198
00:07:57,280 --> 00:08:02,479
the computation what is that

199
00:08:00,080 --> 00:08:04,000
in our textbook i

200
00:08:02,479 --> 00:08:05,840
in our textbook

201
00:08:04,000 --> 00:08:07,759
the sentence says

202
00:08:05,840 --> 00:08:12,000
several choices

203
00:08:07,759 --> 00:08:13,120
may exist for the next move

204
00:08:12,000 --> 00:08:14,000
okay

205
00:08:13,120 --> 00:08:15,759
but

206
00:08:14,000 --> 00:08:19,360
i have to say that

207
00:08:15,759 --> 00:08:20,639
don't be confused by

208
00:08:19,360 --> 00:08:22,080
choices

209
00:08:20,639 --> 00:08:26,240
okay

210
00:08:22,080 --> 00:08:27,360
there is no choices

211
00:08:26,240 --> 00:08:30,800
also

212
00:08:27,360 --> 00:08:33,279
there is no probability

213
00:08:30,800 --> 00:08:35,360
in our course

214
00:08:33,279 --> 00:08:37,919
not in formal languages because for

215
00:08:35,360 --> 00:08:39,919
advanced materials they have

216
00:08:37,919 --> 00:08:43,360
you know probability probability or

217
00:08:39,919 --> 00:08:45,519
something like that but

218
00:08:43,360 --> 00:08:46,800
in our course throughout the whole

219
00:08:45,519 --> 00:08:49,839
semester

220
00:08:46,800 --> 00:08:52,959
we don't have choices

221
00:08:49,839 --> 00:08:54,399
we don't have probability

222
00:08:52,959 --> 00:08:55,200
don't forget that

223
00:08:54,399 --> 00:08:57,839
okay

224
00:08:55,200 --> 00:09:01,279
and it's not a choice

225
00:08:57,839 --> 00:09:03,600
i will explain that further when we see

226
00:09:01,279 --> 00:09:04,399
the formal definition you just remember

227
00:09:03,600 --> 00:09:05,760
that

228
00:09:04,399 --> 00:09:07,440
choices

229
00:09:05,760 --> 00:09:09,360
choice is not

230
00:09:07,440 --> 00:09:10,640
really a

231
00:09:09,360 --> 00:09:11,760
good word

232
00:09:10,640 --> 00:09:14,320
here

233
00:09:11,760 --> 00:09:15,279
although it's on our textbook

234
00:09:14,320 --> 00:09:16,560
anyway

235
00:09:15,279 --> 00:09:18,560
so

236
00:09:16,560 --> 00:09:20,320
for the final automata has the

237
00:09:18,560 --> 00:09:23,600
capability of non-deterministic

238
00:09:20,320 --> 00:09:25,040
computation we call then

239
00:09:23,600 --> 00:09:29,120
nfa

240
00:09:25,040 --> 00:09:29,120
okay we call them nfa

241
00:09:34,640 --> 00:09:38,080
as the uh

242
00:09:36,560 --> 00:09:40,399
as we define

243
00:09:38,080 --> 00:09:43,279
deterministic finite automata we give an

244
00:09:40,399 --> 00:09:45,360
example first now we also give it an

245
00:09:43,279 --> 00:09:48,080
example here

246
00:09:45,360 --> 00:09:50,880
we will define something like

247
00:09:48,080 --> 00:09:52,560
you have several states

248
00:09:50,880 --> 00:09:53,760
actually finite states like final

249
00:09:52,560 --> 00:09:55,040
automata

250
00:09:53,760 --> 00:09:57,200
then

251
00:09:55,040 --> 00:09:59,360
for the states

252
00:09:57,200 --> 00:09:59,360
when

253
00:09:59,440 --> 00:10:02,399
as

254
00:10:00,320 --> 00:10:04,640
when you see a symbol

255
00:10:02,399 --> 00:10:07,440
when the machine see a symbol

256
00:10:04,640 --> 00:10:09,120
it can go to several states instead of

257
00:10:07,440 --> 00:10:10,079
exactly one

258
00:10:09,120 --> 00:10:12,480
see

259
00:10:10,079 --> 00:10:14,880
so for this example

260
00:10:12,480 --> 00:10:16,800
if the machine sees zero

261
00:10:14,880 --> 00:10:17,680
it goes to q1

262
00:10:16,800 --> 00:10:20,160
okay

263
00:10:17,680 --> 00:10:24,560
the behave here is like

264
00:10:20,160 --> 00:10:24,560
uh determines a finite automata but

265
00:10:25,279 --> 00:10:28,880
when it sees

266
00:10:26,959 --> 00:10:31,680
one

267
00:10:28,880 --> 00:10:35,200
it can go

268
00:10:31,680 --> 00:10:38,399
q1 and also q2

269
00:10:35,200 --> 00:10:39,519
remember that also q2

270
00:10:38,399 --> 00:10:41,200
or

271
00:10:39,519 --> 00:10:44,000
it can

272
00:10:41,200 --> 00:10:44,000
see nothing

273
00:10:45,360 --> 00:10:49,360
goes to another state

274
00:10:48,160 --> 00:10:51,279
okay

275
00:10:49,360 --> 00:10:53,200
it is kind of

276
00:10:51,279 --> 00:10:54,079
confusing here

277
00:10:53,200 --> 00:10:58,079
that

278
00:10:54,079 --> 00:11:02,399
epsilon here is not a symbol

279
00:10:58,079 --> 00:11:06,880
f epsilon here means the machine

280
00:11:02,399 --> 00:11:10,399
doesn't consume any symbol

281
00:11:06,880 --> 00:11:12,079
okay so it's kind of mixing two

282
00:11:10,399 --> 00:11:15,600
notations because

283
00:11:12,079 --> 00:11:18,000
for zero and one it consumes zero or one

284
00:11:15,600 --> 00:11:20,640
right but for epsilon

285
00:11:18,000 --> 00:11:22,720
it doesn't consume epsilon

286
00:11:20,640 --> 00:11:26,079
it consumes nothing

287
00:11:22,720 --> 00:11:27,440
and goes to q3

288
00:11:26,079 --> 00:11:28,959
okay

289
00:11:27,440 --> 00:11:31,279
then

290
00:11:28,959 --> 00:11:33,519
whenever the machine

291
00:11:31,279 --> 00:11:33,519
has

292
00:11:33,920 --> 00:11:38,640
several

293
00:11:35,440 --> 00:11:40,480
way to go several passes to go

294
00:11:38,640 --> 00:11:43,600
that

295
00:11:40,480 --> 00:11:45,760
like i said it's not a choice

296
00:11:43,600 --> 00:11:48,320
it's not choices

297
00:11:45,760 --> 00:11:49,440
the machine will go

298
00:11:48,320 --> 00:11:50,800
how

299
00:11:49,440 --> 00:11:52,240
by focusing

300
00:11:50,800 --> 00:11:53,040
process

301
00:11:52,240 --> 00:11:54,560
okay

302
00:11:53,040 --> 00:11:57,440
think of the

303
00:11:54,560 --> 00:11:58,800
current computer you have you can do the

304
00:11:57,440 --> 00:12:00,480
uh

305
00:11:58,800 --> 00:12:03,839
you can do

306
00:12:00,480 --> 00:12:05,120
multi-thread or multi-process program

307
00:12:03,839 --> 00:12:07,440
so you can think of the

308
00:12:05,120 --> 00:12:11,760
non-deterministic computation is that

309
00:12:07,440 --> 00:12:13,120
whenever you have several way to go

310
00:12:11,760 --> 00:12:14,560
you go

311
00:12:13,120 --> 00:12:18,800
only that

312
00:12:14,560 --> 00:12:21,760
you folk process and one process goes on

313
00:12:18,800 --> 00:12:23,040
the set of the original path and the

314
00:12:21,760 --> 00:12:25,600
other process

315
00:12:23,040 --> 00:12:28,959
or the other uh

316
00:12:25,600 --> 00:12:30,480
other more process goes to all

317
00:12:28,959 --> 00:12:33,200
the passes

318
00:12:30,480 --> 00:12:36,399
another choice just go okay

319
00:12:33,200 --> 00:12:40,079
so it's more like

320
00:12:36,399 --> 00:12:41,920
when you uh so for the uh fundamental

321
00:12:40,079 --> 00:12:44,079
deterministic

322
00:12:41,920 --> 00:12:47,440
finite automata

323
00:12:44,079 --> 00:12:49,200
when it process a string it's like

324
00:12:47,440 --> 00:12:51,279
from start state

325
00:12:49,200 --> 00:12:53,120
process the first symbol

326
00:12:51,279 --> 00:12:53,920
goes to next state

327
00:12:53,120 --> 00:12:56,160
and

328
00:12:53,920 --> 00:12:57,360
processes the next symbol and the next

329
00:12:56,160 --> 00:12:59,900
state

330
00:12:57,360 --> 00:13:01,519
next symbol next state and

331
00:12:59,900 --> 00:13:03,680
[Music]

332
00:13:01,519 --> 00:13:05,760
last symbol

333
00:13:03,680 --> 00:13:08,800
last

334
00:13:05,760 --> 00:13:10,079
accept or not

335
00:13:08,800 --> 00:13:11,600
or not

336
00:13:10,079 --> 00:13:14,160
okay

337
00:13:11,600 --> 00:13:16,800
but for non-deterministic computation

338
00:13:14,160 --> 00:13:20,639
it's more like you start from the start

339
00:13:16,800 --> 00:13:22,160
state the same star state but

340
00:13:20,639 --> 00:13:24,959
for the

341
00:13:22,160 --> 00:13:27,920
example above you see if the first

342
00:13:24,959 --> 00:13:27,920
symbol is one

343
00:13:30,240 --> 00:13:33,360
there will be one

344
00:13:33,680 --> 00:13:37,760
process

345
00:13:35,920 --> 00:13:38,720
goes to one way

346
00:13:37,760 --> 00:13:41,360
and

347
00:13:38,720 --> 00:13:44,079
another process in this case the other

348
00:13:41,360 --> 00:13:47,279
process goes to the other way

349
00:13:44,079 --> 00:13:49,680
so one process from q1

350
00:13:47,279 --> 00:13:51,839
one process from q2

351
00:13:49,680 --> 00:13:53,600
and this part

352
00:13:51,839 --> 00:13:56,399
and this part

353
00:13:53,600 --> 00:13:57,760
are irrelevant they don't communicate

354
00:13:56,399 --> 00:13:59,440
each other

355
00:13:57,760 --> 00:14:03,519
okay

356
00:13:59,440 --> 00:14:04,639
the same thing goes on so

357
00:14:03,519 --> 00:14:07,519
when

358
00:14:04,639 --> 00:14:10,000
at this stage

359
00:14:07,519 --> 00:14:12,399
the machine sees a symbol there are

360
00:14:10,000 --> 00:14:14,160
three paths to go

361
00:14:12,399 --> 00:14:17,600
it will folk

362
00:14:14,160 --> 00:14:21,519
one process goes one path the other goes

363
00:14:17,600 --> 00:14:22,880
this path and the one process goes

364
00:14:21,519 --> 00:14:25,040
the other

365
00:14:22,880 --> 00:14:28,160
okay

366
00:14:25,040 --> 00:14:29,920
so that's the way how

367
00:14:28,160 --> 00:14:31,600
non-deterministic final time that

368
00:14:29,920 --> 00:14:32,639
handles the string

369
00:14:31,600 --> 00:14:34,079
so

370
00:14:32,639 --> 00:14:36,720
let's say

371
00:14:34,079 --> 00:14:39,680
it will focus process

372
00:14:36,720 --> 00:14:40,720
on every possible choice computational

373
00:14:39,680 --> 00:14:42,959
path

374
00:14:40,720 --> 00:14:45,839
so that's why i said

375
00:14:42,959 --> 00:14:45,839
it's not

376
00:14:46,800 --> 00:14:50,480
choices it's not a choice

377
00:14:49,279 --> 00:14:53,440
you must go

378
00:14:50,480 --> 00:14:53,440
okay you must go

379
00:14:53,600 --> 00:14:55,760
so

380
00:14:56,720 --> 00:15:02,160
how do we formally define such a

381
00:14:59,760 --> 00:15:02,160
machine

382
00:15:02,240 --> 00:15:06,880
pretty simple actually

383
00:15:04,320 --> 00:15:08,720
we just need to extend we just need to

384
00:15:06,880 --> 00:15:10,959
extend a little bit

385
00:15:08,720 --> 00:15:12,880
our original definition

386
00:15:10,959 --> 00:15:16,560
so let's go through this

387
00:15:12,880 --> 00:15:20,480
a non-deterministic finite automaton is

388
00:15:16,560 --> 00:15:21,920
also a five tuple so you have five

389
00:15:20,480 --> 00:15:22,880
components

390
00:15:21,920 --> 00:15:26,959
q

391
00:15:22,880 --> 00:15:28,160
sigma delta q zero and f is basically

392
00:15:26,959 --> 00:15:29,759
the same

393
00:15:28,160 --> 00:15:32,320
so

394
00:15:29,759 --> 00:15:35,920
finite sets of states the same

395
00:15:32,320 --> 00:15:37,920
finite set of symbols which is alphabet

396
00:15:35,920 --> 00:15:39,440
the same

397
00:15:37,920 --> 00:15:41,279
so then

398
00:15:39,440 --> 00:15:43,440
the fourth part

399
00:15:41,279 --> 00:15:44,720
a star state within

400
00:15:43,440 --> 00:15:46,720
the states

401
00:15:44,720 --> 00:15:50,160
okay

402
00:15:46,720 --> 00:15:53,440
a set of accept states which is a subset

403
00:15:50,160 --> 00:15:56,959
of states the same so you can see that

404
00:15:53,440 --> 00:15:59,759
1 2 4 5 is the same

405
00:15:56,959 --> 00:16:03,199
so the only difference in the definition

406
00:15:59,759 --> 00:16:04,399
is the transition function

407
00:16:03,199 --> 00:16:06,959
we change

408
00:16:04,399 --> 00:16:09,920
the definition of the transition

409
00:16:06,959 --> 00:16:12,720
function firstly

410
00:16:09,920 --> 00:16:12,720
we provide

411
00:16:13,920 --> 00:16:16,320
epsilon

412
00:16:15,120 --> 00:16:17,600
to be

413
00:16:16,320 --> 00:16:21,040
the input

414
00:16:17,600 --> 00:16:23,360
but it's kind like i said it's kind of

415
00:16:21,040 --> 00:16:28,000
confusing that

416
00:16:23,360 --> 00:16:30,000
uh usually we express we denote

417
00:16:28,000 --> 00:16:33,440
epsilon with uh

418
00:16:30,000 --> 00:16:35,360
alphabet with strong is like alphabet

419
00:16:33,440 --> 00:16:37,279
with

420
00:16:35,360 --> 00:16:40,000
epsilon

421
00:16:37,279 --> 00:16:42,560
but you must know that for example

422
00:16:40,000 --> 00:16:48,360
alphabet 0 1

423
00:16:42,560 --> 00:16:48,360
when we write this alphabet with epsilon

424
00:16:50,880 --> 00:16:54,959
it doesn't mean that

425
00:16:52,880 --> 00:16:57,680
it doesn't mean that

426
00:16:54,959 --> 00:17:00,560
there is a

427
00:16:57,680 --> 00:17:02,959
epsilon there is an empty string in the

428
00:17:00,560 --> 00:17:05,199
symbol set it's not

429
00:17:02,959 --> 00:17:08,160
it's only for

430
00:17:05,199 --> 00:17:08,160
it's only for

431
00:17:08,400 --> 00:17:13,679
the definition of the function

432
00:17:12,000 --> 00:17:17,360
it means that

433
00:17:13,679 --> 00:17:17,360
if the function makes

434
00:17:17,600 --> 00:17:23,360
the machine is on some

435
00:17:20,799 --> 00:17:25,600
states and sees

436
00:17:23,360 --> 00:17:26,559
something from alphabet

437
00:17:25,600 --> 00:17:27,919
or

438
00:17:26,559 --> 00:17:30,480
epsilon

439
00:17:27,919 --> 00:17:33,280
but when it sees epsilon

440
00:17:30,480 --> 00:17:34,160
it doesn't mean it consumes an empty

441
00:17:33,280 --> 00:17:36,559
string

442
00:17:34,160 --> 00:17:39,039
it means it's used

443
00:17:36,559 --> 00:17:42,400
it used no

444
00:17:39,039 --> 00:17:44,840
input symbol it used nothing from the

445
00:17:42,400 --> 00:17:48,160
input okay

446
00:17:44,840 --> 00:17:51,120
then delta will map

447
00:17:48,160 --> 00:17:55,200
the combination of these two domain the

448
00:17:51,120 --> 00:17:55,200
member from this two domain to

449
00:17:55,520 --> 00:18:00,799
a power the power set a member of the

450
00:17:58,400 --> 00:18:01,840
power set of q

451
00:18:00,799 --> 00:18:04,480
okay

452
00:18:01,840 --> 00:18:06,480
so uh if you are not familiar with power

453
00:18:04,480 --> 00:18:09,440
set it's

454
00:18:06,480 --> 00:18:13,200
all possible subset of a set

455
00:18:09,440 --> 00:18:15,120
okay so for example if you have a

456
00:18:13,200 --> 00:18:17,840
set like this

457
00:18:15,120 --> 00:18:20,720
what is the subset of

458
00:18:17,840 --> 00:18:23,200
what is the possible subset of this set

459
00:18:20,720 --> 00:18:25,440
that will be empty set right

460
00:18:23,200 --> 00:18:27,120
that will be only a

461
00:18:25,440 --> 00:18:31,360
and only b

462
00:18:27,120 --> 00:18:32,320
and a and b

463
00:18:31,360 --> 00:18:35,360
it is

464
00:18:32,320 --> 00:18:37,760
all possible subset of this set

465
00:18:35,360 --> 00:18:39,360
that said let's say a

466
00:18:37,760 --> 00:18:42,400
so

467
00:18:39,360 --> 00:18:45,760
the set of all possible subsets

468
00:18:42,400 --> 00:18:48,000
is power set of a

469
00:18:45,760 --> 00:18:50,559
okay sometimes we

470
00:18:48,000 --> 00:18:52,400
denote the power set by 2 to the a

471
00:18:50,559 --> 00:18:54,160
something like that or something like

472
00:18:52,400 --> 00:18:57,120
that sometimes

473
00:18:54,160 --> 00:18:58,160
different different notation systems

474
00:18:57,120 --> 00:19:00,000
so

475
00:18:58,160 --> 00:19:02,720
why why do we

476
00:19:00,000 --> 00:19:06,000
define transition function like this

477
00:19:02,720 --> 00:19:06,000
because you see

478
00:19:07,360 --> 00:19:13,360
for a finite automata you have only

479
00:19:10,320 --> 00:19:15,440
finite states like this example you have

480
00:19:13,360 --> 00:19:18,240
four states right

481
00:19:15,440 --> 00:19:21,360
and you want to provide you want to say

482
00:19:18,240 --> 00:19:23,760
that okay uh start from q2

483
00:19:21,360 --> 00:19:25,039
i can go to some

484
00:19:23,760 --> 00:19:27,360
other states

485
00:19:25,039 --> 00:19:30,160
maybe or maybe not other you can go back

486
00:19:27,360 --> 00:19:32,720
to q2

487
00:19:30,160 --> 00:19:36,400
but where can you go

488
00:19:32,720 --> 00:19:36,400
you can go all possible

489
00:19:36,480 --> 00:19:40,160
states only

490
00:19:38,720 --> 00:19:41,120
no state

491
00:19:40,160 --> 00:19:42,240
right

492
00:19:41,120 --> 00:19:46,160
q1

493
00:19:42,240 --> 00:19:47,120
or q2 or q3 or q4

494
00:19:46,160 --> 00:19:49,520
or

495
00:19:47,120 --> 00:19:51,760
q1 and q2

496
00:19:49,520 --> 00:19:56,160
q1 and q3

497
00:19:51,760 --> 00:20:00,080
q1 and the q4 or you see

498
00:19:56,160 --> 00:20:02,880
q2 q3 q2 q4 etc over

499
00:20:00,080 --> 00:20:03,840
three states or four states

500
00:20:02,880 --> 00:20:05,360
so

501
00:20:03,840 --> 00:20:06,480
all possible

502
00:20:05,360 --> 00:20:08,880
way to go

503
00:20:06,480 --> 00:20:12,320
is the power set of

504
00:20:08,880 --> 00:20:14,159
the set of the states

505
00:20:12,320 --> 00:20:15,039
so the the

506
00:20:14,159 --> 00:20:17,840
the

507
00:20:15,039 --> 00:20:20,320
domain of the transition function will

508
00:20:17,840 --> 00:20:22,640
be like this

509
00:20:20,320 --> 00:20:22,640
okay

510
00:20:23,520 --> 00:20:25,760
so

511
00:20:26,000 --> 00:20:28,480
for the

512
00:20:27,039 --> 00:20:29,760
example

513
00:20:28,480 --> 00:20:31,200
here

514
00:20:29,760 --> 00:20:34,480
we can

515
00:20:31,200 --> 00:20:38,240
write down the formal definition of the

516
00:20:34,480 --> 00:20:39,039
example here so let's say

517
00:20:38,240 --> 00:20:41,919
the

518
00:20:39,039 --> 00:20:41,919
anova here

519
00:20:43,520 --> 00:20:49,840
we define n1 as

520
00:20:46,400 --> 00:20:52,559
the five tuple here and the states are

521
00:20:49,840 --> 00:20:56,080
q1 q2 q3 and q4

522
00:20:52,559 --> 00:20:58,559
and you have uh the alphabet zero one

523
00:20:56,080 --> 00:21:02,880
and again don't forget that zero one

524
00:20:58,559 --> 00:21:05,280
here is not integers zero and 1. okay

525
00:21:02,880 --> 00:21:07,840
then q1 is the start state

526
00:21:05,280 --> 00:21:11,600
okay q1 is the start state and we have

527
00:21:07,840 --> 00:21:13,840
only one accept states q4

528
00:21:11,600 --> 00:21:15,919
okay that's our definition

529
00:21:13,840 --> 00:21:18,720
then for transition function you can

530
00:21:15,919 --> 00:21:21,200
absolutely see that

531
00:21:18,720 --> 00:21:22,240
when q when you when the machine is on

532
00:21:21,200 --> 00:21:25,679
q1

533
00:21:22,240 --> 00:21:27,919
and the c is 0 the symbol 0 it goes back

534
00:21:25,679 --> 00:21:28,880
to q1 only

535
00:21:27,919 --> 00:21:31,600
okay

536
00:21:28,880 --> 00:21:36,320
and if is this one

537
00:21:31,600 --> 00:21:39,440
it goes to q1 and q2 so q1 and q2 and

538
00:21:36,320 --> 00:21:42,880
don't forget that when it goes to q1 and

539
00:21:39,440 --> 00:21:46,640
q2 it actually focus process one process

540
00:21:42,880 --> 00:21:49,520
to q1 and once processed to q2 and they

541
00:21:46,640 --> 00:21:51,280
never communicate with each other

542
00:21:49,520 --> 00:21:52,240
okay

543
00:21:51,280 --> 00:21:54,400
and

544
00:21:52,240 --> 00:21:56,480
if it sees nothing

545
00:21:54,400 --> 00:21:57,360
it goes nowhere

546
00:21:56,480 --> 00:21:59,919
okay

547
00:21:57,360 --> 00:22:01,280
goes nowhere so it doesn't

548
00:21:59,919 --> 00:22:05,600
do that

549
00:22:01,280 --> 00:22:05,600
it's nothing and go somewhere

550
00:22:06,000 --> 00:22:10,240
on q1

551
00:22:07,280 --> 00:22:12,559
and if the machine is on q2

552
00:22:10,240 --> 00:22:13,520
c0 goes q3

553
00:22:12,559 --> 00:22:15,360
right

554
00:22:13,520 --> 00:22:16,559
and

555
00:22:15,360 --> 00:22:19,919
you see here

556
00:22:16,559 --> 00:22:22,640
if on q2 is this one

557
00:22:19,919 --> 00:22:25,760
goes to nowhere

558
00:22:22,640 --> 00:22:27,919
you can also think of this kind of

559
00:22:25,760 --> 00:22:29,039
notation

560
00:22:27,919 --> 00:22:31,360
like

561
00:22:29,039 --> 00:22:32,640
undefined instruction something like

562
00:22:31,360 --> 00:22:35,200
that

563
00:22:32,640 --> 00:22:36,480
if you are using windows it probably

564
00:22:35,200 --> 00:22:40,120
gives you

565
00:22:36,480 --> 00:22:40,120
what uh

566
00:22:40,960 --> 00:22:46,559
blue screen of death bsod right

567
00:22:44,400 --> 00:22:49,600
so

568
00:22:46,559 --> 00:22:51,600
if the cpu encounters

569
00:22:49,600 --> 00:22:52,640
illegal instructions undefined

570
00:22:51,600 --> 00:22:55,760
instruction

571
00:22:52,640 --> 00:22:58,400
then you know the competition stops so

572
00:22:55,760 --> 00:22:59,120
it's probably like that you can think of

573
00:22:58,400 --> 00:23:01,600
it

574
00:22:59,120 --> 00:23:02,720
as the situation

575
00:23:01,600 --> 00:23:06,840
and then

576
00:23:02,720 --> 00:23:11,200
for q2 we have an epson transition here

577
00:23:06,840 --> 00:23:14,880
so when the machine is on q2 it can

578
00:23:11,200 --> 00:23:17,760
just go to q3

579
00:23:14,880 --> 00:23:19,760
no matter what and the input string is

580
00:23:17,760 --> 00:23:22,799
not consumed

581
00:23:19,760 --> 00:23:25,520
so you can see that

582
00:23:22,799 --> 00:23:28,400
when it goes to q2

583
00:23:25,520 --> 00:23:30,080
actually it will folk

584
00:23:28,400 --> 00:23:33,919
another process

585
00:23:30,080 --> 00:23:35,360
to go to q3 and the one process stay at

586
00:23:33,919 --> 00:23:37,360
q2

587
00:23:35,360 --> 00:23:40,240
okay that's the

588
00:23:37,360 --> 00:23:41,200
non-deterministic part

589
00:23:40,240 --> 00:23:42,799
then

590
00:23:41,200 --> 00:23:44,799
for q3

591
00:23:42,799 --> 00:23:47,600
there is no

592
00:23:44,799 --> 00:23:51,200
there is no way to go for 0

593
00:23:47,600 --> 00:23:53,919
and the 1 to q4 and the no epsom

594
00:23:51,200 --> 00:23:54,960
destination and for q4

595
00:23:53,919 --> 00:23:58,320
loop

596
00:23:54,960 --> 00:24:00,960
at q4 and the no epsilon definition

597
00:23:58,320 --> 00:24:03,520
so that would be

598
00:24:00,960 --> 00:24:06,559
the the formal definition

599
00:24:03,520 --> 00:24:08,480
of the example here

600
00:24:06,559 --> 00:24:10,799
okay

601
00:24:08,480 --> 00:24:10,799
so

602
00:24:15,360 --> 00:24:18,960
so how

603
00:24:17,520 --> 00:24:20,320
how do these

604
00:24:18,960 --> 00:24:22,559
kind of

605
00:24:20,320 --> 00:24:25,200
non-deterministic finite automata

606
00:24:22,559 --> 00:24:25,200
operate

607
00:24:26,000 --> 00:24:29,679
still

608
00:24:26,960 --> 00:24:30,880
i use an example to let you know how it

609
00:24:29,679 --> 00:24:32,720
operates

610
00:24:30,880 --> 00:24:35,279
okay then we

611
00:24:32,720 --> 00:24:36,240
give the formal definition

612
00:24:35,279 --> 00:24:38,960
okay

613
00:24:36,240 --> 00:24:38,960
so that's the

614
00:24:41,440 --> 00:24:45,360
we have an input string

615
00:24:44,320 --> 00:24:47,440
0

616
00:24:45,360 --> 00:24:50,159
one zero

617
00:24:47,440 --> 00:24:51,520
one one zero

618
00:24:50,159 --> 00:24:54,880
okay

619
00:24:51,520 --> 00:24:58,080
so the when the machine

620
00:24:54,880 --> 00:25:02,240
starts it starts from q1

621
00:24:58,080 --> 00:25:02,240
so let's say start from q1

622
00:25:09,520 --> 00:25:11,840
then

623
00:25:12,000 --> 00:25:18,159
you see the machine sees zero

624
00:25:14,799 --> 00:25:19,039
the machine consumes the input zero

625
00:25:18,159 --> 00:25:21,679
okay

626
00:25:19,039 --> 00:25:24,799
so goes back to q1

627
00:25:21,679 --> 00:25:27,120
so that's this one

628
00:25:24,799 --> 00:25:27,120
then

629
00:25:27,440 --> 00:25:31,840
the next symbol would be

630
00:25:29,600 --> 00:25:33,840
one

631
00:25:31,840 --> 00:25:36,640
one will

632
00:25:33,840 --> 00:25:39,520
q1 go back to q1 so

633
00:25:36,640 --> 00:25:40,799
there is a one process here q1 back to

634
00:25:39,520 --> 00:25:43,840
q1

635
00:25:40,799 --> 00:25:43,840
and the other process

636
00:25:45,120 --> 00:25:51,440
goes to q2 right

637
00:25:48,320 --> 00:25:54,400
and not over yet because there is an

638
00:25:51,440 --> 00:25:57,039
amstrad here so every time

639
00:25:54,400 --> 00:26:02,240
the process hits q2

640
00:25:57,039 --> 00:26:05,600
one more process forked and go to q3 so

641
00:26:02,240 --> 00:26:09,279
actually there is a process fork here

642
00:26:05,600 --> 00:26:10,960
because of the app strong goes to q3

643
00:26:09,279 --> 00:26:13,440
so for convenience

644
00:26:10,960 --> 00:26:15,600
textbook right uh

645
00:26:13,440 --> 00:26:18,480
using this one but actually it goes to

646
00:26:15,600 --> 00:26:20,159
q2 and epson two to three

647
00:26:18,480 --> 00:26:23,200
okay

648
00:26:20,159 --> 00:26:25,760
then next symbol is here zero

649
00:26:23,200 --> 00:26:27,360
so for q3

650
00:26:25,760 --> 00:26:29,120
there is

651
00:26:27,360 --> 00:26:29,919
no way to go

652
00:26:29,120 --> 00:26:33,440
so

653
00:26:29,919 --> 00:26:35,360
the computational path stops here

654
00:26:33,440 --> 00:26:36,799
we don't need to chase that process

655
00:26:35,360 --> 00:26:41,600
anymore

656
00:26:36,799 --> 00:26:44,880
so we have q1 and q2 q1 c3 0 goes back

657
00:26:41,600 --> 00:26:46,640
to q1 okay so it's the

658
00:26:44,880 --> 00:26:51,360
road we have taken

659
00:26:46,640 --> 00:26:54,159
and the q2 c0 goes to q3

660
00:26:51,360 --> 00:26:56,400
right 0 here

661
00:26:54,159 --> 00:26:59,760
then

662
00:26:56,400 --> 00:27:02,080
q1 c1

663
00:26:59,760 --> 00:27:05,279
is the same

664
00:27:02,080 --> 00:27:06,559
as this part so there will be

665
00:27:05,279 --> 00:27:08,559
q1

666
00:27:06,559 --> 00:27:12,559
q2 and

667
00:27:08,559 --> 00:27:15,600
you know epsom 2 q1 q3

668
00:27:12,559 --> 00:27:19,279
and the q uh q3 here

669
00:27:15,600 --> 00:27:20,799
this one goes to q4

670
00:27:19,279 --> 00:27:22,240
okay

671
00:27:20,799 --> 00:27:23,840
then

672
00:27:22,240 --> 00:27:25,279
q1

673
00:27:23,840 --> 00:27:26,480
c1

674
00:27:25,279 --> 00:27:30,640
also

675
00:27:26,480 --> 00:27:36,320
q1 q2 epsilon q3

676
00:27:30,640 --> 00:27:38,159
and the q3 c6 1 goes to q4 and q4 c1

677
00:27:36,320 --> 00:27:39,200
goes to q4

678
00:27:38,159 --> 00:27:41,600
okay

679
00:27:39,200 --> 00:27:46,720
and the final symbol here

680
00:27:41,600 --> 00:27:48,960
q1 goes back to q1 q2 go to q3

681
00:27:46,720 --> 00:27:50,159
and the q3 bank

682
00:27:48,960 --> 00:27:56,159
stops

683
00:27:50,159 --> 00:27:57,919
and q4 stays at q4 q4 states at q4

684
00:27:56,159 --> 00:27:59,520
so that's how

685
00:27:57,919 --> 00:28:02,960
this example

686
00:27:59,520 --> 00:28:04,240
of nfa operates

687
00:28:02,960 --> 00:28:07,600
you can also

688
00:28:04,240 --> 00:28:10,159
trace any zero one string in this case

689
00:28:07,600 --> 00:28:13,200
and i don't think that would be too

690
00:28:10,159 --> 00:28:14,320
difficult for us to you know trace any

691
00:28:13,200 --> 00:28:17,840
machine

692
00:28:14,320 --> 00:28:17,840
unless it's very complicated

693
00:28:21,840 --> 00:28:24,080
so

694
00:28:25,279 --> 00:28:29,600
how do we

695
00:28:27,279 --> 00:28:32,240
determine

696
00:28:29,600 --> 00:28:35,120
even we know the machine operates in

697
00:28:32,240 --> 00:28:36,159
this way how do we determine that if the

698
00:28:35,120 --> 00:28:40,000
machine

699
00:28:36,159 --> 00:28:42,880
accepts this string or not

700
00:28:40,000 --> 00:28:45,840
it's pretty easy

701
00:28:42,880 --> 00:28:45,840
as long as

702
00:28:46,480 --> 00:28:50,640
the string

703
00:28:49,039 --> 00:28:51,840
are all

704
00:28:50,640 --> 00:28:53,600
consumed

705
00:28:51,840 --> 00:28:54,799
the symbol of the string are all

706
00:28:53,600 --> 00:28:55,760
processed

707
00:28:54,799 --> 00:28:57,520
you know

708
00:28:55,760 --> 00:29:00,399
that's a very

709
00:28:57,520 --> 00:29:02,159
important criteria as long as

710
00:29:00,399 --> 00:29:05,600
there is no

711
00:29:02,159 --> 00:29:05,600
symbol left

712
00:29:06,080 --> 00:29:08,640
you check

713
00:29:08,880 --> 00:29:13,840
all the process

714
00:29:10,640 --> 00:29:13,840
you check the states

715
00:29:15,120 --> 00:29:19,039
which

716
00:29:16,159 --> 00:29:21,440
you still have process on the state so

717
00:29:19,039 --> 00:29:26,480
that would be q1

718
00:29:21,440 --> 00:29:29,279
q3 q4 and q4 right because this process

719
00:29:26,480 --> 00:29:31,440
is that this process is that here it was

720
00:29:29,279 --> 00:29:33,760
done here

721
00:29:31,440 --> 00:29:36,000
instead

722
00:29:33,760 --> 00:29:36,000
so

723
00:29:36,559 --> 00:29:42,000
as long as one

724
00:29:38,840 --> 00:29:44,159
process stops

725
00:29:42,000 --> 00:29:47,440
finally stops at

726
00:29:44,159 --> 00:29:48,640
one of the accept states

727
00:29:47,440 --> 00:29:50,880
the string

728
00:29:48,640 --> 00:29:50,880
is

729
00:29:52,840 --> 00:29:57,360
accepted see in this case we have

730
00:29:55,520 --> 00:30:00,880
actually two process

731
00:29:57,360 --> 00:30:02,880
stop at q on q4

732
00:30:00,880 --> 00:30:05,760
it doesn't matter how many other

733
00:30:02,880 --> 00:30:07,039
processes stop on non-accept states

734
00:30:05,760 --> 00:30:08,799
doesn't matter

735
00:30:07,039 --> 00:30:10,640
as long as

736
00:30:08,799 --> 00:30:13,039
one

737
00:30:10,640 --> 00:30:13,039
process

738
00:30:13,120 --> 00:30:16,720
after processing all

739
00:30:15,679 --> 00:30:17,919
the

740
00:30:16,720 --> 00:30:20,720
symbols

741
00:30:17,919 --> 00:30:23,360
stop at

742
00:30:20,720 --> 00:30:27,120
one of the accept states then we

743
00:30:23,360 --> 00:30:30,000
consider that the machine accept

744
00:30:27,120 --> 00:30:30,000
that string

745
00:30:33,279 --> 00:30:36,279
okay

746
00:30:40,159 --> 00:30:42,320
so

747
00:30:43,360 --> 00:30:46,880
somehow i remember that

748
00:30:47,840 --> 00:30:52,320
many students ask a question that

749
00:30:54,000 --> 00:30:59,120
it's

750
00:30:55,039 --> 00:30:59,120
walk through the accept states

751
00:30:59,360 --> 00:31:02,159
does not mean

752
00:31:00,880 --> 00:31:05,120
does that mean

753
00:31:02,159 --> 00:31:07,360
the machine accept the string

754
00:31:05,120 --> 00:31:09,120
basically the answer is apparently no

755
00:31:07,360 --> 00:31:12,240
why because

756
00:31:09,120 --> 00:31:14,320
we still need to determine

757
00:31:12,240 --> 00:31:16,960
accept or not

758
00:31:14,320 --> 00:31:19,279
according to the definition

759
00:31:16,960 --> 00:31:23,120
you can easily check that for

760
00:31:19,279 --> 00:31:24,080
uh determined finite automaton right dfa

761
00:31:23,120 --> 00:31:24,880
and

762
00:31:24,080 --> 00:31:27,279
for

763
00:31:24,880 --> 00:31:28,720
nfa how do we

764
00:31:27,279 --> 00:31:29,519
define

765
00:31:28,720 --> 00:31:32,799
if

766
00:31:29,519 --> 00:31:36,000
an nfa accepts a string

767
00:31:32,799 --> 00:31:36,000
how do we define that

768
00:31:37,440 --> 00:31:41,360
the formal definition

769
00:31:39,919 --> 00:31:42,559
is

770
00:31:41,360 --> 00:31:43,760
also

771
00:31:42,559 --> 00:31:46,559
a little

772
00:31:43,760 --> 00:31:47,600
extension

773
00:31:46,559 --> 00:31:50,960
of the

774
00:31:47,600 --> 00:31:52,799
definition of dfa

775
00:31:50,960 --> 00:31:57,200
so let's say

776
00:31:52,799 --> 00:31:57,200
a non-deterministic finite automaton

777
00:31:59,039 --> 00:32:03,120
a non-deterministic final automaton

778
00:32:03,679 --> 00:32:07,360
accepts a string

779
00:32:08,399 --> 00:32:12,080
where

780
00:32:10,080 --> 00:32:12,840
each part

781
00:32:12,080 --> 00:32:14,640
is

782
00:32:12,840 --> 00:32:16,880
in

783
00:32:14,640 --> 00:32:18,720
alphabet with

784
00:32:16,880 --> 00:32:20,880
empty string

785
00:32:18,720 --> 00:32:23,440
you can check that

786
00:32:20,880 --> 00:32:27,480
with the definition with this definition

787
00:32:23,440 --> 00:32:27,480
of dfa that

788
00:32:29,200 --> 00:32:34,799
m here

789
00:32:31,039 --> 00:32:35,919
is not the length of the string okay

790
00:32:34,799 --> 00:32:38,640
so

791
00:32:35,919 --> 00:32:40,640
in dfa we say that

792
00:32:38,640 --> 00:32:45,039
the length of the

793
00:32:40,640 --> 00:32:48,320
string is m so the each symbol of

794
00:32:45,039 --> 00:32:51,760
the string can be

795
00:32:48,320 --> 00:32:53,519
written as this and you have a 0

796
00:32:51,760 --> 00:32:54,559
1 r 2

797
00:32:53,519 --> 00:32:55,840
2

798
00:32:54,559 --> 00:32:57,919
r n

799
00:32:55,840 --> 00:33:00,480
something like that

800
00:32:57,919 --> 00:33:03,760
but here we use the

801
00:33:00,480 --> 00:33:07,279
symbol m here that means

802
00:33:03,760 --> 00:33:12,480
y 1 y 2 through y n

803
00:33:07,279 --> 00:33:12,480
is not exactly each symbol of the

804
00:33:12,559 --> 00:33:16,559
string

805
00:33:13,919 --> 00:33:18,799
some of them may be absolute that's that

806
00:33:16,559 --> 00:33:20,640
means empty string some of them may be

807
00:33:18,799 --> 00:33:23,039
nothing actually

808
00:33:20,640 --> 00:33:26,240
anyway we will look back to the example

809
00:33:23,039 --> 00:33:27,120
but we go on with the definition here

810
00:33:26,240 --> 00:33:30,559
so

811
00:33:27,120 --> 00:33:32,960
we say an nfa accepts string

812
00:33:30,559 --> 00:33:32,960
w

813
00:33:33,039 --> 00:33:39,679
w can be written as y1 y2 to ym

814
00:33:37,120 --> 00:33:41,760
where each y i

815
00:33:39,679 --> 00:33:42,640
is either a symbol

816
00:33:41,760 --> 00:33:44,240
or

817
00:33:42,640 --> 00:33:48,480
an empty string

818
00:33:44,240 --> 00:33:52,320
then if a sequence of states r 0 r 1 to

819
00:33:48,480 --> 00:33:56,080
r n which is exactly n plus 1 okay

820
00:33:52,320 --> 00:33:57,760
exists with the three conditions

821
00:33:56,080 --> 00:33:59,200
first

822
00:33:57,760 --> 00:34:01,840
first condition

823
00:33:59,200 --> 00:34:03,919
r zero is the star state it's the same

824
00:34:01,840 --> 00:34:05,440
as dfa

825
00:34:03,919 --> 00:34:06,880
second condition

826
00:34:05,440 --> 00:34:10,000
rn

827
00:34:06,880 --> 00:34:13,440
is a member of the accept state it's als

828
00:34:10,000 --> 00:34:15,200
it is also the criteria the condition of

829
00:34:13,440 --> 00:34:18,000
the definition

830
00:34:15,200 --> 00:34:21,000
for dfa right

831
00:34:18,000 --> 00:34:21,000
and

832
00:34:22,960 --> 00:34:28,879
here

833
00:34:24,800 --> 00:34:32,560
since the transition function of

834
00:34:28,879 --> 00:34:36,560
nfa gives a set right because the

835
00:34:32,560 --> 00:34:37,760
transition function of nfa

836
00:34:36,560 --> 00:34:40,399
reads

837
00:34:37,760 --> 00:34:41,280
a state right

838
00:34:40,399 --> 00:34:43,040
and

839
00:34:41,280 --> 00:34:45,520
some symbol

840
00:34:43,040 --> 00:34:47,280
or epsilon

841
00:34:45,520 --> 00:34:49,520
what will

842
00:34:47,280 --> 00:34:50,480
the transition function for an effect

843
00:34:49,520 --> 00:34:52,720
give you

844
00:34:50,480 --> 00:34:56,800
it will give you a set

845
00:34:52,720 --> 00:34:58,400
for example you go tell you goes to p

846
00:34:56,800 --> 00:34:59,839
and the x

847
00:34:58,400 --> 00:35:01,040
and y

848
00:34:59,839 --> 00:35:04,800
three states

849
00:35:01,040 --> 00:35:06,720
right see for dfa the transition

850
00:35:04,800 --> 00:35:09,760
function gives you the

851
00:35:06,720 --> 00:35:11,119
deterministic next step like

852
00:35:09,760 --> 00:35:15,040
p

853
00:35:11,119 --> 00:35:18,079
but for nfa it gives you a set

854
00:35:15,040 --> 00:35:20,720
so this difference reflects

855
00:35:18,079 --> 00:35:22,079
in the definition of acceptance of

856
00:35:20,720 --> 00:35:26,000
strings

857
00:35:22,079 --> 00:35:27,440
for nf for dfa you can see that we have

858
00:35:26,000 --> 00:35:29,359
delta

859
00:35:27,440 --> 00:35:31,680
ri

860
00:35:29,359 --> 00:35:35,200
w i plus 1

861
00:35:31,680 --> 00:35:38,000
equal to r i plus 1

862
00:35:35,200 --> 00:35:41,280
that's the that's the uh that's what we

863
00:35:38,000 --> 00:35:42,160
have in the definition for dfa and here

864
00:35:41,280 --> 00:35:45,520
we

865
00:35:42,160 --> 00:35:47,920
write the whole thing like this

866
00:35:45,520 --> 00:35:51,760
it is because

867
00:35:47,920 --> 00:35:54,960
the function here gives a set like this

868
00:35:51,760 --> 00:35:56,400
and we only need the next

869
00:35:54,960 --> 00:35:58,880
state

870
00:35:56,400 --> 00:35:59,839
is one of

871
00:35:58,880 --> 00:36:04,720
the

872
00:35:59,839 --> 00:36:06,880
one is one member in the result

873
00:36:04,720 --> 00:36:08,800
because the result is a set

874
00:36:06,880 --> 00:36:12,280
right

875
00:36:08,800 --> 00:36:12,280
so that means

876
00:36:13,440 --> 00:36:18,560
when you have

877
00:36:16,160 --> 00:36:21,200
when you uh when the pro up when the

878
00:36:18,560 --> 00:36:25,200
machine is on ri

879
00:36:21,200 --> 00:36:27,599
and it says y i plus one

880
00:36:25,200 --> 00:36:30,400
ri plus 1 is

881
00:36:27,599 --> 00:36:33,200
within the passes

882
00:36:30,400 --> 00:36:33,200
of the machine

883
00:36:34,640 --> 00:36:37,920
right

884
00:36:36,880 --> 00:36:41,560
so

885
00:36:37,920 --> 00:36:41,560
according to

886
00:36:41,839 --> 00:36:45,040
you can

887
00:36:43,040 --> 00:36:47,520
try to

888
00:36:45,040 --> 00:36:50,079
read the definition based on the

889
00:36:47,520 --> 00:36:52,079
definition for dfa

890
00:36:50,079 --> 00:36:52,800
it will be easier

891
00:36:52,079 --> 00:36:54,960
to

892
00:36:52,800 --> 00:36:56,000
catch why we use

893
00:36:54,960 --> 00:36:57,599
this

894
00:36:56,000 --> 00:37:00,480
this

895
00:36:57,599 --> 00:37:02,480
formula and this style of

896
00:37:00,480 --> 00:37:05,440
definition

897
00:37:02,480 --> 00:37:08,480
then we go back to our

898
00:37:05,440 --> 00:37:10,000
example here okay

899
00:37:08,480 --> 00:37:11,839
so

900
00:37:10,000 --> 00:37:13,200
we say that

901
00:37:11,839 --> 00:37:14,320
this machine

902
00:37:13,200 --> 00:37:16,640
and

903
00:37:14,320 --> 00:37:18,000
accept the string

904
00:37:16,640 --> 00:37:18,880
0 1

905
00:37:18,000 --> 00:37:20,839
0

906
00:37:18,880 --> 00:37:24,640
1 1

907
00:37:20,839 --> 00:37:27,280
0 is because

908
00:37:24,640 --> 00:37:30,640
we actually can find

909
00:37:27,280 --> 00:37:30,640
we actually can find

910
00:37:33,520 --> 00:37:37,440
a sequence

911
00:37:35,200 --> 00:37:40,320
of states

912
00:37:37,440 --> 00:37:43,599
satisfying the three conditions

913
00:37:40,320 --> 00:37:45,680
actually we can find two in this case

914
00:37:43,599 --> 00:37:47,280
so let's go

915
00:37:45,680 --> 00:37:48,480
uh first one

916
00:37:47,280 --> 00:37:50,400
which is

917
00:37:48,480 --> 00:37:53,200
easier

918
00:37:50,400 --> 00:37:54,640
we separate the string here

919
00:37:53,200 --> 00:37:56,480
as

920
00:37:54,640 --> 00:37:57,280
y

921
00:37:56,480 --> 00:37:58,800
1

922
00:37:57,280 --> 00:37:59,680
y 2

923
00:37:58,800 --> 00:38:00,560
y

924
00:37:59,680 --> 00:38:01,440
3

925
00:38:00,560 --> 00:38:02,560
y

926
00:38:01,440 --> 00:38:04,480
4

927
00:38:02,560 --> 00:38:06,960
y 5

928
00:38:04,480 --> 00:38:09,680
y 6.

929
00:38:06,960 --> 00:38:12,800
what is the corresponding

930
00:38:09,680 --> 00:38:14,079
sequence of states that would be

931
00:38:12,800 --> 00:38:15,280
q 1

932
00:38:14,079 --> 00:38:17,680
q 1

933
00:38:15,280 --> 00:38:19,599
q 2

934
00:38:17,680 --> 00:38:22,960
q3

935
00:38:19,599 --> 00:38:24,160
q4 q4 and q4

936
00:38:22,960 --> 00:38:26,320
right

937
00:38:24,160 --> 00:38:27,599
so you see

938
00:38:26,320 --> 00:38:29,119
firstly

939
00:38:27,599 --> 00:38:30,880
q1

940
00:38:29,119 --> 00:38:32,560
which is r0

941
00:38:30,880 --> 00:38:35,920
is the start state

942
00:38:32,560 --> 00:38:37,920
and finally q4 is one of the accept

943
00:38:35,920 --> 00:38:39,839
states of course this machine has only

944
00:38:37,920 --> 00:38:40,800
one accept state

945
00:38:39,839 --> 00:38:44,960
okay

946
00:38:40,800 --> 00:38:44,960
and you see that q1

947
00:38:45,359 --> 00:38:53,040
is within delta of q1

948
00:38:50,720 --> 00:38:53,040
0

949
00:38:53,119 --> 00:38:59,760
right because there are delta of q1

950
00:38:56,320 --> 00:39:01,520
sorry it's a comma here

951
00:38:59,760 --> 00:39:03,280
difficult to write it

952
00:39:01,520 --> 00:39:06,480
so q1

953
00:39:03,280 --> 00:39:07,920
0 will return something uh will what

954
00:39:06,480 --> 00:39:12,079
what will written

955
00:39:07,920 --> 00:39:13,680
just q1 as a set right so q1 is in the

956
00:39:12,079 --> 00:39:14,880
set

957
00:39:13,680 --> 00:39:17,839
and

958
00:39:14,880 --> 00:39:19,119
you can see that q2

959
00:39:17,839 --> 00:39:20,640
is

960
00:39:19,119 --> 00:39:23,280
in

961
00:39:20,640 --> 00:39:23,280
q1

962
00:39:23,359 --> 00:39:28,079
1

963
00:39:25,280 --> 00:39:28,960
and the q3

964
00:39:28,079 --> 00:39:30,320
is

965
00:39:28,960 --> 00:39:33,200
in

966
00:39:30,320 --> 00:39:33,200
q2

967
00:39:34,000 --> 00:39:37,920
0

968
00:39:36,320 --> 00:39:39,839
q4

969
00:39:37,920 --> 00:39:42,800
is in

970
00:39:39,839 --> 00:39:44,960
q3

971
00:39:42,800 --> 00:39:46,160
1

972
00:39:44,960 --> 00:39:49,599
and also

973
00:39:46,160 --> 00:39:50,640
q4 is in q4

974
00:39:49,599 --> 00:39:53,440
1

975
00:39:50,640 --> 00:39:55,359
q4 is in q4

976
00:39:53,440 --> 00:39:56,800
0

977
00:39:55,359 --> 00:39:57,839
right

978
00:39:56,800 --> 00:40:00,880
so

979
00:39:57,839 --> 00:40:04,079
why we say that the machine is machine

980
00:40:00,880 --> 00:40:06,800
and accept the string one zero

981
00:40:04,079 --> 00:40:09,599
sorry zero one one one zero

982
00:40:06,800 --> 00:40:10,560
because we can actually separate

983
00:40:09,599 --> 00:40:14,640
divide

984
00:40:10,560 --> 00:40:18,319
the input string to y1 y2 to y6 which is

985
00:40:14,640 --> 00:40:19,280
exactly one symbol each part and we can

986
00:40:18,319 --> 00:40:21,680
find

987
00:40:19,280 --> 00:40:23,599
the sequence of states

988
00:40:21,680 --> 00:40:26,400
0 through

989
00:40:23,599 --> 00:40:27,680
one two three four five six

990
00:40:26,400 --> 00:40:30,079
r six

991
00:40:27,680 --> 00:40:31,760
which is exactly

992
00:40:30,079 --> 00:40:34,720
uh

993
00:40:31,760 --> 00:40:36,079
one q one q one q two q three q four q

994
00:40:34,720 --> 00:40:39,040
four q four

995
00:40:36,079 --> 00:40:40,720
and satisfying the three conditions

996
00:40:39,040 --> 00:40:41,760
okay

997
00:40:40,720 --> 00:40:43,839
and

998
00:40:41,760 --> 00:40:44,880
like i said actually we have two

999
00:40:43,839 --> 00:40:46,800
sequence

1000
00:40:44,880 --> 00:40:48,880
in this case

1001
00:40:46,800 --> 00:40:50,560
the definition says that

1002
00:40:48,880 --> 00:40:53,119
if any

1003
00:40:50,560 --> 00:40:55,280
such sequence exist the machine accept

1004
00:40:53,119 --> 00:40:57,440
the string right so we already know that

1005
00:40:55,280 --> 00:40:59,839
the machine accept the string

1006
00:40:57,440 --> 00:41:00,880
but in this case we can see another

1007
00:40:59,839 --> 00:41:03,040
sequence

1008
00:41:00,880 --> 00:41:03,040
so

1009
00:41:03,359 --> 00:41:06,960
if you remember

1010
00:41:05,680 --> 00:41:09,200
there is a

1011
00:41:06,960 --> 00:41:10,720
absolute here

1012
00:41:09,200 --> 00:41:12,319
right

1013
00:41:10,720 --> 00:41:14,880
so this

1014
00:41:12,319 --> 00:41:18,960
transition actually need to break down

1015
00:41:14,880 --> 00:41:20,480
like this so we actually have y one

1016
00:41:18,960 --> 00:41:23,200
y 2

1017
00:41:20,480 --> 00:41:23,200
y 3

1018
00:41:23,760 --> 00:41:28,480
y 4

1019
00:41:25,280 --> 00:41:28,480
wi-fi is here

1020
00:41:29,680 --> 00:41:34,440
y

1021
00:41:30,480 --> 00:41:34,440
6 oh sorry

1022
00:41:37,760 --> 00:41:40,560
wi-fi is here

1023
00:41:39,680 --> 00:41:41,520
y

1024
00:41:40,560 --> 00:41:43,599
six

1025
00:41:41,520 --> 00:41:44,400
y seven

1026
00:41:43,599 --> 00:41:48,240
see

1027
00:41:44,400 --> 00:41:50,800
so there is a y here is empty string now

1028
00:41:48,240 --> 00:41:52,960
the symbol of the input string

1029
00:41:50,800 --> 00:41:57,359
and what is the sequence

1030
00:41:52,960 --> 00:41:57,359
corresponding to such a division

1031
00:41:57,920 --> 00:42:03,440
so the sequence will be q1

1032
00:42:00,880 --> 00:42:04,880
q1 q1

1033
00:42:03,440 --> 00:42:08,560
q1

1034
00:42:04,880 --> 00:42:10,319
q2 q3 q4

1035
00:42:08,560 --> 00:42:13,200
q4

1036
00:42:10,319 --> 00:42:17,359
so we actually have r0

1037
00:42:13,200 --> 00:42:18,240
1 2 3 4 five seven

1038
00:42:17,359 --> 00:42:23,119
ah

1039
00:42:18,240 --> 00:42:25,200
five six seven seven here r7

1040
00:42:23,119 --> 00:42:26,240
okay you can also check

1041
00:42:25,200 --> 00:42:28,400
if

1042
00:42:26,240 --> 00:42:30,560
the next one is

1043
00:42:28,400 --> 00:42:32,960
within the return

1044
00:42:30,560 --> 00:42:35,680
results of the delta function of the

1045
00:42:32,960 --> 00:42:36,480
previous one with the input

1046
00:42:35,680 --> 00:42:38,319
okay

1047
00:42:36,480 --> 00:42:40,960
so let's check this one

1048
00:42:38,319 --> 00:42:40,960
q3

1049
00:42:42,160 --> 00:42:46,000
this one

1050
00:42:44,480 --> 00:42:46,880
q3

1051
00:42:46,000 --> 00:42:49,119
is

1052
00:42:46,880 --> 00:42:51,359
actually in

1053
00:42:49,119 --> 00:42:53,920
q2

1054
00:42:51,359 --> 00:42:53,920
epson

1055
00:42:54,800 --> 00:43:03,520
right because q2 epsilon is

1056
00:43:00,160 --> 00:43:03,520
a set of q3

1057
00:43:05,680 --> 00:43:09,520
so

1058
00:43:06,480 --> 00:43:11,359
for this machine to accept the string

1059
00:43:09,520 --> 00:43:13,599
0 1

1060
00:43:11,359 --> 00:43:16,240
zero one one zero

1061
00:43:13,599 --> 00:43:19,200
it actually has two paths

1062
00:43:16,240 --> 00:43:21,520
corresponding to two

1063
00:43:19,200 --> 00:43:23,119
uh two ways to

1064
00:43:21,520 --> 00:43:27,200
divide the string

1065
00:43:23,119 --> 00:43:30,560
and the two corresponding respectively

1066
00:43:27,200 --> 00:43:30,560
the sequence of states

1067
00:43:31,359 --> 00:43:35,760
so in this in this way you can

1068
00:43:33,839 --> 00:43:39,119
you can know that

1069
00:43:35,760 --> 00:43:41,280
why we say that okay uh here the process

1070
00:43:39,119 --> 00:43:42,160
is dead here process that it doesn't

1071
00:43:41,280 --> 00:43:43,280
matter

1072
00:43:42,160 --> 00:43:45,920
because

1073
00:43:43,280 --> 00:43:48,880
there won't be any sequence of states

1074
00:43:45,920 --> 00:43:50,640
generated by such path computational

1075
00:43:48,880 --> 00:43:52,319
path right

1076
00:43:50,640 --> 00:43:55,839
so

1077
00:43:52,319 --> 00:43:55,839
as long as one path

1078
00:43:56,319 --> 00:44:00,160
got

1079
00:43:57,359 --> 00:44:02,640
finally got the

1080
00:44:00,160 --> 00:44:05,200
accept states then we consider the

1081
00:44:02,640 --> 00:44:08,800
machine accept that string and the

1082
00:44:05,200 --> 00:44:11,280
formal definition can be returned

1083
00:44:08,800 --> 00:44:11,280
this way

1084
00:44:11,520 --> 00:44:17,760
it's not actually very different from

1085
00:44:14,960 --> 00:44:19,359
that's for dfa

1086
00:44:17,760 --> 00:44:21,440
as long as you know

1087
00:44:19,359 --> 00:44:23,839
where to look at

1088
00:44:21,440 --> 00:44:23,839
okay

1089
00:44:23,920 --> 00:44:26,160
so

1090
00:44:26,640 --> 00:44:32,160
the way to divide the string

1091
00:44:29,839 --> 00:44:34,319
and the corresponding

1092
00:44:32,160 --> 00:44:36,880
sequence of states

1093
00:44:34,319 --> 00:44:39,920
as long as the three condition is

1094
00:44:36,880 --> 00:44:42,720
satisfied then we say the machine

1095
00:44:39,920 --> 00:44:42,720
accept the string

1096
00:44:43,440 --> 00:44:53,119
okay so we have introduced a new kind of

1097
00:44:50,480 --> 00:44:56,000
binaural automata right

1098
00:44:53,119 --> 00:44:57,200
which has the capability of

1099
00:44:56,000 --> 00:45:01,440
of doing

1100
00:44:57,200 --> 00:45:02,720
non-com non-deterministic computation

1101
00:45:01,440 --> 00:45:05,440
and

1102
00:45:02,720 --> 00:45:06,480
here is the question

1103
00:45:05,440 --> 00:45:08,240
why

1104
00:45:06,480 --> 00:45:09,280
we want to introduce a new kind of

1105
00:45:08,240 --> 00:45:13,839
machine

1106
00:45:09,280 --> 00:45:13,839
i remember that we are trying to prove

1107
00:45:14,880 --> 00:45:21,599
the class of regular languages is under

1108
00:45:18,079 --> 00:45:23,839
the concatenation operation right

1109
00:45:21,599 --> 00:45:23,839
so

1110
00:45:24,079 --> 00:45:27,200
we need to

1111
00:45:25,359 --> 00:45:29,760
go we need to

1112
00:45:27,200 --> 00:45:29,760
go back

1113
00:45:29,839 --> 00:45:34,000
to proof

1114
00:45:30,839 --> 00:45:35,359
that how do we go how do we go back to

1115
00:45:34,000 --> 00:45:37,119
proof that

1116
00:45:35,359 --> 00:45:38,160
we want to

1117
00:45:37,119 --> 00:45:41,440
know

1118
00:45:38,160 --> 00:45:43,839
what kind of language do

1119
00:45:41,440 --> 00:45:46,839
the non-deterministic financial automata

1120
00:45:43,839 --> 00:45:46,839
recognize

1121
00:45:47,119 --> 00:45:50,800
you see

1122
00:45:48,319 --> 00:45:53,200
when we tweak the machine when we change

1123
00:45:50,800 --> 00:45:56,560
the machine when we define a new time

1124
00:45:53,200 --> 00:45:58,000
machine the machine is probably probably

1125
00:45:56,560 --> 00:46:01,280
different from

1126
00:45:58,000 --> 00:46:02,400
the original one

1127
00:46:01,280 --> 00:46:05,440
so

1128
00:46:02,400 --> 00:46:06,800
now we next step we want to

1129
00:46:05,440 --> 00:46:08,640
know

1130
00:46:06,800 --> 00:46:09,440
what kind of language

1131
00:46:08,640 --> 00:46:11,119
do

1132
00:46:09,440 --> 00:46:12,560
non-deterministic final automata

1133
00:46:11,119 --> 00:46:13,599
recognize

1134
00:46:12,560 --> 00:46:15,839
to see

1135
00:46:13,599 --> 00:46:16,880
if the new machine

1136
00:46:15,839 --> 00:46:19,520
is

1137
00:46:16,880 --> 00:46:21,920
if this kind of new machine is helpful

1138
00:46:19,520 --> 00:46:22,880
for our original purpose

1139
00:46:21,920 --> 00:46:26,240
okay

1140
00:46:22,880 --> 00:46:29,839
so we will see that

1141
00:46:26,240 --> 00:46:29,839
in the next lecture

