1
00:00:06,960 --> 00:00:10,080
okay

2
00:00:07,759 --> 00:00:13,200
uh after defining polynomial time

3
00:00:10,080 --> 00:00:15,679
reducibility and proofed

4
00:00:13,200 --> 00:00:19,279
theorem 7.31

5
00:00:15,679 --> 00:00:20,080
let's go on with an example okay

6
00:00:19,279 --> 00:00:23,279
okay

7
00:00:20,080 --> 00:00:23,279
uh let's define

8
00:00:23,920 --> 00:00:29,119
a normal phone which is called

9
00:00:26,400 --> 00:00:30,880
a conjunctive normal form for boolean

10
00:00:29,119 --> 00:00:32,640
formula okay

11
00:00:30,880 --> 00:00:35,840
so for boolean formula actually we

12
00:00:32,640 --> 00:00:36,640
usually consider boolean variables like

13
00:00:35,840 --> 00:00:38,719
x

14
00:00:36,640 --> 00:00:40,719
y or z

15
00:00:38,719 --> 00:00:42,160
they are called boolean variables

16
00:00:40,719 --> 00:00:45,440
because they have

17
00:00:42,160 --> 00:00:47,039
two possible values usually zero

18
00:00:45,440 --> 00:00:49,840
and one or

19
00:00:47,039 --> 00:00:52,079
true and false okay

20
00:00:49,840 --> 00:00:53,440
and here we call

21
00:00:52,079 --> 00:00:56,399
here we call

22
00:00:53,440 --> 00:00:59,039
a boolean variable and it's

23
00:00:56,399 --> 00:01:03,440
negation like x bar

24
00:00:59,039 --> 00:01:08,240
the negation means that if x is is false

25
00:01:03,440 --> 00:01:09,600
x bar is true and if x is true x bar is

26
00:01:08,240 --> 00:01:11,439
fourth okay

27
00:01:09,600 --> 00:01:14,320
and we call

28
00:01:11,439 --> 00:01:18,960
a boolean variable and it's negation

29
00:01:14,320 --> 00:01:18,960
literal okay literal and then

30
00:01:19,759 --> 00:01:28,560
literals connected

31
00:01:23,360 --> 00:01:31,280
by or like this one x1 or x2 bar or x3

32
00:01:28,560 --> 00:01:32,960
bar or x4 okay

33
00:01:31,280 --> 00:01:36,000
so leader rows

34
00:01:32,960 --> 00:01:36,000
connected by

35
00:01:36,079 --> 00:01:38,640
or

36
00:01:37,119 --> 00:01:40,880
operator

37
00:01:38,640 --> 00:01:42,720
forms

38
00:01:40,880 --> 00:01:45,600
a clause

39
00:01:42,720 --> 00:01:47,680
from circles

40
00:01:45,600 --> 00:01:49,360
so conjunctive normal phone

41
00:01:47,680 --> 00:01:50,960
always uh

42
00:01:49,360 --> 00:01:52,840
or

43
00:01:50,960 --> 00:01:56,320
uh

44
00:01:52,840 --> 00:01:56,320
cnf formula

45
00:01:58,399 --> 00:02:03,040
or cna formula

46
00:02:00,799 --> 00:02:03,040
is

47
00:02:04,079 --> 00:02:07,079
clauses

48
00:02:08,160 --> 00:02:11,840
connected

49
00:02:10,560 --> 00:02:13,520
by using

50
00:02:11,840 --> 00:02:14,720
and

51
00:02:13,520 --> 00:02:17,360
okay

52
00:02:14,720 --> 00:02:19,840
so we usually call it conjunction and

53
00:02:17,360 --> 00:02:21,360
it's conjunction and or is this

54
00:02:19,840 --> 00:02:22,959
disjunction

55
00:02:21,360 --> 00:02:26,800
so

56
00:02:22,959 --> 00:02:28,560
boolean formula in this form

57
00:02:26,800 --> 00:02:29,760
we call this form

58
00:02:28,560 --> 00:02:32,800
cnf

59
00:02:29,760 --> 00:02:35,440
formula so conjunctive normal form

60
00:02:32,800 --> 00:02:39,440
and is there disjunctive normal phone

61
00:02:35,440 --> 00:02:40,720
yes there is okay and

62
00:02:39,440 --> 00:02:43,519
we call it

63
00:02:40,720 --> 00:02:46,640
normal form like

64
00:02:43,519 --> 00:02:48,000
we explained in

65
00:02:46,640 --> 00:02:51,200
uh

66
00:02:48,000 --> 00:02:52,319
what chapter three uh chapter two i

67
00:02:51,200 --> 00:02:54,640
guess

68
00:02:52,319 --> 00:02:54,640
um

69
00:02:54,800 --> 00:02:58,319
chomsky normal phone okay like we

70
00:02:57,040 --> 00:03:00,640
explain that

71
00:02:58,319 --> 00:03:03,200
when we when we uh

72
00:03:00,640 --> 00:03:04,879
set some form to be normal phone that

73
00:03:03,200 --> 00:03:06,879
means

74
00:03:04,879 --> 00:03:09,280
all the stuff

75
00:03:06,879 --> 00:03:10,159
like for context free grammar we say

76
00:03:09,280 --> 00:03:11,120
that

77
00:03:10,159 --> 00:03:12,400
uh

78
00:03:11,120 --> 00:03:14,480
we call the

79
00:03:12,400 --> 00:03:16,840
normal phone we introduced

80
00:03:14,480 --> 00:03:20,640
uh chomsky normal phone

81
00:03:16,840 --> 00:03:22,879
and we call that kind of form normal

82
00:03:20,640 --> 00:03:24,480
form because all

83
00:03:22,879 --> 00:03:26,720
basically

84
00:03:24,480 --> 00:03:26,720
all

85
00:03:27,040 --> 00:03:31,120
context-free grammar can be represented

86
00:03:29,280 --> 00:03:32,480
by that

87
00:03:31,120 --> 00:03:34,720
can be represented

88
00:03:32,480 --> 00:03:36,239
in such a form

89
00:03:34,720 --> 00:03:38,720
so conjunct

90
00:03:36,239 --> 00:03:40,640
conjunctive uh conjunctive normal phone

91
00:03:38,720 --> 00:03:41,680
here is the same

92
00:03:40,640 --> 00:03:43,760
that means

93
00:03:41,680 --> 00:03:44,879
all boolean formula

94
00:03:43,760 --> 00:03:46,959
can be

95
00:03:44,879 --> 00:03:49,680
represented

96
00:03:46,959 --> 00:03:52,879
in this form that's why we call it

97
00:03:49,680 --> 00:03:53,760
conjunctive normal form and why and how

98
00:03:52,879 --> 00:03:56,480
we

99
00:03:53,760 --> 00:03:58,959
is are not uh problems here are not

100
00:03:56,480 --> 00:04:01,040
questions here we want to answer

101
00:03:58,959 --> 00:04:04,000
here we just need to know that

102
00:04:01,040 --> 00:04:07,760
boolean formula can be represented by c

103
00:04:04,000 --> 00:04:10,560
and f okay so any boolean formula can be

104
00:04:07,760 --> 00:04:12,560
represented by

105
00:04:10,560 --> 00:04:15,519
clauses

106
00:04:12,560 --> 00:04:16,320
connected

107
00:04:15,519 --> 00:04:18,639
with

108
00:04:16,320 --> 00:04:18,639
and

109
00:04:18,959 --> 00:04:24,400
okay so also disjunctive normal phone

110
00:04:21,120 --> 00:04:26,479
but we don't uh use that here

111
00:04:24,400 --> 00:04:27,520
and if

112
00:04:26,479 --> 00:04:31,199
if

113
00:04:27,520 --> 00:04:33,600
okay again so since all

114
00:04:31,199 --> 00:04:36,400
boolean formulas can be represented in

115
00:04:33,600 --> 00:04:38,720
conjunctive normal form so uh if you

116
00:04:36,400 --> 00:04:40,800
have any boolean formula you can

117
00:04:38,720 --> 00:04:42,960
you know convert it to

118
00:04:40,800 --> 00:04:45,360
c and f

119
00:04:42,960 --> 00:04:47,120
and so

120
00:04:45,360 --> 00:04:50,080
it is possible to

121
00:04:47,120 --> 00:04:52,960
find equivalent not possibly

122
00:04:50,080 --> 00:04:54,720
it should we surely can find equivalent

123
00:04:52,960 --> 00:04:56,960
c and f for any

124
00:04:54,720 --> 00:04:58,400
boolean formula okay

125
00:04:56,960 --> 00:05:00,320
so we think

126
00:04:58,400 --> 00:05:03,520
we think cnf

127
00:05:00,320 --> 00:05:05,680
that's defined as a spatial type

128
00:05:03,520 --> 00:05:11,120
spatial form of

129
00:05:05,680 --> 00:05:15,039
cnf we call it three cnf formula okay

130
00:05:11,120 --> 00:05:15,039
so for free cnn formula

131
00:05:15,120 --> 00:05:18,400
uh

132
00:05:16,479 --> 00:05:20,720
each class

133
00:05:18,400 --> 00:05:22,000
has exactly

134
00:05:20,720 --> 00:05:23,600
three

135
00:05:22,000 --> 00:05:24,880
literals

136
00:05:23,600 --> 00:05:27,919
okay

137
00:05:24,880 --> 00:05:28,800
we don't know how many clauses that uh

138
00:05:27,919 --> 00:05:31,440
it

139
00:05:28,800 --> 00:05:34,479
you can have as many as

140
00:05:31,440 --> 00:05:39,520
possible clauses you want but each

141
00:05:34,479 --> 00:05:42,160
clause has exactly three cnf formula

142
00:05:39,520 --> 00:05:44,720
oh sorry has three literals

143
00:05:42,160 --> 00:05:46,479
if you have a cnf

144
00:05:44,720 --> 00:05:48,880
of such property

145
00:05:46,479 --> 00:05:51,039
of such a property we call it

146
00:05:48,880 --> 00:05:53,120
three cnf formula

147
00:05:51,039 --> 00:05:55,440
then we define

148
00:05:53,120 --> 00:05:58,400
a special

149
00:05:55,440 --> 00:06:00,639
problem or a language here we call three

150
00:05:58,400 --> 00:06:02,160
set

151
00:06:00,639 --> 00:06:04,160
for three sets

152
00:06:02,160 --> 00:06:07,919
that means

153
00:06:04,160 --> 00:06:10,039
it contains all boolean formulas

154
00:06:07,919 --> 00:06:14,720
what kind of formulas

155
00:06:10,039 --> 00:06:15,919
satisfiable three cnf formula

156
00:06:14,720 --> 00:06:18,479
okay

157
00:06:15,919 --> 00:06:20,639
so three set

158
00:06:18,479 --> 00:06:22,000
three set contains

159
00:06:20,639 --> 00:06:23,840
all

160
00:06:22,000 --> 00:06:27,759
satisfiable

161
00:06:23,840 --> 00:06:30,880
three cnf formula

162
00:06:27,759 --> 00:06:35,000
okay so this uh language or problem is

163
00:06:30,880 --> 00:06:35,000
well defined right

164
00:06:41,280 --> 00:06:46,800
now we want to show it as an example for

165
00:06:44,639 --> 00:06:47,759
polynomial time reduction

166
00:06:46,800 --> 00:06:49,120
okay

167
00:06:47,759 --> 00:06:50,960
so

168
00:06:49,120 --> 00:06:52,880
here it uh

169
00:06:50,960 --> 00:06:57,120
it is theorem

170
00:06:52,880 --> 00:07:00,840
7.32 we want to prove that three set

171
00:06:57,120 --> 00:07:03,680
is polynomial time reducible to

172
00:07:00,840 --> 00:07:05,759
click okay polynomial time reducible to

173
00:07:03,680 --> 00:07:06,639
click

174
00:07:05,759 --> 00:07:09,120
then

175
00:07:06,639 --> 00:07:10,400
don't forget what we need to do to prove

176
00:07:09,120 --> 00:07:14,000
this uh

177
00:07:10,400 --> 00:07:17,039
theorem we want to have a function

178
00:07:14,000 --> 00:07:20,160
we want to have a function the function

179
00:07:17,039 --> 00:07:21,759
is polynomial time computable

180
00:07:20,160 --> 00:07:24,560
and

181
00:07:21,759 --> 00:07:25,599
the function provides

182
00:07:24,560 --> 00:07:27,360
the

183
00:07:25,599 --> 00:07:28,840
capability uh

184
00:07:27,360 --> 00:07:32,479
the

185
00:07:28,840 --> 00:07:36,880
function provides such

186
00:07:32,479 --> 00:07:36,880
a property that if you have a

187
00:07:38,479 --> 00:07:42,000
w

188
00:07:39,440 --> 00:07:43,120
if you have an input string w

189
00:07:42,000 --> 00:07:45,840
in

190
00:07:43,120 --> 00:07:45,840
three set

191
00:07:46,319 --> 00:07:51,520
if and only if

192
00:07:49,280 --> 00:07:52,560
f of w

193
00:07:51,520 --> 00:07:54,000
in

194
00:07:52,560 --> 00:07:55,280
click

195
00:07:54,000 --> 00:07:58,160
okay

196
00:07:55,280 --> 00:08:01,280
okay that's uh

197
00:07:58,160 --> 00:08:03,680
c l i q u

198
00:08:01,280 --> 00:08:06,160
e in click

199
00:08:03,680 --> 00:08:08,240
so we want to

200
00:08:06,160 --> 00:08:10,960
design a function like this

201
00:08:08,240 --> 00:08:14,319
and say that it is com uh the function

202
00:08:10,960 --> 00:08:17,520
is computable and

203
00:08:14,319 --> 00:08:20,400
also polynomial time computable

204
00:08:17,520 --> 00:08:22,800
and then the function has such a

205
00:08:20,400 --> 00:08:26,240
property provides such a functionality

206
00:08:22,800 --> 00:08:26,960
for us to convert and any input string

207
00:08:26,240 --> 00:08:29,840
in

208
00:08:26,960 --> 00:08:33,039
three sets if and only if

209
00:08:29,840 --> 00:08:34,240
the output string is in click

210
00:08:33,039 --> 00:08:36,000
okay

211
00:08:34,240 --> 00:08:37,200
so

212
00:08:36,000 --> 00:08:39,839
how

213
00:08:37,200 --> 00:08:42,560
let's describe how the function works

214
00:08:39,839 --> 00:08:43,919
okay we don't we don't want to write the

215
00:08:42,560 --> 00:08:46,800
details but

216
00:08:43,919 --> 00:08:49,120
the ideas is straightforward like this

217
00:08:46,800 --> 00:08:51,680
one so assume that

218
00:08:49,120 --> 00:08:53,120
remember that we want to have a function

219
00:08:51,680 --> 00:08:58,959
again

220
00:08:53,120 --> 00:09:01,600
let's use phi here so phi is in preset

221
00:08:58,959 --> 00:09:03,680
if and only if

222
00:09:01,600 --> 00:09:05,839
f of phi

223
00:09:03,680 --> 00:09:05,839
in

224
00:09:06,080 --> 00:09:09,080
click

225
00:09:09,360 --> 00:09:14,240
and what is

226
00:09:11,519 --> 00:09:16,320
apple right here that would be uh

227
00:09:14,240 --> 00:09:20,839
instance for click right

228
00:09:16,320 --> 00:09:24,080
so we will output a graph

229
00:09:20,839 --> 00:09:26,480
and a number

230
00:09:24,080 --> 00:09:27,920
right if you don't remember what's the

231
00:09:26,480 --> 00:09:30,959
definition of

232
00:09:27,920 --> 00:09:33,120
uh of click then you can go back to

233
00:09:30,959 --> 00:09:34,959
check it so

234
00:09:33,120 --> 00:09:37,839
for a five

235
00:09:34,959 --> 00:09:40,880
sorry for fine for putting formula for

236
00:09:37,839 --> 00:09:43,200
putting formula in 3c and f we want to

237
00:09:40,880 --> 00:09:45,440
output

238
00:09:43,200 --> 00:09:46,880
a graph and a number

239
00:09:45,440 --> 00:09:50,320
the graph

240
00:09:46,880 --> 00:09:53,200
and the number

241
00:09:50,320 --> 00:09:55,920
is in click if and only if

242
00:09:53,200 --> 00:09:55,920
the given

243
00:09:56,399 --> 00:10:00,640
three cnn formula

244
00:09:58,320 --> 00:10:02,480
is in three set

245
00:10:00,640 --> 00:10:04,000
okay

246
00:10:02,480 --> 00:10:05,600
so

247
00:10:04,000 --> 00:10:08,000
let's do it

248
00:10:05,600 --> 00:10:10,079
so assume that we have

249
00:10:08,000 --> 00:10:11,600
this

250
00:10:10,079 --> 00:10:13,519
formula

251
00:10:11,600 --> 00:10:14,800
then what should we do

252
00:10:13,519 --> 00:10:17,839
firstly

253
00:10:14,800 --> 00:10:19,200
our turing machine go through the whole

254
00:10:17,839 --> 00:10:22,480
string

255
00:10:19,200 --> 00:10:24,160
once and you will know that

256
00:10:22,480 --> 00:10:25,440
how many

257
00:10:24,160 --> 00:10:28,959
clauses

258
00:10:25,440 --> 00:10:32,800
of uh in this formula right in this case

259
00:10:28,959 --> 00:10:35,680
there are three for three clauses

260
00:10:32,800 --> 00:10:36,880
but the three is a coincidence of one

261
00:10:35,680 --> 00:10:40,160
two three

262
00:10:36,880 --> 00:10:43,120
one two three right that's coincidence

263
00:10:40,160 --> 00:10:45,279
if there are four then you may have like

264
00:10:43,120 --> 00:10:48,240
something a or b

265
00:10:45,279 --> 00:10:49,600
or c something like that okay

266
00:10:48,240 --> 00:10:50,880
anyway

267
00:10:49,600 --> 00:10:53,440
so

268
00:10:50,880 --> 00:10:56,160
we know

269
00:10:53,440 --> 00:10:58,000
how many closes here

270
00:10:56,160 --> 00:11:02,560
so for each clause

271
00:10:58,000 --> 00:11:04,000
for each clause we produce

272
00:11:02,560 --> 00:11:07,600
three notes

273
00:11:04,000 --> 00:11:10,160
in the graph okay three notes in a graph

274
00:11:07,600 --> 00:11:12,959
so if you have one more clause you have

275
00:11:10,160 --> 00:11:15,680
one more three notes

276
00:11:12,959 --> 00:11:18,720
okay then

277
00:11:15,680 --> 00:11:19,839
we mark the notes with the leader role

278
00:11:18,720 --> 00:11:23,920
so

279
00:11:19,839 --> 00:11:26,079
the first clause we have x1 x1 and x2 so

280
00:11:23,920 --> 00:11:27,360
we mark x1

281
00:11:26,079 --> 00:11:29,040
x1

282
00:11:27,360 --> 00:11:30,320
x2

283
00:11:29,040 --> 00:11:33,040
mark the node

284
00:11:30,320 --> 00:11:34,160
label the node okay or take the node

285
00:11:33,040 --> 00:11:35,200
whatever

286
00:11:34,160 --> 00:11:38,560
then

287
00:11:35,200 --> 00:11:42,560
for the second clause we mark

288
00:11:38,560 --> 00:11:43,920
x1 bar x2 bar x2 bar

289
00:11:42,560 --> 00:11:47,760
and for the

290
00:11:43,920 --> 00:11:50,240
third clause we have x1 bar x2 and x2

291
00:11:47,760 --> 00:11:54,160
so if you have the fourth clause you

292
00:11:50,240 --> 00:11:56,880
mark them a b c

293
00:11:54,160 --> 00:11:59,440
okay so according to what you have in 3c

294
00:11:56,880 --> 00:12:02,480
and f you output

295
00:11:59,440 --> 00:12:02,480
these vertex

296
00:12:04,320 --> 00:12:09,120
then to

297
00:12:06,079 --> 00:12:11,920
compose a graph

298
00:12:09,120 --> 00:12:13,920
in addition to verdicts we need h

299
00:12:11,920 --> 00:12:17,279
right we need edges

300
00:12:13,920 --> 00:12:20,240
so how do we uh

301
00:12:17,279 --> 00:12:20,240
connect these

302
00:12:21,120 --> 00:12:25,839
how do we connect these

303
00:12:23,040 --> 00:12:25,839
vertex

304
00:12:28,880 --> 00:12:32,000
the rule

305
00:12:30,880 --> 00:12:34,399
is simple

306
00:12:32,000 --> 00:12:36,800
the rule is simple

307
00:12:34,399 --> 00:12:39,680
all vertex

308
00:12:36,800 --> 00:12:43,440
basically are connected

309
00:12:39,680 --> 00:12:44,959
except for two conditions

310
00:12:43,440 --> 00:12:47,120
first

311
00:12:44,959 --> 00:12:50,000
there is no age

312
00:12:47,120 --> 00:12:50,000
of the same

313
00:12:50,240 --> 00:12:54,320
between the nodes of the same group

314
00:12:53,200 --> 00:12:56,560
okay

315
00:12:54,320 --> 00:12:57,760
there is no h

316
00:12:56,560 --> 00:13:00,639
between the

317
00:12:57,760 --> 00:13:01,760
note between the vertex of the same

318
00:13:00,639 --> 00:13:04,880
group

319
00:13:01,760 --> 00:13:07,440
okay so that's the first exception the

320
00:13:04,880 --> 00:13:08,560
other one is

321
00:13:07,440 --> 00:13:10,079
there is

322
00:13:08,560 --> 00:13:12,160
no age

323
00:13:10,079 --> 00:13:14,160
between

324
00:13:12,160 --> 00:13:16,000
a boolean variable

325
00:13:14,160 --> 00:13:17,200
and its

326
00:13:16,000 --> 00:13:18,399
negation

327
00:13:17,200 --> 00:13:20,880
that's it

328
00:13:18,399 --> 00:13:23,600
so you will see that

329
00:13:20,880 --> 00:13:26,000
in this graph there is no edge between

330
00:13:23,600 --> 00:13:28,399
x1 and x1 bar

331
00:13:26,000 --> 00:13:32,079
x1 and x1 bar

332
00:13:28,399 --> 00:13:34,639
x2 and x2 bar x2 and x2 but there's no

333
00:13:32,079 --> 00:13:37,839
edge between

334
00:13:34,639 --> 00:13:39,519
a boolean variable and its negation

335
00:13:37,839 --> 00:13:42,000
so that's it

336
00:13:39,519 --> 00:13:43,440
that's the two exceptions so you will

337
00:13:42,000 --> 00:13:45,360
see that

338
00:13:43,440 --> 00:13:49,600
when going through

339
00:13:45,360 --> 00:13:53,519
the boolean formula here

340
00:13:49,600 --> 00:13:54,320
you can construct the graph

341
00:13:53,519 --> 00:13:57,199
right

342
00:13:54,320 --> 00:13:59,120
you just output each literal as a node

343
00:13:57,199 --> 00:14:01,040
and you know

344
00:13:59,120 --> 00:14:04,480
there are

345
00:14:01,040 --> 00:14:06,160
if you have l closes then you will have

346
00:14:04,480 --> 00:14:07,600
l

347
00:14:06,160 --> 00:14:08,720
group of

348
00:14:07,600 --> 00:14:10,560
three nodes

349
00:14:08,720 --> 00:14:12,160
then you connect the nodes

350
00:14:10,560 --> 00:14:14,079
and how do you connect the nodes

351
00:14:12,160 --> 00:14:16,959
basically every node

352
00:14:14,079 --> 00:14:18,079
every pair of those are connected uh is

353
00:14:16,959 --> 00:14:20,160
connected

354
00:14:18,079 --> 00:14:23,440
except for

355
00:14:20,160 --> 00:14:26,160
nodes of the same group and

356
00:14:23,440 --> 00:14:27,360
boolean variable and its own

357
00:14:26,160 --> 00:14:28,720
negation

358
00:14:27,360 --> 00:14:30,560
okay

359
00:14:28,720 --> 00:14:32,880
then

360
00:14:30,560 --> 00:14:34,800
we specify

361
00:14:32,880 --> 00:14:37,760
since we already have the

362
00:14:34,800 --> 00:14:40,399
g here right where it is an h then we

363
00:14:37,760 --> 00:14:43,839
need to specify a k

364
00:14:40,399 --> 00:14:47,199
how many should we specify in this case

365
00:14:43,839 --> 00:14:48,079
since we have 1 2 3

366
00:14:47,199 --> 00:14:51,440
3

367
00:14:48,079 --> 00:14:52,399
clauses so we specify 3 here

368
00:14:51,440 --> 00:14:54,639
so

369
00:14:52,399 --> 00:14:56,399
this input stream

370
00:14:54,639 --> 00:15:00,320
this input string

371
00:14:56,399 --> 00:15:02,160
is what we need to output

372
00:15:00,320 --> 00:15:05,519
after computing

373
00:15:02,160 --> 00:15:07,199
the computer uh computable function

374
00:15:05,519 --> 00:15:10,839
the computer function is basically our

375
00:15:07,199 --> 00:15:15,440
program right so our program reads

376
00:15:10,839 --> 00:15:19,600
in the boolean formula and output

377
00:15:15,440 --> 00:15:22,399
the graph and three in this case

378
00:15:19,600 --> 00:15:24,959
okay the three is not three c and f the

379
00:15:22,399 --> 00:15:27,040
three is three clauses

380
00:15:24,959 --> 00:15:28,079
in this case

381
00:15:27,040 --> 00:15:30,079
so

382
00:15:28,079 --> 00:15:31,440
firstly we want to prove that the

383
00:15:30,079 --> 00:15:33,440
procedure

384
00:15:31,440 --> 00:15:34,240
really satisfies

385
00:15:33,440 --> 00:15:36,800
if

386
00:15:34,240 --> 00:15:38,639
the given

387
00:15:36,800 --> 00:15:40,959
formula in

388
00:15:38,639 --> 00:15:43,920
three set

389
00:15:40,959 --> 00:15:46,720
if and only if

390
00:15:43,920 --> 00:15:46,720
the output

391
00:15:46,800 --> 00:15:48,959
in

392
00:15:51,360 --> 00:15:55,360
click

393
00:15:52,959 --> 00:15:58,399
right we need to establish the

394
00:15:55,360 --> 00:16:00,720
uh making new disability first here

395
00:15:58,399 --> 00:16:02,880
so why

396
00:16:00,720 --> 00:16:04,800
that's quite easy because

397
00:16:02,880 --> 00:16:09,399
if

398
00:16:04,800 --> 00:16:09,399
the boolean formula is satisfiable

399
00:16:09,920 --> 00:16:12,560
you just

400
00:16:11,360 --> 00:16:13,440
need

401
00:16:12,560 --> 00:16:15,839
to

402
00:16:13,440 --> 00:16:15,839
mark

403
00:16:16,480 --> 00:16:20,000
okay so if the boolean formula is

404
00:16:18,560 --> 00:16:20,839
satisfiable

405
00:16:20,000 --> 00:16:24,959
at

406
00:16:20,839 --> 00:16:28,000
least each in each clause in each clause

407
00:16:24,959 --> 00:16:30,240
at least one literal

408
00:16:28,000 --> 00:16:33,759
is true

409
00:16:30,240 --> 00:16:35,279
right because the clauses are connected

410
00:16:33,759 --> 00:16:38,000
by end

411
00:16:35,279 --> 00:16:40,800
so each close must be true

412
00:16:38,000 --> 00:16:43,199
and for each clause to be true

413
00:16:40,800 --> 00:16:45,040
as long as you have one literal to be

414
00:16:43,199 --> 00:16:47,440
true then the clause is true because

415
00:16:45,040 --> 00:16:48,720
they are connected by or

416
00:16:47,440 --> 00:16:51,120
right

417
00:16:48,720 --> 00:16:53,440
then you just need to

418
00:16:51,120 --> 00:16:53,440
mark

419
00:16:55,279 --> 00:16:58,639
for each close

420
00:16:57,040 --> 00:17:00,240
mark

421
00:16:58,639 --> 00:17:03,440
the leader row

422
00:17:00,240 --> 00:17:06,400
the true the literal of which

423
00:17:03,440 --> 00:17:08,799
the value is true on the graph you will

424
00:17:06,400 --> 00:17:09,839
get a click

425
00:17:08,799 --> 00:17:11,360
why

426
00:17:09,839 --> 00:17:15,120
because

427
00:17:11,360 --> 00:17:18,079
since each leader each clause has

428
00:17:15,120 --> 00:17:20,559
you you pick one if you have two two or

429
00:17:18,079 --> 00:17:21,360
more it doesn't matter you just pick one

430
00:17:20,559 --> 00:17:24,000
okay

431
00:17:21,360 --> 00:17:26,240
so for

432
00:17:24,000 --> 00:17:28,960
since the

433
00:17:26,240 --> 00:17:31,360
whole pulling formula is true then each

434
00:17:28,960 --> 00:17:34,480
clause must have has at least one

435
00:17:31,360 --> 00:17:35,679
literal to be true and you peak

436
00:17:34,480 --> 00:17:37,360
from each

437
00:17:35,679 --> 00:17:40,400
close

438
00:17:37,360 --> 00:17:43,360
one true literal and a mark on the graph

439
00:17:40,400 --> 00:17:46,160
when you mark on the graph

440
00:17:43,360 --> 00:17:49,200
firstly how many nodes you will mark on

441
00:17:46,160 --> 00:17:51,679
the graph you will mark exactly the

442
00:17:49,200 --> 00:17:53,280
number of clause

443
00:17:51,679 --> 00:17:57,760
verdicts right

444
00:17:53,280 --> 00:18:00,480
and then remember how we draw the graph

445
00:17:57,760 --> 00:18:02,000
basically all nodes are connected

446
00:18:00,480 --> 00:18:05,360
except for

447
00:18:02,000 --> 00:18:07,840
two conditions right the first one is

448
00:18:05,360 --> 00:18:09,440
vertex of the same group

449
00:18:07,840 --> 00:18:11,600
not connected

450
00:18:09,440 --> 00:18:11,600
but

451
00:18:11,760 --> 00:18:16,000
since the node you mark are from each

452
00:18:14,080 --> 00:18:18,400
clause so

453
00:18:16,000 --> 00:18:19,440
those notes are not

454
00:18:18,400 --> 00:18:22,640
limited

455
00:18:19,440 --> 00:18:25,120
by this rule by this condition right

456
00:18:22,640 --> 00:18:26,160
and secondly

457
00:18:25,120 --> 00:18:28,960
since

458
00:18:26,160 --> 00:18:30,880
the node you pick represents

459
00:18:28,960 --> 00:18:33,760
a boolean

460
00:18:30,880 --> 00:18:35,280
value assignment to the boolean

461
00:18:33,760 --> 00:18:37,520
variables

462
00:18:35,280 --> 00:18:39,679
you won't have like

463
00:18:37,520 --> 00:18:42,720
x1 is true

464
00:18:39,679 --> 00:18:47,360
and x1 bar is true you won't have such

465
00:18:42,720 --> 00:18:49,200
conditions you will have a consistent

466
00:18:47,360 --> 00:18:50,640
boolean assignment

467
00:18:49,200 --> 00:18:52,080
because

468
00:18:50,640 --> 00:18:53,120
you already know

469
00:18:52,080 --> 00:18:55,679
the

470
00:18:53,120 --> 00:18:57,760
the formula is satisfiable we want to

471
00:18:55,679 --> 00:19:00,720
prove this way okay now

472
00:18:57,760 --> 00:19:02,640
so you know that file is satisfiable so

473
00:19:00,720 --> 00:19:05,600
according to the choose assignment you

474
00:19:02,640 --> 00:19:07,919
won't have such conditions

475
00:19:05,600 --> 00:19:10,400
you will have consistent assignment and

476
00:19:07,919 --> 00:19:13,840
that assignment lets you pick

477
00:19:10,400 --> 00:19:15,919
the notes on graph and you won't pick x1

478
00:19:13,840 --> 00:19:17,679
x and x1 bar

479
00:19:15,919 --> 00:19:22,160
at the same time

480
00:19:17,679 --> 00:19:25,440
our x2 and x2 bar at the same time no

481
00:19:22,160 --> 00:19:27,200
you will pick you know consistent stuff

482
00:19:25,440 --> 00:19:30,480
then in this way

483
00:19:27,200 --> 00:19:34,000
since you will not pick

484
00:19:30,480 --> 00:19:37,280
you will not select a boolean variable

485
00:19:34,000 --> 00:19:39,440
and it's negation

486
00:19:37,280 --> 00:19:41,520
then you are you are

487
00:19:39,440 --> 00:19:44,080
you can be sure that

488
00:19:41,520 --> 00:19:45,600
all the notes you pick on the graph are

489
00:19:44,080 --> 00:19:46,799
connected

490
00:19:45,600 --> 00:19:50,080
because

491
00:19:46,799 --> 00:19:51,600
that's all how we draw the graph right

492
00:19:50,080 --> 00:19:53,840
so if

493
00:19:51,600 --> 00:19:55,520
as long as the boolean formula is

494
00:19:53,840 --> 00:19:59,120
satisfiable

495
00:19:55,520 --> 00:20:01,440
exactly that boolean assignment that you

496
00:19:59,120 --> 00:20:02,799
have

497
00:20:01,440 --> 00:20:06,000
k click

498
00:20:02,799 --> 00:20:08,000
undergrad okay so that's the one

499
00:20:06,000 --> 00:20:10,080
direction

500
00:20:08,000 --> 00:20:14,080
on the other hand

501
00:20:10,080 --> 00:20:14,080
if someone gives you this graph

502
00:20:14,880 --> 00:20:22,400
and three

503
00:20:17,679 --> 00:20:25,039
if such a graph can you if you can find

504
00:20:22,400 --> 00:20:28,240
three click on such a graph how do we

505
00:20:25,039 --> 00:20:30,960
prove that the original boolean formula

506
00:20:28,240 --> 00:20:34,320
is satisfiable

507
00:20:30,960 --> 00:20:35,280
the same reason because when you p

508
00:20:34,320 --> 00:20:38,480
when

509
00:20:35,280 --> 00:20:41,200
you can successfully get a k click on

510
00:20:38,480 --> 00:20:42,640
such a graph that means

511
00:20:41,200 --> 00:20:44,480
that means

512
00:20:42,640 --> 00:20:47,120
firstly

513
00:20:44,480 --> 00:20:50,320
from each group

514
00:20:47,120 --> 00:20:51,120
you exactly pick one note

515
00:20:50,320 --> 00:20:53,440
right

516
00:20:51,120 --> 00:20:55,919
it's enough it's not possible for you to

517
00:20:53,440 --> 00:20:58,320
pick two notes from the same group

518
00:20:55,919 --> 00:20:58,320
because

519
00:20:59,039 --> 00:21:04,559
same notes in one group

520
00:21:02,880 --> 00:21:06,799
sorry

521
00:21:04,559 --> 00:21:09,039
nodes in the same group

522
00:21:06,799 --> 00:21:13,520
are not connected so

523
00:21:09,039 --> 00:21:14,840
if you you if you do have a k click

524
00:21:13,520 --> 00:21:18,240
from the

525
00:21:14,840 --> 00:21:19,120
graph since there are k groups on the

526
00:21:18,240 --> 00:21:21,520
graph

527
00:21:19,120 --> 00:21:24,080
you must

528
00:21:21,520 --> 00:21:25,679
select one note from each group

529
00:21:24,080 --> 00:21:28,240
that's the first thing

530
00:21:25,679 --> 00:21:30,799
and the other thing is we don't have

531
00:21:28,240 --> 00:21:33,840
connection between

532
00:21:30,799 --> 00:21:35,280
a boolean variable and its negation for

533
00:21:33,840 --> 00:21:37,039
the nodes

534
00:21:35,280 --> 00:21:39,200
so since

535
00:21:37,039 --> 00:21:43,120
the nodes you peak forms

536
00:21:39,200 --> 00:21:43,120
a complete graph on the graph

537
00:21:43,360 --> 00:21:47,120
you won't pick

538
00:21:45,760 --> 00:21:49,360
a boolean

539
00:21:47,120 --> 00:21:50,960
variable and its negation

540
00:21:49,360 --> 00:21:53,440
so

541
00:21:50,960 --> 00:21:56,720
that will form

542
00:21:53,440 --> 00:22:00,480
a consistent boolean assignment

543
00:21:56,720 --> 00:22:02,880
so for this example let's say we pick uh

544
00:22:00,480 --> 00:22:04,720
that okay see

545
00:22:02,880 --> 00:22:05,760
it is a three click

546
00:22:04,720 --> 00:22:07,520
right

547
00:22:05,760 --> 00:22:10,320
so you will see

548
00:22:07,520 --> 00:22:12,000
to form a three p a three

549
00:22:10,320 --> 00:22:14,720
click

550
00:22:12,000 --> 00:22:17,679
firstly you must have

551
00:22:14,720 --> 00:22:19,360
note from each group secondly you will

552
00:22:17,679 --> 00:22:20,880
not

553
00:22:19,360 --> 00:22:24,000
pick

554
00:22:20,880 --> 00:22:25,200
boolean variable and its negation so we

555
00:22:24,000 --> 00:22:26,799
pick what

556
00:22:25,200 --> 00:22:29,600
x1 bar

557
00:22:26,799 --> 00:22:30,640
right this one is x1 bar and this one 61

558
00:22:29,600 --> 00:22:33,600
bar

559
00:22:30,640 --> 00:22:37,840
and x2

560
00:22:33,600 --> 00:22:39,200
that means x1 bar should be true and x2

561
00:22:37,840 --> 00:22:41,200
should be true

562
00:22:39,200 --> 00:22:42,640
so x y bar should be true that means x y

563
00:22:41,200 --> 00:22:44,400
is false okay

564
00:22:42,640 --> 00:22:46,640
so these

565
00:22:44,400 --> 00:22:48,640
will satisfy

566
00:22:46,640 --> 00:22:51,280
will make this

567
00:22:48,640 --> 00:22:52,640
will satisfy this uh boolean formula so

568
00:22:51,280 --> 00:22:55,280
let's check it

569
00:22:52,640 --> 00:22:58,799
so x one bar is true so x one is four

570
00:22:55,280 --> 00:23:01,600
right so false false x two is true right

571
00:22:58,799 --> 00:23:04,960
true so this clause is true

572
00:23:01,600 --> 00:23:06,000
and the true false false this clause is

573
00:23:04,960 --> 00:23:07,200
true

574
00:23:06,000 --> 00:23:10,080
and

575
00:23:07,200 --> 00:23:12,159
true true true so this so this course is

576
00:23:10,080 --> 00:23:15,039
true so see

577
00:23:12,159 --> 00:23:17,919
if you can

578
00:23:15,039 --> 00:23:19,360
find a three click on this graph

579
00:23:17,919 --> 00:23:20,799
that

580
00:23:19,360 --> 00:23:22,720
selection

581
00:23:20,799 --> 00:23:26,159
makes the original

582
00:23:22,720 --> 00:23:28,400
booting formula satisfiable

583
00:23:26,159 --> 00:23:31,360
okay

584
00:23:28,400 --> 00:23:33,919
so now we have a

585
00:23:31,360 --> 00:23:36,080
conversion process which is the f the

586
00:23:33,919 --> 00:23:37,280
computable function

587
00:23:36,080 --> 00:23:39,840
converts

588
00:23:37,280 --> 00:23:41,440
boolean formula

589
00:23:39,840 --> 00:23:42,960
to

590
00:23:41,440 --> 00:23:43,919
an instance

591
00:23:42,960 --> 00:23:45,679
in

592
00:23:43,919 --> 00:23:47,760
click and

593
00:23:45,679 --> 00:23:50,960
such that

594
00:23:47,760 --> 00:23:52,320
phi in three sets if and only if

595
00:23:50,960 --> 00:23:55,440
the output

596
00:23:52,320 --> 00:23:55,440
proper instance in

597
00:23:55,919 --> 00:23:58,320
click

598
00:23:58,400 --> 00:24:06,240
and the whole process can be

599
00:24:01,919 --> 00:24:08,159
finished in polynomial time because

600
00:24:06,240 --> 00:24:11,360
when you read

601
00:24:08,159 --> 00:24:12,159
once right then go back

602
00:24:11,360 --> 00:24:13,600
and

603
00:24:12,159 --> 00:24:16,640
output

604
00:24:13,600 --> 00:24:16,640
output the node

605
00:24:17,039 --> 00:24:19,919
i'll put a note

606
00:24:19,120 --> 00:24:23,120
right

607
00:24:19,919 --> 00:24:25,360
and connect the edges and don't forget

608
00:24:23,120 --> 00:24:28,400
that

609
00:24:25,360 --> 00:24:29,679
you how many nodes you have it's linear

610
00:24:28,400 --> 00:24:32,000
to the length

611
00:24:29,679 --> 00:24:32,880
right linear to the length and how many

612
00:24:32,000 --> 00:24:35,120
edges

613
00:24:32,880 --> 00:24:36,799
at most

614
00:24:35,120 --> 00:24:39,520
vertical

615
00:24:36,799 --> 00:24:42,799
vertical square of vertex right

616
00:24:39,520 --> 00:24:44,960
then after you collect the uh the

617
00:24:42,799 --> 00:24:46,559
number of clauses you know that

618
00:24:44,960 --> 00:24:49,600
you need to specify

619
00:24:46,559 --> 00:24:52,640
k in this case s3

620
00:24:49,600 --> 00:24:54,799
so all the process is apparent

621
00:24:52,640 --> 00:24:56,559
the process the whole process is

622
00:24:54,799 --> 00:24:59,760
apparently

623
00:24:56,559 --> 00:25:02,720
doable within

624
00:24:59,760 --> 00:25:06,080
linear to the uh

625
00:25:02,720 --> 00:25:08,960
length of the input string so

626
00:25:06,080 --> 00:25:10,720
within the polynomial time

627
00:25:08,960 --> 00:25:12,840
okay so that's a

628
00:25:10,720 --> 00:25:16,320
example for

629
00:25:12,840 --> 00:25:19,679
uh for normal time reduction

630
00:25:16,320 --> 00:25:19,679
from three sets to click

631
00:25:19,919 --> 00:25:23,440
after

632
00:25:21,200 --> 00:25:24,960
equipped with uh

633
00:25:23,440 --> 00:25:26,880
after equipped with

634
00:25:24,960 --> 00:25:30,640
the polynomial time reduction

635
00:25:26,880 --> 00:25:32,799
that's formally define empty complete

636
00:25:30,640 --> 00:25:34,559
okay mp complete

637
00:25:32,799 --> 00:25:35,840
and actually

638
00:25:34,559 --> 00:25:36,960
something

639
00:25:35,840 --> 00:25:39,360
complete

640
00:25:36,960 --> 00:25:41,120
is a general definition

641
00:25:39,360 --> 00:25:45,200
something

642
00:25:41,120 --> 00:25:46,480
complete okay so here we talk about np

643
00:25:45,200 --> 00:25:48,559
complete

644
00:25:46,480 --> 00:25:49,840
so for np complete

645
00:25:48,559 --> 00:25:51,520
there are

646
00:25:49,840 --> 00:25:55,919
two conditions

647
00:25:51,520 --> 00:25:59,440
we say that a language b is mp complete

648
00:25:55,919 --> 00:26:02,159
if language b satisfies

649
00:25:59,440 --> 00:26:06,400
the following two conditions first

650
00:26:02,159 --> 00:26:08,480
b itself is in mp

651
00:26:06,400 --> 00:26:12,320
okay b itself

652
00:26:08,480 --> 00:26:12,320
is in mp

653
00:26:12,640 --> 00:26:15,679
then otherwise we don't talk about

654
00:26:14,480 --> 00:26:20,559
complete

655
00:26:15,679 --> 00:26:20,559
complete means that the whole mp

656
00:26:21,120 --> 00:26:26,640
for some criteria can be

657
00:26:24,559 --> 00:26:29,360
can become

658
00:26:26,640 --> 00:26:33,039
the whole ante the instant all the

659
00:26:29,360 --> 00:26:35,279
instance in np can become b

660
00:26:33,039 --> 00:26:38,400
okay for some criteria

661
00:26:35,279 --> 00:26:41,279
so firstly b itself massing mp to talk

662
00:26:38,400 --> 00:26:42,880
about and be complete

663
00:26:41,279 --> 00:26:47,279
then

664
00:26:42,880 --> 00:26:50,960
for every language in mp

665
00:26:47,279 --> 00:26:54,480
there is a polynomial reduction

666
00:26:50,960 --> 00:26:54,480
to the language b

667
00:26:54,559 --> 00:26:59,200
okay

668
00:26:56,640 --> 00:27:02,960
there is a

669
00:26:59,200 --> 00:27:02,960
polynomial reduction to language b

670
00:27:03,440 --> 00:27:11,679
so again why we call it np complete that

671
00:27:07,120 --> 00:27:14,799
means the language b itself is in mp and

672
00:27:11,679 --> 00:27:17,600
all the language in mp can be polynomial

673
00:27:14,799 --> 00:27:20,480
time reducible to b

674
00:27:17,600 --> 00:27:22,240
so you can think of b as a

675
00:27:20,480 --> 00:27:24,480
representative

676
00:27:22,240 --> 00:27:26,080
of the class and p

677
00:27:24,480 --> 00:27:27,039
okay

678
00:27:26,080 --> 00:27:28,640
so

679
00:27:27,039 --> 00:27:30,720
let's

680
00:27:28,640 --> 00:27:33,120
introduce another

681
00:27:30,720 --> 00:27:33,120
clause

682
00:27:33,600 --> 00:27:39,039
we say that

683
00:27:35,279 --> 00:27:40,960
if every language in mp is polynomial

684
00:27:39,039 --> 00:27:41,840
reducible to b

685
00:27:40,960 --> 00:27:43,919
and

686
00:27:41,840 --> 00:27:46,000
if we don't have this criteria

687
00:27:43,919 --> 00:27:47,120
we call b

688
00:27:46,000 --> 00:27:50,320
mp

689
00:27:47,120 --> 00:27:54,320
heart okay you might seen this term in

690
00:27:50,320 --> 00:27:57,279
many literatures because people love it

691
00:27:54,320 --> 00:28:00,159
and behave seems you know

692
00:27:57,279 --> 00:28:01,360
harder than mp complete

693
00:28:00,159 --> 00:28:05,360
but

694
00:28:01,360 --> 00:28:07,200
mp heart has no such

695
00:28:05,360 --> 00:28:09,679
conditions that means

696
00:28:07,200 --> 00:28:11,279
the language we the language b

697
00:28:09,679 --> 00:28:12,960
may be

698
00:28:11,279 --> 00:28:15,039
harder than mp

699
00:28:12,960 --> 00:28:17,520
okay although we don't introduce

700
00:28:15,039 --> 00:28:20,159
you know bigger classes here but there

701
00:28:17,520 --> 00:28:21,840
are some of them so

702
00:28:20,159 --> 00:28:23,760
mp hard means

703
00:28:21,840 --> 00:28:28,240
language b is

704
00:28:23,760 --> 00:28:29,600
hard at least as np something like that

705
00:28:28,240 --> 00:28:30,960
anyway

706
00:28:29,600 --> 00:28:34,000
so

707
00:28:30,960 --> 00:28:35,760
since b itself b here itself is in np

708
00:28:34,000 --> 00:28:40,080
and every language a

709
00:28:35,760 --> 00:28:40,080
in mp is polynomial time reducible to b

710
00:28:40,960 --> 00:28:47,520
by defining this term now

711
00:28:45,120 --> 00:28:50,880
we can prove that

712
00:28:47,520 --> 00:28:52,240
if a language b is nb complete

713
00:28:50,880 --> 00:28:53,200
and

714
00:28:52,240 --> 00:28:57,039
and

715
00:28:53,200 --> 00:28:59,760
b is in p somehow you can prove that if

716
00:28:57,039 --> 00:29:01,919
then we know

717
00:28:59,760 --> 00:29:04,880
p

718
00:29:01,919 --> 00:29:08,480
equals to np

719
00:29:04,880 --> 00:29:08,480
okay p equals to mp

720
00:29:08,559 --> 00:29:11,200
and actually we don't need to prove that

721
00:29:10,240 --> 00:29:13,760
right

722
00:29:11,200 --> 00:29:15,840
because firstly

723
00:29:13,760 --> 00:29:15,840
p

724
00:29:15,919 --> 00:29:19,039
is a subset of mp

725
00:29:18,240 --> 00:29:21,200
right

726
00:29:19,039 --> 00:29:23,039
we know that

727
00:29:21,200 --> 00:29:24,240
that's by definition we already

728
00:29:23,039 --> 00:29:25,279
explained it

729
00:29:24,240 --> 00:29:26,640
then

730
00:29:25,279 --> 00:29:29,360
then

731
00:29:26,640 --> 00:29:30,159
if there is a language

732
00:29:29,360 --> 00:29:32,640
is

733
00:29:30,159 --> 00:29:34,159
if there exists a language to be mp

734
00:29:32,640 --> 00:29:35,520
complete

735
00:29:34,159 --> 00:29:37,840
like b here

736
00:29:35,520 --> 00:29:39,520
if you have mp complete

737
00:29:37,840 --> 00:29:42,320
b

738
00:29:39,520 --> 00:29:46,159
and you can prove that

739
00:29:42,320 --> 00:29:46,159
this language is in p

740
00:29:46,480 --> 00:29:53,120
if you can prove that a mp complete

741
00:29:50,159 --> 00:29:56,799
language in p

742
00:29:53,120 --> 00:29:59,840
then according to a definition you see

743
00:29:56,799 --> 00:30:02,880
every language in np

744
00:29:59,840 --> 00:30:04,799
is polynomial time reducible to b

745
00:30:02,880 --> 00:30:05,760
and b is in p

746
00:30:04,799 --> 00:30:10,159
so

747
00:30:05,760 --> 00:30:11,039
every language in np is in p

748
00:30:10,159 --> 00:30:13,520
right

749
00:30:11,039 --> 00:30:15,840
why we already uh prove that right

750
00:30:13,520 --> 00:30:18,480
because we have a

751
00:30:15,840 --> 00:30:18,480
theorem here

752
00:30:18,880 --> 00:30:24,000
if a language a has a polynomial time

753
00:30:21,760 --> 00:30:27,440
reduce a b are reducible to his

754
00:30:24,000 --> 00:30:29,919
polynomial reducible to e3 sorry is for

755
00:30:27,440 --> 00:30:34,080
normal time reducible to b and the b is

756
00:30:29,919 --> 00:30:36,640
in p then a is in p right

757
00:30:34,080 --> 00:30:37,600
and you know that for b

758
00:30:36,640 --> 00:30:38,799
for b

759
00:30:37,600 --> 00:30:40,880
here

760
00:30:38,799 --> 00:30:42,799
b is mp complete

761
00:30:40,880 --> 00:30:45,919
then every

762
00:30:42,799 --> 00:30:47,679
language in mp is pronoun time reducible

763
00:30:45,919 --> 00:30:50,720
to b

764
00:30:47,679 --> 00:30:51,840
and by using that theorem we know

765
00:30:50,720 --> 00:30:53,440
a

766
00:30:51,840 --> 00:30:56,720
in p

767
00:30:53,440 --> 00:30:59,120
so every a in mp

768
00:30:56,720 --> 00:31:00,480
is in p that means

769
00:30:59,120 --> 00:31:03,360
mp

770
00:31:00,480 --> 00:31:06,080
is a subset of p

771
00:31:03,360 --> 00:31:08,080
and we know already know p is a subset

772
00:31:06,080 --> 00:31:09,360
of mp

773
00:31:08,080 --> 00:31:11,200
right

774
00:31:09,360 --> 00:31:12,559
so

775
00:31:11,200 --> 00:31:15,360
it makes

776
00:31:12,559 --> 00:31:16,960
p equal to mp

777
00:31:15,360 --> 00:31:19,840
okay so

778
00:31:16,960 --> 00:31:23,120
if you can prove a an

779
00:31:19,840 --> 00:31:27,279
mp complete language to be in p

780
00:31:23,120 --> 00:31:31,200
you effectively proved

781
00:31:27,279 --> 00:31:33,360
p and the mp are the same cost that's

782
00:31:31,200 --> 00:31:35,679
why i said

783
00:31:33,360 --> 00:31:38,320
defining empty complete

784
00:31:35,679 --> 00:31:40,559
help us to study the relationship

785
00:31:38,320 --> 00:31:42,240
between p and mp because

786
00:31:40,559 --> 00:31:45,200
if you really had

787
00:31:42,240 --> 00:31:47,360
if you really have some np complete

788
00:31:45,200 --> 00:31:49,760
language you can just

789
00:31:47,360 --> 00:31:51,760
you just need to study those languages

790
00:31:49,760 --> 00:31:54,000
you don't need to study every language

791
00:31:51,760 --> 00:31:56,480
in np or p

792
00:31:54,000 --> 00:31:58,720
doesn't matter now

793
00:31:56,480 --> 00:32:01,679
we have a theorem here then we only need

794
00:31:58,720 --> 00:32:03,200
to study the mp-complete language if we

795
00:32:01,679 --> 00:32:05,840
can prove

796
00:32:03,200 --> 00:32:10,640
any one of the np-complete language to

797
00:32:05,840 --> 00:32:14,200
be in p we proved p equals to mp or

798
00:32:10,640 --> 00:32:14,200
if we proved

799
00:32:15,760 --> 00:32:20,159
and if we want to prove p and mp are

800
00:32:18,960 --> 00:32:21,440
different

801
00:32:20,159 --> 00:32:25,279
class

802
00:32:21,440 --> 00:32:30,000
those np complete languages are most

803
00:32:25,279 --> 00:32:32,960
likely candidates to be not in p

804
00:32:30,000 --> 00:32:32,960
right so

805
00:32:34,080 --> 00:32:37,360
then

806
00:32:34,880 --> 00:32:38,480
uh the second theorem we want to prove

807
00:32:37,360 --> 00:32:41,880
is

808
00:32:38,480 --> 00:32:41,880
if b

809
00:32:42,960 --> 00:32:48,399
is mp complete

810
00:32:45,120 --> 00:32:50,559
if there is a mp complete language

811
00:32:48,399 --> 00:32:52,399
and you know this

812
00:32:50,559 --> 00:32:53,840
mp company language

813
00:32:52,399 --> 00:32:57,200
has

814
00:32:53,840 --> 00:32:59,760
a polynomial reduction to another

815
00:32:57,200 --> 00:33:01,760
and b sorry another language

816
00:32:59,760 --> 00:33:05,519
and you know that

817
00:33:01,760 --> 00:33:07,120
that other language is in mp

818
00:33:05,519 --> 00:33:08,559
then

819
00:33:07,120 --> 00:33:12,799
see here

820
00:33:08,559 --> 00:33:12,799
is also empty complete

821
00:33:12,960 --> 00:33:18,399
okay

822
00:33:15,039 --> 00:33:18,399
it's also np complete

823
00:33:18,480 --> 00:33:21,840
why because we can easily prove that

824
00:33:20,960 --> 00:33:22,960
right

825
00:33:21,840 --> 00:33:26,720
so

826
00:33:22,960 --> 00:33:27,679
since c is in mp

827
00:33:26,720 --> 00:33:31,760
c

828
00:33:27,679 --> 00:33:33,200
satisfied satisfies the first condition

829
00:33:31,760 --> 00:33:36,559
then

830
00:33:33,200 --> 00:33:36,559
b is mp complete

831
00:33:36,640 --> 00:33:43,120
that means every language in mp

832
00:33:40,080 --> 00:33:45,279
is polynomial reducible to b

833
00:33:43,120 --> 00:33:48,799
right and you know

834
00:33:45,279 --> 00:33:51,360
b is polynomial time reducible to c

835
00:33:48,799 --> 00:33:53,200
so we can every language

836
00:33:51,360 --> 00:33:55,519
in mp

837
00:33:53,200 --> 00:33:57,519
we have a

838
00:33:55,519 --> 00:33:58,960
computable function polynomial time

839
00:33:57,519 --> 00:34:01,760
computable function

840
00:33:58,960 --> 00:34:03,279
and to c we have another polynomial time

841
00:34:01,760 --> 00:34:04,480
computable function

842
00:34:03,279 --> 00:34:07,360
right

843
00:34:04,480 --> 00:34:10,399
so every language a and p can go through

844
00:34:07,360 --> 00:34:12,639
f and go through g to c

845
00:34:10,399 --> 00:34:14,800
and how much time you need

846
00:34:12,639 --> 00:34:16,399
for the conversion

847
00:34:14,800 --> 00:34:17,760
polynomial time

848
00:34:16,399 --> 00:34:19,280
because

849
00:34:17,760 --> 00:34:21,440
polynomials

850
00:34:19,280 --> 00:34:25,520
sorry not this way

851
00:34:21,440 --> 00:34:25,520
polynomials polynomial

852
00:34:26,079 --> 00:34:30,720
still polynomial so the total computer

853
00:34:29,200 --> 00:34:34,240
computation time

854
00:34:30,720 --> 00:34:36,159
spends on f and g to do the composition

855
00:34:34,240 --> 00:34:40,079
of the two function

856
00:34:36,159 --> 00:34:41,119
must be bounded by polynomial

857
00:34:40,079 --> 00:34:44,720
so

858
00:34:41,119 --> 00:34:49,440
c satisfies the second condition so of

859
00:34:44,720 --> 00:34:50,960
course c is complete uh mp complete

860
00:34:49,440 --> 00:34:52,399
okay

861
00:34:50,960 --> 00:34:53,919
so

862
00:34:52,399 --> 00:34:56,159
let's say

863
00:34:53,919 --> 00:34:56,159
uh

864
00:34:56,240 --> 00:35:00,000
this block is what i said okay

865
00:34:58,720 --> 00:35:04,240
so

866
00:35:00,000 --> 00:35:05,760
now we what we have we have defined

867
00:35:04,240 --> 00:35:08,000
and be complete

868
00:35:05,760 --> 00:35:08,000
okay

869
00:35:08,240 --> 00:35:15,760
and we know that mp complete can

870
00:35:12,400 --> 00:35:17,359
help us to study the relationship of p

871
00:35:15,760 --> 00:35:20,400
and np

872
00:35:17,359 --> 00:35:22,880
and now we know that if we have an mp

873
00:35:20,400 --> 00:35:24,800
complete language

874
00:35:22,880 --> 00:35:25,839
we can easily

875
00:35:24,800 --> 00:35:29,200
prove

876
00:35:25,839 --> 00:35:31,680
other language to be mp complete

877
00:35:29,200 --> 00:35:35,040
by reduce

878
00:35:31,680 --> 00:35:38,320
the non-mp company language to

879
00:35:35,040 --> 00:35:38,320
the one you want to prove

880
00:35:39,280 --> 00:35:43,599
okay

881
00:35:40,560 --> 00:35:43,599
so the problem is

882
00:35:43,680 --> 00:35:47,839
where is

883
00:35:44,960 --> 00:35:52,800
the first and the complete language

884
00:35:47,839 --> 00:35:52,800
what is the first np-completed language

885
00:35:53,440 --> 00:35:56,800
right that's the problem

886
00:35:55,359 --> 00:35:58,640
we can define

887
00:35:56,800 --> 00:36:01,520
anything but

888
00:35:58,640 --> 00:36:04,320
find an example for that thing that's

889
00:36:01,520 --> 00:36:04,320
another problem

890
00:36:07,200 --> 00:36:09,520
so

891
00:36:09,839 --> 00:36:14,960
here we want to prove cook's lemon

892
00:36:11,920 --> 00:36:14,960
theorem which is

893
00:36:15,440 --> 00:36:19,440
sat

894
00:36:16,720 --> 00:36:20,400
is mp complete

895
00:36:19,440 --> 00:36:21,720
all right

896
00:36:20,400 --> 00:36:24,880
satisfied

897
00:36:21,720 --> 00:36:27,839
satisfiability problem is mp complete

898
00:36:24,880 --> 00:36:27,839
problem

899
00:36:28,640 --> 00:36:30,880
so

900
00:36:32,079 --> 00:36:35,760
if you think about it it is kind of

901
00:36:34,560 --> 00:36:38,720
difficult

902
00:36:35,760 --> 00:36:40,480
why because you need to

903
00:36:38,720 --> 00:36:43,920
prove

904
00:36:40,480 --> 00:36:45,040
every language in mp that's very

905
00:36:43,920 --> 00:36:49,040
difficult

906
00:36:45,040 --> 00:36:49,040
is polynomial time reducible to

907
00:36:49,200 --> 00:36:52,960
sat here

908
00:36:50,640 --> 00:36:56,079
right

909
00:36:52,960 --> 00:36:58,480
how do we handle that

910
00:36:56,079 --> 00:37:01,680
how do we handle that

911
00:36:58,480 --> 00:37:03,040
so the key point is

912
00:37:01,680 --> 00:37:03,839
since

913
00:37:03,040 --> 00:37:08,480
a

914
00:37:03,839 --> 00:37:10,640
any language a in is in mp

915
00:37:08,480 --> 00:37:13,480
there is

916
00:37:10,640 --> 00:37:16,000
a non-deterministic undetermined

917
00:37:13,480 --> 00:37:18,720
non-deterministic machine

918
00:37:16,000 --> 00:37:19,839
decide that language

919
00:37:18,720 --> 00:37:21,280
right

920
00:37:19,839 --> 00:37:22,800
we don't know what

921
00:37:21,280 --> 00:37:25,920
machine that

922
00:37:22,800 --> 00:37:27,599
is that but we know since the language a

923
00:37:25,920 --> 00:37:30,640
is an in mp

924
00:37:27,599 --> 00:37:30,640
there must be

925
00:37:31,800 --> 00:37:36,079
non-deterministic

926
00:37:33,520 --> 00:37:37,280
turing machine as decider for that

927
00:37:36,079 --> 00:37:40,720
language

928
00:37:37,280 --> 00:37:43,359
that's the key part of this proof okay

929
00:37:40,720 --> 00:37:46,400
so let's go through it so we want to

930
00:37:43,359 --> 00:37:49,200
prove sat is com mp complete

931
00:37:46,400 --> 00:37:53,280
firstly we need to show that

932
00:37:49,200 --> 00:37:55,920
sat is in mp sad itself is emp right

933
00:37:53,280 --> 00:37:57,680
that's the first condition

934
00:37:55,920 --> 00:37:58,960
and how do we show that how do we do

935
00:37:57,680 --> 00:38:02,160
that

936
00:37:58,960 --> 00:38:04,640
you can easily say that we have we can

937
00:38:02,160 --> 00:38:06,880
construct a non-deterministic polynomial

938
00:38:04,640 --> 00:38:06,880
time

939
00:38:07,760 --> 00:38:10,480
to a machine

940
00:38:11,359 --> 00:38:16,000
things we can guess

941
00:38:13,119 --> 00:38:17,520
actually we can try all possible

942
00:38:16,000 --> 00:38:21,280
boolean assignments

943
00:38:17,520 --> 00:38:24,320
again you see you will see that uh

944
00:38:21,280 --> 00:38:25,760
there if you have n boolean variables

945
00:38:24,320 --> 00:38:28,320
okay let's say

946
00:38:25,760 --> 00:38:29,440
if uh if the boolean formula

947
00:38:28,320 --> 00:38:30,640
is like

948
00:38:29,440 --> 00:38:32,560
n

949
00:38:30,640 --> 00:38:36,079
okay the total length

950
00:38:32,560 --> 00:38:39,520
and you have a lot of x or y and

951
00:38:36,079 --> 00:38:42,160
something another something like that

952
00:38:39,520 --> 00:38:42,960
but anyway

953
00:38:42,160 --> 00:38:45,520
you

954
00:38:42,960 --> 00:38:48,240
can collect the number

955
00:38:45,520 --> 00:38:51,119
the number of boolean variables within

956
00:38:48,240 --> 00:38:54,400
the formula right for example you have l

957
00:38:51,119 --> 00:38:56,320
variables which is less than n

958
00:38:54,400 --> 00:38:58,800
because n is the length

959
00:38:56,320 --> 00:39:00,720
then you have you can construct a

960
00:38:58,800 --> 00:39:03,359
machine to guess

961
00:39:00,720 --> 00:39:05,680
all possible

962
00:39:03,359 --> 00:39:08,560
choose assignment

963
00:39:05,680 --> 00:39:11,839
to try all possible truth assignments

964
00:39:08,560 --> 00:39:15,359
of course of course the width here

965
00:39:11,839 --> 00:39:17,760
is exponential probably exponential to n

966
00:39:15,359 --> 00:39:19,200
but it doesn't matter because we don't

967
00:39:17,760 --> 00:39:22,160
count with

968
00:39:19,200 --> 00:39:23,040
what we care about is height

969
00:39:22,160 --> 00:39:24,960
right

970
00:39:23,040 --> 00:39:27,440
and how many steps

971
00:39:24,960 --> 00:39:28,480
you can guess one

972
00:39:27,440 --> 00:39:31,680
you can

973
00:39:28,480 --> 00:39:36,400
try one two assignment

974
00:39:31,680 --> 00:39:37,200
about l steps which is less than n

975
00:39:36,400 --> 00:39:38,960
so

976
00:39:37,200 --> 00:39:43,760
then you verify

977
00:39:38,960 --> 00:39:45,760
each choose assignment if it can be can

978
00:39:43,760 --> 00:39:47,760
satisfy the formula

979
00:39:45,760 --> 00:39:50,560
if any one of them

980
00:39:47,760 --> 00:39:52,079
returns true you accept it and the whole

981
00:39:50,560 --> 00:39:55,680
machine accepted

982
00:39:52,079 --> 00:39:56,880
and the formula is in set otherwise if

983
00:39:55,680 --> 00:39:59,119
all

984
00:39:56,880 --> 00:40:01,839
computational branches reject then we

985
00:39:59,119 --> 00:40:02,960
reject that string

986
00:40:01,839 --> 00:40:05,200
okay

987
00:40:02,960 --> 00:40:08,319
so apparently

988
00:40:05,200 --> 00:40:11,319
sat itself is in np

989
00:40:08,319 --> 00:40:11,319
then

990
00:40:11,359 --> 00:40:15,040
any language a

991
00:40:13,200 --> 00:40:19,200
in mp

992
00:40:15,040 --> 00:40:22,880
we want to show any language a in np

993
00:40:19,200 --> 00:40:25,200
there is a polynomial time reduction to

994
00:40:22,880 --> 00:40:30,240
sat

995
00:40:25,200 --> 00:40:32,960
okay so the key concept comes in here

996
00:40:30,240 --> 00:40:34,720
since a is in mp

997
00:40:32,960 --> 00:40:37,520
there is

998
00:40:34,720 --> 00:40:39,280
a non-deterministic machine besides a

999
00:40:37,520 --> 00:40:40,480
let's call it

1000
00:40:39,280 --> 00:40:41,680
n

1001
00:40:40,480 --> 00:40:45,040
okay

1002
00:40:41,680 --> 00:40:45,839
that's the definition of mp actually

1003
00:40:45,040 --> 00:40:48,240
then

1004
00:40:45,839 --> 00:40:50,079
since it is a non-deterministic turing

1005
00:40:48,240 --> 00:40:54,800
machine besides a

1006
00:40:50,079 --> 00:40:54,800
in polynomial time there must be

1007
00:40:54,880 --> 00:41:00,079
a constant a oh sorry k here a constant

1008
00:40:58,560 --> 00:41:02,480
k

1009
00:41:00,079 --> 00:41:03,520
and n here what is n here the input

1010
00:41:02,480 --> 00:41:05,680
length

1011
00:41:03,520 --> 00:41:09,680
so

1012
00:41:05,680 --> 00:41:11,359
the non-deterministic machine need

1013
00:41:09,680 --> 00:41:14,400
so much time

1014
00:41:11,359 --> 00:41:16,160
to decide a that's worst case okay worst

1015
00:41:14,400 --> 00:41:17,520
case scenario

1016
00:41:16,160 --> 00:41:21,599
so

1017
00:41:17,520 --> 00:41:23,680
let's do the reduction this way

1018
00:41:21,599 --> 00:41:26,560
for any language a

1019
00:41:23,680 --> 00:41:29,200
we get n which is the non-deterministic

1020
00:41:26,560 --> 00:41:31,280
decider for a

1021
00:41:29,200 --> 00:41:34,000
and then we know that

1022
00:41:31,280 --> 00:41:37,280
there must be some constant k for the

1023
00:41:34,000 --> 00:41:38,319
machine to run its worst case

1024
00:41:37,280 --> 00:41:41,839
okay

1025
00:41:38,319 --> 00:41:44,560
then we construct

1026
00:41:41,839 --> 00:41:50,160
on any input string for n

1027
00:41:44,560 --> 00:41:51,200
on any input string w for n we construct

1028
00:41:50,160 --> 00:41:52,880
nk

1029
00:41:51,200 --> 00:41:55,119
by nk

1030
00:41:52,880 --> 00:41:58,000
and to the kth power okay

1031
00:41:55,119 --> 00:42:00,319
nk by nk

1032
00:41:58,000 --> 00:42:00,319
table

1033
00:42:00,839 --> 00:42:06,319
then

1034
00:42:02,800 --> 00:42:06,319
what will this table do

1035
00:42:06,480 --> 00:42:10,960
we want to fill the table

1036
00:42:08,800 --> 00:42:13,440
with valid

1037
00:42:10,960 --> 00:42:15,280
computational history

1038
00:42:13,440 --> 00:42:17,200
of n

1039
00:42:15,280 --> 00:42:19,839
r w

1040
00:42:17,200 --> 00:42:21,680
okay that's the key concept

1041
00:42:19,839 --> 00:42:24,000
and how to

1042
00:42:21,680 --> 00:42:26,880
fill the blank here

1043
00:42:24,000 --> 00:42:30,560
how to fill the blank here

1044
00:42:26,880 --> 00:42:31,520
we define a lot of boolean variables

1045
00:42:30,560 --> 00:42:32,480
x

1046
00:42:31,520 --> 00:42:33,839
i

1047
00:42:32,480 --> 00:42:35,440
j

1048
00:42:33,839 --> 00:42:39,520
s

1049
00:42:35,440 --> 00:42:41,520
i is the row number okay and the j is

1050
00:42:39,520 --> 00:42:46,480
the column number

1051
00:42:41,520 --> 00:42:46,480
and s is all possible symbols

1052
00:42:48,160 --> 00:42:51,599
and what is all about all possible

1053
00:42:49,920 --> 00:42:54,480
symbols

1054
00:42:51,599 --> 00:42:56,160
from the turing machine you know

1055
00:42:54,480 --> 00:42:59,520
it states

1056
00:42:56,160 --> 00:43:01,920
and from w our two machines

1057
00:42:59,520 --> 00:43:03,200
alphabet you know

1058
00:43:01,920 --> 00:43:05,760
those

1059
00:43:03,200 --> 00:43:08,720
type symbols actually we want we want

1060
00:43:05,760 --> 00:43:11,280
this right and the blank

1061
00:43:08,720 --> 00:43:13,680
and the separator we added for our

1062
00:43:11,280 --> 00:43:15,119
purpose

1063
00:43:13,680 --> 00:43:18,319
okay

1064
00:43:15,119 --> 00:43:21,760
so all possible symbols include

1065
00:43:18,319 --> 00:43:21,760
state of the tuning machine

1066
00:43:22,560 --> 00:43:28,720
type alphabet of the turing machine and

1067
00:43:25,599 --> 00:43:30,560
you know you can add some finite extra

1068
00:43:28,720 --> 00:43:32,240
symbols for

1069
00:43:30,560 --> 00:43:34,720
convenience

1070
00:43:32,240 --> 00:43:37,200
so for each tape

1071
00:43:34,720 --> 00:43:39,359
for each blank here

1072
00:43:37,200 --> 00:43:41,119
we possibly

1073
00:43:39,359 --> 00:43:43,040
fill

1074
00:43:41,119 --> 00:43:45,680
these symbols

1075
00:43:43,040 --> 00:43:47,920
then we've defined

1076
00:43:45,680 --> 00:43:50,160
boolean variables this way

1077
00:43:47,920 --> 00:43:54,319
to represent

1078
00:43:50,160 --> 00:43:58,240
what symbol we want to field in for

1079
00:43:54,319 --> 00:43:58,240
example i and j

1080
00:43:58,720 --> 00:44:04,800
let's say if x i j

1081
00:44:01,599 --> 00:44:06,160
s let's say uh

1082
00:44:04,800 --> 00:44:07,440
blank

1083
00:44:06,160 --> 00:44:10,400
is true

1084
00:44:07,440 --> 00:44:12,800
that means we want to feel blank here

1085
00:44:10,400 --> 00:44:13,130
or x i j

1086
00:44:12,800 --> 00:44:15,359
um

1087
00:44:13,130 --> 00:44:16,720
[Music]

1088
00:44:15,359 --> 00:44:19,920
q 0

1089
00:44:16,720 --> 00:44:23,040
is true that means we want to fill q 0

1090
00:44:19,920 --> 00:44:26,240
here ok so it's pretty straightforward

1091
00:44:23,040 --> 00:44:28,480
we define a lot of boolean variables

1092
00:44:26,240 --> 00:44:32,000
the boolean variable to be false that

1093
00:44:28,480 --> 00:44:34,160
means we don't want to fill that symbol

1094
00:44:32,000 --> 00:44:37,760
into x i j

1095
00:44:34,160 --> 00:44:42,079
if that boolean variable x i j s is true

1096
00:44:37,760 --> 00:44:44,000
then that means we want to fill s into

1097
00:44:42,079 --> 00:44:46,400
rho i

1098
00:44:44,000 --> 00:44:48,640
column j

1099
00:44:46,400 --> 00:44:48,640
okay

1100
00:44:48,839 --> 00:44:52,560
then firstly

1101
00:44:51,200 --> 00:44:54,720
we want to

1102
00:44:52,560 --> 00:44:56,319
write a formula

1103
00:44:54,720 --> 00:44:57,680
boolean formula

1104
00:44:56,319 --> 00:45:02,160
so that

1105
00:44:57,680 --> 00:45:05,920
each blank exactly be written into

1106
00:45:02,160 --> 00:45:07,599
one symbol exactly one symbol

1107
00:45:05,920 --> 00:45:10,720
not

1108
00:45:07,599 --> 00:45:12,560
no symbol and not more than

1109
00:45:10,720 --> 00:45:15,680
one symbol

1110
00:45:12,560 --> 00:45:18,960
to make the table a table otherwise it's

1111
00:45:15,680 --> 00:45:21,200
not really a table right it's a

1112
00:45:18,960 --> 00:45:22,000
a mess actually

1113
00:45:21,200 --> 00:45:25,920
so

1114
00:45:22,000 --> 00:45:28,079
we define a boolean formula here

1115
00:45:25,920 --> 00:45:29,280
and for all possible

1116
00:45:28,079 --> 00:45:32,640
symbols

1117
00:45:29,280 --> 00:45:34,960
we or

1118
00:45:32,640 --> 00:45:34,960
these

1119
00:45:36,640 --> 00:45:41,839
boolean variables together

1120
00:45:39,599 --> 00:45:41,839
and

1121
00:45:42,560 --> 00:45:44,960
so for

1122
00:45:43,839 --> 00:45:47,200
row i

1123
00:45:44,960 --> 00:45:49,760
column j okay

1124
00:45:47,200 --> 00:45:51,119
for row i column j

1125
00:45:49,760 --> 00:45:53,040
imagine that

1126
00:45:51,119 --> 00:45:55,839
if

1127
00:45:53,040 --> 00:45:56,960
this formula to be true

1128
00:45:55,839 --> 00:46:00,480
okay

1129
00:45:56,960 --> 00:46:02,560
the other way if this formula is false

1130
00:46:00,480 --> 00:46:05,359
if this formula is false

1131
00:46:02,560 --> 00:46:07,680
that means we don't want to fill any

1132
00:46:05,359 --> 00:46:08,560
symbol into i j

1133
00:46:07,680 --> 00:46:10,720
right

1134
00:46:08,560 --> 00:46:14,480
that's not what we want we want to fill

1135
00:46:10,720 --> 00:46:15,599
symbols into i j so we have the formula

1136
00:46:14,480 --> 00:46:18,880
here

1137
00:46:15,599 --> 00:46:21,440
and if the formula evaluates true that

1138
00:46:18,880 --> 00:46:24,560
means at least the one symbol

1139
00:46:21,440 --> 00:46:27,040
will be filled into i j right

1140
00:46:24,560 --> 00:46:29,200
and of course two simple three symbol

1141
00:46:27,040 --> 00:46:31,920
doesn't matter all true

1142
00:46:29,200 --> 00:46:33,200
so we need another formula

1143
00:46:31,920 --> 00:46:34,160
to

1144
00:46:33,200 --> 00:46:38,240
make

1145
00:46:34,160 --> 00:46:39,520
the symbol i the blank i j exactly be

1146
00:46:38,240 --> 00:46:44,319
filled with

1147
00:46:39,520 --> 00:46:44,319
one symbol so we add this one

1148
00:46:45,119 --> 00:46:48,800
okay

1149
00:46:46,800 --> 00:46:50,800
it's kind of uh

1150
00:46:48,800 --> 00:46:53,119
complicated but it's

1151
00:46:50,800 --> 00:46:54,880
really really simple you see

1152
00:46:53,119 --> 00:46:56,400
for all possible

1153
00:46:54,880 --> 00:46:59,359
symbols

1154
00:46:56,400 --> 00:47:01,040
and as long as they are different

1155
00:46:59,359 --> 00:47:03,359
we

1156
00:47:01,040 --> 00:47:03,359
or

1157
00:47:06,319 --> 00:47:11,680
negation of x i

1158
00:47:08,960 --> 00:47:14,560
j s and x i j t

1159
00:47:11,680 --> 00:47:18,560
and then end them together

1160
00:47:14,560 --> 00:47:19,599
that means we pair each symbols

1161
00:47:18,560 --> 00:47:21,440
and then

1162
00:47:19,599 --> 00:47:24,160
we do the not

1163
00:47:21,440 --> 00:47:26,880
over and the end

1164
00:47:24,160 --> 00:47:29,119
then you you may probably

1165
00:47:26,880 --> 00:47:31,359
be confused with this but it's pretty

1166
00:47:29,119 --> 00:47:32,960
simple to understand

1167
00:47:31,359 --> 00:47:37,440
imagine that

1168
00:47:32,960 --> 00:47:39,599
for all the boolean variables

1169
00:47:37,440 --> 00:47:42,240
for all the boolean variables for i and

1170
00:47:39,599 --> 00:47:44,800
j for all possible symbols

1171
00:47:42,240 --> 00:47:47,520
if you have all fours

1172
00:47:44,800 --> 00:47:50,640
then what will happen

1173
00:47:47,520 --> 00:47:51,839
if all the boolean variables for i j

1174
00:47:50,640 --> 00:47:53,040
are false

1175
00:47:51,839 --> 00:47:56,319
that means

1176
00:47:53,040 --> 00:47:57,200
all these negations are true

1177
00:47:56,319 --> 00:48:00,160
right

1178
00:47:57,200 --> 00:48:04,000
all these negations are true

1179
00:48:00,160 --> 00:48:07,359
and since all these negations are true

1180
00:48:04,000 --> 00:48:10,400
then you do or they are still true and

1181
00:48:07,359 --> 00:48:13,920
all the pair

1182
00:48:10,400 --> 00:48:15,280
are true so you do end still true

1183
00:48:13,920 --> 00:48:16,160
okay

1184
00:48:15,280 --> 00:48:19,040
so

1185
00:48:16,160 --> 00:48:21,839
if none of

1186
00:48:19,040 --> 00:48:24,079
the boolean variables for

1187
00:48:21,839 --> 00:48:25,359
i j

1188
00:48:24,079 --> 00:48:27,680
is true

1189
00:48:25,359 --> 00:48:27,680
then

1190
00:48:27,839 --> 00:48:31,280
if

1191
00:48:28,640 --> 00:48:35,040
none of the boolean variables are true

1192
00:48:31,280 --> 00:48:36,800
then this formula will be true

1193
00:48:35,040 --> 00:48:40,960
okay

1194
00:48:36,800 --> 00:48:45,200
then if one of the formula sorry one of

1195
00:48:40,960 --> 00:48:48,480
the variable is true others are false

1196
00:48:45,200 --> 00:48:50,559
let's say

1197
00:48:48,480 --> 00:48:55,359
if

1198
00:48:50,559 --> 00:48:57,839
a pair of two fours then it's true

1199
00:48:55,359 --> 00:48:58,880
and all the symbols there is one true

1200
00:48:57,839 --> 00:49:00,880
right

1201
00:48:58,880 --> 00:49:05,200
so let's say

1202
00:49:00,880 --> 00:49:06,160
x i oh sorry let's say

1203
00:49:05,200 --> 00:49:07,040
i

1204
00:49:06,160 --> 00:49:08,720
j

1205
00:49:07,040 --> 00:49:10,319
q 0

1206
00:49:08,720 --> 00:49:12,319
let's say it's true

1207
00:49:10,319 --> 00:49:13,040
others are false

1208
00:49:12,319 --> 00:49:16,880
so

1209
00:49:13,040 --> 00:49:18,079
x i j q 0 is true then x i j q 0 bar is

1210
00:49:16,880 --> 00:49:20,559
false

1211
00:49:18,079 --> 00:49:21,599
right so

1212
00:49:20,559 --> 00:49:23,119
false

1213
00:49:21,599 --> 00:49:24,559
but it doesn't matter

1214
00:49:23,119 --> 00:49:26,720
because

1215
00:49:24,559 --> 00:49:29,119
it will pair with

1216
00:49:26,720 --> 00:49:31,520
a true

1217
00:49:29,119 --> 00:49:34,240
literal because all other variables are

1218
00:49:31,520 --> 00:49:35,040
false right after negation they are true

1219
00:49:34,240 --> 00:49:37,440
and

1220
00:49:35,040 --> 00:49:38,240
only this one is true

1221
00:49:37,440 --> 00:49:42,839
so

1222
00:49:38,240 --> 00:49:42,839
it will be negated as force

1223
00:49:44,240 --> 00:49:48,960
so for all possible pairs they are all

1224
00:49:47,520 --> 00:49:51,839
true

1225
00:49:48,960 --> 00:49:53,839
now we know that if all the boolean

1226
00:49:51,839 --> 00:49:54,960
variables are false

1227
00:49:53,839 --> 00:49:58,480
then

1228
00:49:54,960 --> 00:50:00,079
this one is true and if one of the

1229
00:49:58,480 --> 00:50:03,040
variables

1230
00:50:00,079 --> 00:50:04,480
is true others are false this formula is

1231
00:50:03,040 --> 00:50:06,400
still

1232
00:50:04,480 --> 00:50:07,280
true

1233
00:50:06,400 --> 00:50:08,559
but

1234
00:50:07,280 --> 00:50:11,599
if for

1235
00:50:08,559 --> 00:50:13,280
all the variables there are two

1236
00:50:11,599 --> 00:50:15,200
true

1237
00:50:13,280 --> 00:50:16,160
the two variables are true others are

1238
00:50:15,200 --> 00:50:18,480
false

1239
00:50:16,160 --> 00:50:20,480
then the whole boolean formula will be

1240
00:50:18,480 --> 00:50:21,520
they evaluate force

1241
00:50:20,480 --> 00:50:23,359
why

1242
00:50:21,520 --> 00:50:25,040
because when the two

1243
00:50:23,359 --> 00:50:26,400
when the two variable

1244
00:50:25,040 --> 00:50:28,319
assigned true

1245
00:50:26,400 --> 00:50:29,200
pair together

1246
00:50:28,319 --> 00:50:31,760
and

1247
00:50:29,200 --> 00:50:33,200
be negated as false

1248
00:50:31,760 --> 00:50:35,520
and then

1249
00:50:33,200 --> 00:50:38,400
this one will be false

1250
00:50:35,520 --> 00:50:40,400
and exactly that pair

1251
00:50:38,400 --> 00:50:42,319
will make everything

1252
00:50:40,400 --> 00:50:43,359
false

1253
00:50:42,319 --> 00:50:47,359
okay

1254
00:50:43,359 --> 00:50:47,359
so that's why we write it this way

1255
00:50:48,559 --> 00:50:52,400
we use

1256
00:50:50,079 --> 00:50:52,400
this

1257
00:50:52,800 --> 00:50:55,800
formula

1258
00:50:55,920 --> 00:50:59,760
to ensure

1259
00:50:58,000 --> 00:51:02,880
there are

1260
00:50:59,760 --> 00:51:04,400
less or equal to one

1261
00:51:02,880 --> 00:51:06,240
boolean variable

1262
00:51:04,400 --> 00:51:07,520
be set to

1263
00:51:06,240 --> 00:51:09,359
true

1264
00:51:07,520 --> 00:51:11,280
and we use

1265
00:51:09,359 --> 00:51:13,440
this formula

1266
00:51:11,280 --> 00:51:14,640
to ensure

1267
00:51:13,440 --> 00:51:17,680
more

1268
00:51:14,640 --> 00:51:18,960
than one or equal to one

1269
00:51:17,680 --> 00:51:20,839
variable

1270
00:51:18,960 --> 00:51:22,880
to be set to

1271
00:51:20,839 --> 00:51:24,480
true then

1272
00:51:22,880 --> 00:51:25,760
we do an end

1273
00:51:24,480 --> 00:51:29,920
so

1274
00:51:25,760 --> 00:51:29,920
if you've got a formula here

1275
00:51:30,559 --> 00:51:38,079
if you are putting the assignment

1276
00:51:34,640 --> 00:51:40,319
satisfies this formula that means

1277
00:51:38,079 --> 00:51:40,319
for

1278
00:51:40,559 --> 00:51:42,800
i

1279
00:51:41,359 --> 00:51:45,040
row i

1280
00:51:42,800 --> 00:51:48,160
column j

1281
00:51:45,040 --> 00:51:51,119
only one symbol

1282
00:51:48,160 --> 00:51:55,599
only one symbol

1283
00:51:51,119 --> 00:51:55,599
is true others are all false

1284
00:51:56,000 --> 00:52:01,839
that will make us

1285
00:51:57,680 --> 00:52:02,800
feel in exactly one symbol

1286
00:52:01,839 --> 00:52:07,839
two

1287
00:52:02,800 --> 00:52:07,839
row i colon j on the table

1288
00:52:08,640 --> 00:52:11,760
okay

1289
00:52:10,720 --> 00:52:13,280
then

1290
00:52:11,760 --> 00:52:15,920
then

1291
00:52:13,280 --> 00:52:17,359
you just need a you know

1292
00:52:15,920 --> 00:52:19,040
double loop

1293
00:52:17,359 --> 00:52:21,200
from i

1294
00:52:19,040 --> 00:52:25,040
sorry i from 1 to

1295
00:52:21,200 --> 00:52:26,720
n to the k's power and j from 1 to the n

1296
00:52:25,040 --> 00:52:28,400
to the k power

1297
00:52:26,720 --> 00:52:31,280
then

1298
00:52:28,400 --> 00:52:31,280
you will have

1299
00:52:31,359 --> 00:52:34,079
a boolean

1300
00:52:33,200 --> 00:52:37,119
uh

1301
00:52:34,079 --> 00:52:39,040
formula a boolean formula

1302
00:52:37,119 --> 00:52:42,880
for cell

1303
00:52:39,040 --> 00:52:42,880
and you will know that you can know that

1304
00:52:43,359 --> 00:52:46,559
if

1305
00:52:44,240 --> 00:52:47,839
you have a boolean

1306
00:52:46,559 --> 00:52:49,440
assignment

1307
00:52:47,839 --> 00:52:52,240
satisfied

1308
00:52:49,440 --> 00:52:56,319
satisfied by sale

1309
00:52:52,240 --> 00:52:58,079
that assignment can be translated into a

1310
00:52:56,319 --> 00:52:59,359
table

1311
00:52:58,079 --> 00:53:02,079
in which

1312
00:52:59,359 --> 00:53:03,359
each blank is filled

1313
00:53:02,079 --> 00:53:06,800
exactly

1314
00:53:03,359 --> 00:53:06,800
with one symbol

1315
00:53:08,240 --> 00:53:12,079
okay

1316
00:53:09,280 --> 00:53:15,280
not no symbol not more than one symbol

1317
00:53:12,079 --> 00:53:18,880
exactly one symbol that's why we call

1318
00:53:15,280 --> 00:53:18,880
this formula by cell

1319
00:53:20,880 --> 00:53:23,119
and

1320
00:53:23,200 --> 00:53:27,760
understanding

1321
00:53:24,720 --> 00:53:31,200
how fine cells work

1322
00:53:27,760 --> 00:53:33,359
will help you a lot in understanding how

1323
00:53:31,200 --> 00:53:34,720
the whole proof work

1324
00:53:33,359 --> 00:53:38,319
because

1325
00:53:34,720 --> 00:53:40,800
we want to use the manipulation and

1326
00:53:38,319 --> 00:53:42,319
boolean variables actually put in truth

1327
00:53:40,800 --> 00:53:43,280
assignment

1328
00:53:42,319 --> 00:53:44,559
to

1329
00:53:43,280 --> 00:53:46,640
ensure

1330
00:53:44,559 --> 00:53:51,040
what we

1331
00:53:46,640 --> 00:53:52,000
filled in the whole in the whole table

1332
00:53:51,040 --> 00:53:53,520
okay

1333
00:53:52,000 --> 00:53:56,960
so

1334
00:53:53,520 --> 00:53:58,559
i guess time's up for this

1335
00:53:56,960 --> 00:53:59,839
for this part

1336
00:53:58,559 --> 00:54:01,599
so

1337
00:53:59,839 --> 00:54:05,480
we will continue

1338
00:54:01,599 --> 00:54:05,480
in next lecture

